├── .claude
    ├── agents
    │   ├── backend-agents.md
    │   ├── code-reviewer.md
    │   └── frontend-developer.md
    ├── commands
    │   ├── execute-frp.md
    │   ├── generate-brd.md
    │   ├── generate-frp-from-prd.md
    │   ├── generate-frp.md
    │   └── generate-prd-from-brd.md
    └── settings.json
├── .cline
    └── config.json
├── .devcontainer
    └── devcontainer.json
├── .env.example
├── .gemini
    └── settings.json
├── .github
    ├── dependabot.yaml
    ├── scripts
    │   ├── create_pr.sh
    │   └── delete_branch_pr_tag.sh
    └── workflows
    │   ├── bump-my-version.yaml
    │   ├── codeql.yaml
    │   ├── generate-deploy-mkdocs-ghpages.yaml
    │   ├── links-fail-fast.yaml
    │   ├── pytest.yaml
    │   ├── ruff.yaml
    │   ├── summarize-jobs-reusable.yaml
    │   └── write-llms-txt.yaml
├── .gitignore
├── .gitmessage
├── .vscode
    ├── extensions.json
    └── settings.json
├── AGENTS.md
├── CHANGELOG.md
├── CLAUDE.md
├── Dockerfile
├── GEMINI.md
├── LICENSE
├── Makefile
├── README.md
├── assets
    └── images
    │   ├── Business-Driven-Development-CABIO-Enterprise-Concise-dark.png
    │   ├── Business-Driven-Development-CABIO-Enterprise-Concise-light.png
    │   ├── Business-Driven-Development-CABIO-Enterprise-Phase-dark.png
    │   ├── Business-Driven-Development-CABIO-Enterprise-Phase-light.png
    │   ├── Business-Driven-Development-CABIO-SMB-Concise-dark.png
    │   ├── Business-Driven-Development-CABIO-SMB-Concise-light.png
    │   ├── Business-Driven-Development-CABIO-SMB-Phase-dark.png
    │   ├── Business-Driven-Development-CABIO-SMB-Phase-light.png
    │   ├── Business-Driven-Development-Current-Concise-dark.png
    │   ├── Business-Driven-Development-Current-Concise-light.png
    │   ├── Business-Driven-Development-Current-Dark-dark.png
    │   ├── Business-Driven-Development-Current-Dark-light.png
    │   ├── example_execute_feature_mcp_server_PRP_update_pyproject.PNG
    │   ├── example_execute_feature_mcp_server_PRP_update_pyproject_diff.PNG
    │   ├── example_execute_feature_mcp_server_created.PNG
    │   ├── example_generate_feature_mcp_server_PRP.PNG
    │   └── sequence_diagram_legacy_workflow_custom_commands.png
├── context
    ├── BRDs
    │   └── example_ai_assistant.md
    ├── business_inputs
    │   └── example_ai_assistant.md
    ├── config
    │   └── paths.md
    └── templates
    │   ├── brd_base.md
    │   ├── business_input_base.md
    │   ├── feature_base.md
    │   ├── frp_base.md
    │   └── prd_base.md
├── docs
    ├── CABIO-implementation-guide.md
    ├── CABIO-product-roadmap.md
    ├── CABIO-vision.md
    ├── architecture
    │   ├── Business-Driven-Development-CABIO-Enterprise-Concise.plantuml
    │   ├── Business-Driven-Development-CABIO-Enterprise-Phase.plantuml
    │   ├── Business-Driven-Development-CABIO-SMB-Concise.plantuml
    │   ├── Business-Driven-Development-CABIO-SMB-Phase.plantuml
    │   ├── Business-Driven-Development-Current-Concise.plantuml
    │   ├── Business-Driven-Development-Current.plantuml
    │   ├── README.md
    │   └── styles
    │   │   ├── github-dark.puml
    │   │   └── github-light.puml
    ├── examples.md
    ├── llms.txt
    └── usage-guide.md
├── examples
    └── mcp-server-client
    │   ├── Dockerfile
    │   ├── Makefile
    │   ├── README.md
    │   ├── context
    │       ├── PRPs
    │       │   ├── feature_1_mcp_server.md
    │       │   ├── feature_2_mcp_client.md
    │       │   └── feature_3_streamlit_gui.md
    │       ├── features
    │       │   ├── feature_1_mcp_server.md
    │       │   ├── feature_2_mcp_client.md
    │       │   └── feature_3_streamlit_gui.md
    │       ├── outputs
    │       │   ├── client_get_date_input.json
    │       │   ├── client_get_weather_input.json
    │       │   ├── client_invalid_tool.json
    │       │   ├── client_roll_dice_input.json
    │       │   ├── get_date_example.json
    │       │   ├── get_weather_example.json
    │       │   ├── roll_dice_example.json
    │       │   ├── streamlit_error_handling.json
    │       │   ├── streamlit_get_date_interaction.json
    │       │   ├── streamlit_get_weather_interaction.json
    │       │   └── streamlit_roll_dice_interaction.json
    │       └── templates
    │       │   ├── feature_base.md
    │       │   └── prp_base.md
    │   ├── docker-compose.yml
    │   ├── py.typed
    │   ├── pyproject.toml
    │   ├── src
    │       ├── __init__.py
    │       ├── gui
    │       │   ├── __init__.py
    │       │   ├── app.py
    │       │   ├── components
    │       │   │   ├── __init__.py
    │       │   │   ├── connection.py
    │       │   │   ├── history.py
    │       │   │   └── tool_forms.py
    │       │   ├── models
    │       │   │   ├── __init__.py
    │       │   │   └── gui_models.py
    │       │   └── utils
    │       │   │   ├── __init__.py
    │       │   │   ├── async_helper.py
    │       │   │   ├── formatting.py
    │       │   │   ├── mcp_wrapper.py
    │       │   │   └── validation.py
    │       ├── main.py
    │       ├── mcp_client
    │       │   ├── __init__.py
    │       │   ├── cli.py
    │       │   ├── client.py
    │       │   ├── models
    │       │   │   ├── __init__.py
    │       │   │   └── responses.py
    │       │   └── transport.py
    │       ├── mcp_server
    │       │   ├── __init__.py
    │       │   ├── models
    │       │   │   ├── __init__.py
    │       │   │   └── requests.py
    │       │   ├── server.py
    │       │   └── tools
    │       │   │   ├── __init__.py
    │       │   │   ├── base.py
    │       │   │   ├── date_time.py
    │       │   │   ├── dice.py
    │       │   │   └── weather.py
    │       └── py.typed
    │   ├── tests
    │       ├── __init__.py
    │       ├── fixtures
    │       │   ├── __init__.py
    │       │   └── mcp_messages.py
    │       ├── test_cli.py
    │       ├── test_gui.py
    │       ├── test_mcp_client.py
    │       ├── test_mcp_server.py
    │       └── test_tools
    │       │   ├── __init__.py
    │       │   ├── test_date_time.py
    │       │   ├── test_dice.py
    │       │   └── test_weather.py
    │   └── uv.lock
├── mkdocs.yaml
├── pyproject.toml
├── scripts
    └── generate-plantuml-png.sh
├── src
    ├── __init__.py
    ├── main.py
    └── py.typed
├── tests
    └── test_tests.py
└── uv.lock


/.claude/agents/backend-agents.md:
--------------------------------------------------------------------------------
 1 | ---
 2 | name: backend-architect
 3 | description: Design RESTful APIs, microservice boundaries, and database schemas. Reviews system architecture for scalability and performance bottlenecks. Use PROACTIVELY when creating new backend services or APIs.
 4 | link: https://github.com/wshobson/agents/blob/main/backend-architect.md
 5 | ---
 6 | 
 7 | # Backend Architect Claude Code Sub-Agent
 8 | 
 9 | You are a backend system architect specializing in scalable API design and microservices.
10 | 
11 | ## Focus Areas
12 | 
13 | - RESTful API design with proper versioning and error handling
14 | - Service boundary definition and inter-service communication
15 | - Database schema design (normalization, indexes, sharding)
16 | - Caching strategies and performance optimization
17 | - Basic security patterns (auth, rate limiting)
18 | 
19 | ## Approach
20 | 
21 | 1. Start with clear service boundaries
22 | 2. Design APIs contract-first
23 | 3. Consider data consistency requirements
24 | 4. Plan for horizontal scaling from day one
25 | 5. Keep it simple - avoid premature optimization
26 | 
27 | ## Output
28 | 
29 | - API endpoint definitions with example requests/responses
30 | - Service architecture diagram (mermaid or ASCII)
31 | - Database schema with key relationships
32 | - List of technology recommendations with brief rationale
33 | - Potential bottlenecks and scaling considerations
34 | 
35 | Always provide concrete examples and focus on practical implementation over theory.
36 | 


--------------------------------------------------------------------------------
/.claude/agents/code-reviewer.md:
--------------------------------------------------------------------------------
 1 | ---
 2 | name: code-reviewer
 3 | description: Expert code review specialist. Proactively reviews code for quality, security, and maintainability. Use immediately after writing or modifying code.
 4 | link: https://github.com/wshobson/agents/blob/main/code-reviewer.md
 5 | ---
 6 | 
 7 | # Code Reviewer Claude Code Sub-Agent
 8 | 
 9 | You are a senior code reviewer ensuring high standards of code quality and security.
10 | 
11 | When invoked:
12 | 
13 | 1. Run git diff to see recent changes
14 | 2. Focus on modified files
15 | 3. Begin review immediately
16 | 
17 | Review checklist:
18 | 
19 | - Code is simple and readable
20 | - Functions and variables are well-named
21 | - No duplicated code
22 | - Proper error handling
23 | - No exposed secrets or API keys
24 | - Input validation implemented
25 | - Good test coverage
26 | - Performance considerations addressed
27 | 
28 | Provide feedback organized by priority:
29 | 
30 | - Critical issues (must fix)
31 | - Warnings (should fix)
32 | - Suggestions (consider improving)
33 | 
34 | Include specific examples of how to fix issues.
35 | 


--------------------------------------------------------------------------------
/.claude/agents/frontend-developer.md:
--------------------------------------------------------------------------------
 1 | ---
 2 | name: frontend-developer
 3 | description: Build React components, implement responsive layouts, and handle client-side state management. Optimizes frontend performance and ensures accessibility. Use PROACTIVELY when creating UI components or fixing frontend issues.
 4 | link: https://github.com/wshobson/agents/blob/main/frontend-developer.md
 5 | ---
 6 | 
 7 | # Frontend Developer Claude Code Sub-Agent
 8 | 
 9 | You are a frontend developer specializing in modern React applications and responsive design.
10 | 
11 | ## Focus Areas
12 | 
13 | - React component architecture (hooks, context, performance)
14 | - Responsive CSS with Tailwind/CSS-in-JS
15 | - State management (Redux, Zustand, Context API)
16 | - Frontend performance (lazy loading, code splitting, memoization)
17 | - Accessibility (WCAG compliance, ARIA labels, keyboard navigation)
18 | 
19 | ## Approach
20 | 
21 | 1. Component-first thinking - reusable, composable UI pieces
22 | 2. Mobile-first responsive design
23 | 3. Performance budgets - aim for sub-3s load times
24 | 4. Semantic HTML and proper ARIA attributes
25 | 5. Type safety with TypeScript when applicable
26 | 
27 | ## Output
28 | 
29 | - Complete React component with props interface
30 | - Styling solution (Tailwind classes or styled-components)
31 | - State management implementation if needed
32 | - Basic unit test structure
33 | - Accessibility checklist for the component
34 | - Performance considerations and optimizations
35 | 
36 | Focus on working code over explanations. Include usage examples in comments.
37 | 


--------------------------------------------------------------------------------
/.claude/commands/execute-frp.md:
--------------------------------------------------------------------------------
 1 | # Execute Feature Requirements Prompt (FRP)
 2 | 
 3 | Implement a feature using the FRP file provided.
 4 | 
 5 | ## Rules
 6 | 
 7 | - Extract filename from `$ARGUMENTS` into `$FILE_NAME` (append `.md` if needed)
 8 | - Write outputs to log file using AGENTS.md timestamp format `<timestamp>_Claude_ExecFRP_${FILE_NAME}` in `$CTX_LOGS_PATH` (for future agent and human analysis)
 9 | - Use TodoWrite tool to track implementation progress
10 | - Input FRP: `$CTX_FRP_PATH/$FILE_NAME`
11 | - Reference PRD: Look for corresponding PRD in `$CTX_PRD_PATH` for additional context
12 | - Reference BRD: Look for corresponding BRD in `$CTX_BRD_PATH` for business alignment
13 | 
14 | ## Execution Process
15 | 
16 | 1. **Load and Validate FRP**
17 |    - Read the specified FRP file
18 |    - Load corresponding PRD for product context (if available)
19 |    - Load corresponding BRD for business alignment (if available)
20 |    - Understand all context and requirements across BRD → PRD → FRP chain
21 |    - Apply AGENTS.md Quality Evaluation Framework to assess readiness
22 |    - **Research Policy**: Focus on execution; extend research only if significant gaps discovered during implementation. See [Failure Recovery](#failure-recovery).
23 | 
24 | 2. **Plan Implementation**
25 |    - Apply AGENTS.md Quality Evaluation Framework to assess FRP readiness
26 |    - Create comprehensive TodoWrite plan addressing all FRP requirements
27 |    - Break down into manageable steps following AGENTS.md BDD approach
28 |    - Identify patterns from existing codebase to follow
29 | 
30 | 3. **Implement Features**
31 |    - Follow TodoWrite plan step-by-step
32 |    - Mark tasks as in_progress/completed as you work
33 |    - Create tests first (BDD/TDD approach per AGENTS.md)
34 |    - Implement minimal viable solution then iterate
35 | 
36 | 4. **Validate Implementation**
37 |    - Use AGENTS.md unified command reference with error recovery
38 |    - Fix failures following project patterns
39 |    - Update TodoWrite and log progress
40 | 
41 | 5. **Final Verification**
42 |    - Complete all FRP checklist items
43 |    - Verify against AGENTS.md Quality Evaluation Framework
44 |    - Mark TodoWrite tasks as completed
45 |    - Log completion status
46 | 
47 | ## Escalation
48 | 
49 | Use AGENTS.md Decision Framework if:
50 | 
51 | - FRP requirements conflict with AGENTS.md
52 | - Implementation requires architectural changes
53 | - Critical context is missing
54 | 
55 | ## Failure Recovery
56 | 
57 | **If implementation fails despite good FRP:**
58 | 
59 | 1. **Analyze Failure**
60 |    - Review logs and error messages
61 |    - Identify specific failure points
62 |    - Document findings in TodoWrite
63 | 
64 | 2. **Iterative Improvement**
65 |    - Update FRP with new learnings (mark as "execution-discovered gaps")
66 |    - Adjust implementation approach
67 |    - Re-run AGENTS.md Quality Evaluation Framework
68 | 
69 | 3. **Escalate if Persistent**
70 |    - Use AGENTS.md Decision Framework
71 |    - Document architectural or requirement issues
72 |    - **Report Research Gaps**: If significant research gaps caused failure, document for future FRP generation improvement
73 |    - Request human guidance
74 | 


--------------------------------------------------------------------------------
/.claude/commands/generate-frp-from-prd.md:
--------------------------------------------------------------------------------
  1 | # Create Feature-Specific Requirements Prompt (FRP) from Product Requirements Document (PRD)
  2 | 
  3 | This command creates a focused FRP for a single feature using PRD context and business alignment from BRD.
  4 | 
  5 | ## Rules
  6 | 
  7 | - Extract PRD filename from first argument: `$PRD_FILE_NAME` (append `.md` if needed)
  8 | - Extract feature name from second argument: `$FEATURE_NAME`
  9 | - Use TodoWrite tool to track progress throughout the process
 10 | - Input PRD: `$CTX_PRD_PATH/$PRD_FILE_NAME` (must exist)
 11 | - Input BRD: `$CTX_BRD_PATH/$PRD_FILE_NAME` (for business context)
 12 | - Template: `$CTX_FRP_TEMPLATE`
 13 | - Output: `$CTX_FRP_PATH/${PRD_FILE_NAME}_${FEATURE_NAME}.md`
 14 | 
 15 | ## Feature-Focused Translation Process
 16 | 
 17 | 1. **Load Product Context**
 18 |    - Read specified PRD file for product specifications
 19 |    - Identify target feature and its specifications
 20 |    - Extract feature-specific user stories and acceptance criteria
 21 |    - Understand feature dependencies and implementation priority
 22 | 
 23 | 2. **Load Business Alignment**
 24 |    - Reference corresponding BRD for business context
 25 |    - Understand how this feature serves business objectives
 26 |    - Note business constraints that affect this feature
 27 |    - Connect feature success to business KPIs
 28 | 
 29 | 3. **Feature Isolation**
 30 |    - Focus on single feature while maintaining product context
 31 |    - Identify feature boundaries and scope
 32 |    - Define integration points with other features
 33 |    - Establish feature-specific success criteria
 34 | 
 35 | ## Enhanced FRP Generation
 36 | 
 37 | Use `$CTX_FRP_TEMPLATE` as base template, enhanced with PRD feature context and BRD business alignment.
 38 | 
 39 | ### PRD-Enhanced FRP Sections
 40 | 
 41 | **Goal Section Enhancement:**
 42 | 
 43 | - Focus on specific feature from PRD feature list
 44 | - Reference feature's business value from BRD alignment
 45 | - Include feature priority and user impact
 46 | - Define feature boundaries and scope
 47 | 
 48 | **Why Section Enhancement:**
 49 | 
 50 | - Include feature-specific business value from PRD
 51 | - Reference user personas this feature serves
 52 | - Connect to business objectives from BRD
 53 | - Explain feature's role in overall product vision
 54 | 
 55 | **What Section Enhancement:**
 56 | 
 57 | - Include feature's user stories from PRD
 58 | - Translate acceptance criteria into technical requirements
 59 | - Define feature-specific user experience requirements
 60 | - Include integration requirements with other features
 61 | 
 62 | **Success Criteria Enhancement:**
 63 | 
 64 | - Include feature acceptance criteria from PRD
 65 | - Reference feature success metrics from PRD
 66 | - Include business impact measurement from BRD alignment
 67 | - Define feature completion and validation criteria
 68 | 
 69 | ### Implementation Blueprint Enhancement
 70 | 
 71 | **Feature-Focused Implementation:**
 72 | 
 73 | - Consider PRD constraints in technical design
 74 | - Plan for feature-specific user experience requirements
 75 | - Include integration points with other features from PRD
 76 | - Address feature dependencies from PRD implementation strategy
 77 | 
 78 | **Business-Technical Bridge:**
 79 | 
 80 | - **Feature User Stories → Technical Requirements**: Transform feature user stories into functional specifications
 81 | - **Feature Acceptance Criteria → Validation Tests**: Convert acceptance criteria into technical validation approaches
 82 | - **Feature Success Metrics → Technical Metrics**: Feature KPIs inform technical validation criteria
 83 | - **Feature Dependencies → Technical Dependencies**: PRD feature dependencies become technical integration requirements
 84 | 
 85 | ## Research Process
 86 | 
 87 | 1. **Feature-Informed Codebase Analysis**
 88 |    - Search for patterns that align with feature requirements
 89 |    - Identify existing code that serves similar user stories
 90 |    - Consider feature constraints for technical implementation choices
 91 |    - Look for integration patterns with dependent features
 92 | 
 93 | 2. **Context Gathering**
 94 |    - Verify alignment between feature requirements and technical capabilities
 95 |    - Check integration points support feature user journeys
 96 |    - Ensure technical patterns serve feature acceptance criteria
 97 | 
 98 | **Research Completeness:** Comprehensive research combining feature context with technical analysis to minimize additional research during execution.
 99 | 
100 | ## Planning and Execution
101 | 
102 | **Before writing the FRP:**
103 | 
104 | 1. Create TodoWrite plan combining feature analysis with technical implementation
105 | 2. Validate feature-technical alignment against PRD specifications
106 | 3. Structure FRP for focused feature implementation success
107 | 
108 | ## Quality Checklist
109 | 
110 | **PRD-FRP Feature Integration:**
111 | 
112 | - [ ] Feature scope clearly defined from PRD specifications
113 | - [ ] User stories translated to technical requirements
114 | - [ ] Feature acceptance criteria reflected in technical validation
115 | - [ ] Feature success metrics included in technical success criteria
116 | - [ ] Feature dependencies identified and addressed
117 | - [ ] Integration points with other features documented
118 | - [ ] Business alignment maintained from BRD context
119 | 
120 | ## PRD-FRP Validation Checklist
121 | 
122 | **Before handoff to execution:**
123 | 
124 | - [ ] Clear traceability from PRD feature to FRP implementation
125 | - [ ] Feature user stories directly inform technical requirements
126 | - [ ] Acceptance criteria converted to testable technical criteria
127 | - [ ] Feature success metrics integrated into technical validation
128 | - [ ] Implementation approach respects feature dependencies from PRD
129 | - [ ] Technical design supports feature user experience requirements
130 | - [ ] Feature boundaries clearly defined and respected
131 | - [ ] Quality evaluation scores meet AGENTS.md thresholds
132 | - [ ] FRP enables independent feature implementation while maintaining product context
133 | 
134 | ## Success Metrics
135 | 
136 | - Apply AGENTS.md Quality Evaluation Framework enhanced with feature context
137 | - Feature user stories clearly drive technical implementation approach
138 | - Feature acceptance criteria directly inform technical validation
139 | - Feature success metrics measurable through technical implementation
140 | - Implementation approach respects feature dependencies and integration requirements
141 | 


--------------------------------------------------------------------------------
/.claude/commands/generate-frp.md:
--------------------------------------------------------------------------------
 1 | # Create Feature Requirements Prompt (FRP)
 2 | 
 3 | This command aims to extract core intent from feature description and create targeted FRP. Furthermore structure inputs to optimize agent reasoning within project constraints.
 4 | 
 5 | ## Rules
 6 | 
 7 | - Extract filename from `$ARGUMENTS` into `$FILE_NAME` (append `.md` if needed)
 8 | - Use TodoWrite tool to track progress throughout the process
 9 | - Input: `$CTX_FEATURES_PATH/$FILE_NAME`
10 | - Template: `$CTX_FRP_TEMPLATE`
11 | - Output: `$CTX_FRP_PATH/$FILE_NAME`
12 | 
13 | ## Research Process
14 | 
15 | 1. **Codebase Analysis**
16 |    - Search for similar features and patterns
17 |    - Use Agent tool for multi-file searches when scope unclear
18 |    - Use Grep tool for specific pattern searches
19 |    - Document patterns in TodoWrite tool
20 | 
21 | 2. **Context Gathering**
22 |    - Verify file paths exist before referencing
23 |    - Check test patterns in `$TEST_PATH`
24 |    - Note integration points in existing agent system
25 | 
26 | **Research Completeness:** Conduct comprehensive research during FRP generation to minimize additional research needed during execution phase.
27 | 
28 | ## FRP Generation
29 | 
30 | Use `$CTX_FRP_TEMPLATE` as base template.
31 | 
32 | ### Include in FRP
33 | 
34 | - **Code Examples**: Real patterns from codebase analysis
35 | - **Dependencies**: Verified libraries from `$PROJECT_REQUIREMENTS`
36 | - **Integration Points**: Existing agent system touchpoints
37 | - **Error Handling**: Project-defined error functions
38 | 
39 | ### Implementation Structure
40 | 
41 | - Clear objective and deliverable
42 | - Implementation tasks in order
43 | - Reference patterns from codebase
44 | 
45 | ## Planning and Execution
46 | 
47 | **Before writing the FRP:**
48 | 
49 | 1. Create TodoWrite plan for FRP generation
50 | 2. Validate all research findings
51 | 3. Structure FRP for one-pass implementation success
52 | 
53 | ## Quality Checklist
54 | 
55 | **FRP-Specific:**
56 | 
57 | - [ ] Clear implementation objective defined
58 | - [ ] Real code examples from codebase included
59 | - [ ] File paths confirmed to exist
60 | - [ ] Integration points with agent system identified
61 | - [ ] TodoWrite plan created for implementation tracking
62 | 
63 | ## FRP Validation Checklist
64 | 
65 | **Before handoff to execution:**
66 | 
67 | - [ ] All template sections populated with specific information
68 | - [ ] Code examples reference actual files from codebase
69 | - [ ] Implementation tasks ordered logically
70 | - [ ] Integration points clearly identified
71 | - [ ] Quality evaluation scores meet AGENTS.md thresholds
72 | - [ ] FRP self-contained (minimal additional research needed during execution)
73 | 
74 | ## Success Metrics
75 | 
76 | - Apply AGENTS.md Quality Evaluation Framework to FRP
77 | - **Must** proceed only if all scores meet AGENTS.md minimum thresholds
78 | 


--------------------------------------------------------------------------------
/.claude/commands/generate-prd-from-brd.md:
--------------------------------------------------------------------------------
  1 | # Create Product Requirements Document (PRD) from Business Requirements Definition (BRD)
  2 | 
  3 | This command translates business requirements into specific product features, user stories, and acceptance criteria.
  4 | 
  5 | ## Rules
  6 | 
  7 | - Extract filename from `$ARGUMENTS` into `$FILE_NAME` (append `.md` if needed)
  8 | - Use TodoWrite tool to track progress throughout the process
  9 | - Input BRD: `$CTX_BRD_PATH/$FILE_NAME` (must exist)
 10 | - Template: `$CTX_PRD_TEMPLATE`
 11 | - Output: `$CTX_PRD_PATH/$FILE_NAME`
 12 | 
 13 | ## Business-to-Product Translation Process
 14 | 
 15 | 1. **Load Business Context**
 16 |    - Read specified BRD file for business foundation
 17 |    - Extract business objectives, user personas, and success metrics
 18 |    - Understand market context and competitive positioning
 19 |    - Note business constraints and risk mitigation needs
 20 | 
 21 | 2. **Product Vision Development**
 22 |    - Translate business objectives into product vision
 23 |    - Define how product serves target user personas
 24 |    - Establish product success metrics that ladder to business KPIs
 25 |    - Align product strategy with business value proposition
 26 | 
 27 | 3. **Feature Identification**
 28 |    - Break down product vision into specific features
 29 |    - Prioritize features based on business objectives and user impact
 30 |    - Define feature dependencies and implementation sequence
 31 |    - Map features to business value and user needs
 32 | 
 33 | ## PRD Generation
 34 | 
 35 | Use `$CTX_PRD_TEMPLATE` as base template, populated with BRD-derived content.
 36 | 
 37 | ### BRD-to-PRD Translation
 38 | 
 39 | **Business Objectives → Product Vision**
 40 | - Transform business goals into product strategy
 41 | - Define how product creates business value
 42 | - Establish product positioning and differentiation
 43 | 
 44 | **User Personas → User Stories**
 45 | - Convert BRD user personas into detailed user stories
 46 | - Define specific user journeys and use cases
 47 | - Create acceptance criteria for user needs
 48 | 
 49 | **Business Constraints → Product Requirements**
 50 | - Translate business constraints into product limitations
 51 | - Define non-functional requirements from business needs
 52 | - Establish technical requirements that serve business objectives
 53 | 
 54 | **Success Metrics → Product KPIs**
 55 | - Map business KPIs to product-specific metrics
 56 | - Define measurable product success criteria
 57 | - Establish feedback loops for continuous improvement
 58 | 
 59 | ### Feature Specification Process
 60 | 
 61 | 1. **Feature Decomposition**
 62 |    - Break product vision into discrete features
 63 |    - Define feature scope and boundaries
 64 |    - Establish feature priorities based on business impact
 65 | 
 66 | 2. **User Story Creation**
 67 |    - Convert user needs into actionable user stories
 68 |    - Define acceptance criteria for each story
 69 |    - Map stories to business value and user personas
 70 | 
 71 | 3. **Success Metrics Definition**
 72 |    - Define how each feature's success will be measured
 73 |    - Establish usage, quality, and satisfaction metrics
 74 |    - Connect feature metrics to overall product and business success
 75 | 
 76 | ## Planning and Execution
 77 | 
 78 | **Before writing the PRD:**
 79 | 
 80 | 1. Create TodoWrite plan for BRD analysis and PRD creation
 81 | 2. Validate business-to-product translation approach
 82 | 3. Structure PRD for clear handoff to FRP generation
 83 | 
 84 | ## Quality Checklist
 85 | 
 86 | **BRD-PRD Translation:**
 87 | 
 88 | - [ ] Product vision clearly derived from business objectives
 89 | - [ ] User personas from BRD translated into specific user stories
 90 | - [ ] Business constraints reflected in product requirements
 91 | - [ ] Success metrics ladder up to business KPIs
 92 | - [ ] Feature list addresses all business objectives
 93 | - [ ] Product strategy aligns with market context from BRD
 94 | 
 95 | ## PRD Validation Checklist
 96 | 
 97 | **Before handoff to FRP generation:**
 98 | 
 99 | - [ ] All features have clear user stories and acceptance criteria
100 | - [ ] Feature priorities align with business objectives
101 | - [ ] Product success metrics are measurable and time-bound
102 | - [ ] User journey flows are complete and logical
103 | - [ ] Technical requirements support business constraints
104 | - [ ] Feature dependencies are clearly identified
105 | - [ ] Implementation strategy serves business timeline
106 | - [ ] Risk mitigation addresses both business and product concerns
107 | 
108 | ## Feature-Specific FRP Preparation
109 | 
110 | **PRD should enable multiple FRP generation:**
111 | 
112 | - Each feature in PRD becomes a separate FRP
113 | - Features include sufficient context for independent implementation
114 | - Feature dependencies are clearly documented for FRP sequencing
115 | - Success criteria for each feature enable independent validation
116 | 
117 | ## Success Metrics
118 | 
119 | - Product vision clearly serves business objectives from BRD
120 | - User stories directly address user personas and business needs
121 | - Feature specifications enable independent technical implementation
122 | - Success metrics provide clear validation criteria for each feature
123 | - Implementation strategy respects business constraints and timeline


--------------------------------------------------------------------------------
/.claude/settings.json:
--------------------------------------------------------------------------------
 1 | {
 2 |   "env": {
 3 |     "CLAUDE_CODE_ENABLE_TELEMETRY": "0",
 4 |     "DISABLE_TELEMETRY": "1"
 5 |   },
 6 |   "statusLine": {
 7 |     "enabled": true,
 8 |     "format": "🤖 Claude Code | {cwd} | {branch} | {time}",
 9 |     "showGitBranch": true,
10 |     "showWorkingDirectory": true,
11 |     "showTimestamp": true,
12 |     "updateInterval": 1000,
13 |     "colors": {
14 |       "primary": "#0066cc",
15 |       "secondary": "#666666",
16 |       "success": "#00cc66",
17 |       "warning": "#ff9900",
18 |       "error": "#cc0000"
19 |     }
20 |   },
21 |   "permissions": {
22 |     "allow": [
23 |       "Bash(date:*)",
24 |       "Bash(git:diff*)",
25 |       "Bash(git:log*)",
26 |       "Bash(git:status*)",
27 |       "Bash(git log --grep:*)",
28 |       "Bash(make:*)",
29 |       "Bash(mkdir:*)",
30 |       "Bash(source:*)",
31 |       "Bash(touch:*)",
32 |       "Bash(tree:*)",
33 |       "Bash(uv sync:*)",
34 |       "Bash(uv run mypy:*)",
35 |       "Bash(uv run pytest:*)",
36 |       "Bash(uv run ruff:*)",
37 |       "Edit(AGENTS.md)",
38 |       "Edit(CHANGELOG.md)",
39 |       "Edit(docs/**/*.md)",
40 |       "Edit(Makefile)",
41 |       "Edit(README.md)",
42 |       "Edit(src/**/*.py)",
43 |       "Edit(src/**/*.json)",
44 |       "Edit(tests/**/*.py)",
45 |       "Edit(tests/**/*.json)",
46 |       "Edit(pyproject.toml)",
47 |       "Read(**/*)",
48 |       "WebFetch(domain:github.com/DavidAnson/markdownlint/blob/main/doc/Rules.md)",
49 |       "WebFetch(domain:docs.anthropic.com)"
50 |     ],
51 |     "deny": [
52 |       "Bash(cat:*)",
53 |       "Bash(cp:*)",
54 |       "Bash(find:*)",
55 |       "Bash(git add:*)",
56 |       "Bash(git commit:*)",
57 |       "Bash(git push:*)",
58 |       "Bash(grep:*)",
59 |       "Bash(head:*)",
60 |       "Bash(ls:*)",
61 |       "Bash(mv:*)",
62 |       "Bash(rg:*)",
63 |       "Bash(rm:*)",
64 |       "Bash(tail:*)",
65 |       "Edit(.claude/settings*.json)",
66 |       "Edit(.claude/commands/*.md)",
67 |       "Edit(context/**/*.md)",
68 |       "Edit(CLAUDE.md)"
69 |     ]
70 |   }
71 | }


--------------------------------------------------------------------------------
/.cline/config.json:
--------------------------------------------------------------------------------
 1 | {
 2 |   "project": {
 3 |     "name": "context-engineering-template",
 4 |     "description": "See AGENTS.md for details",
 5 |     "type": "python",
 6 |     "root": "."
 7 |   },
 8 |   "rules": [
 9 |     {
10 |       "name": "Core Agent Instructions",
11 |       "description": "Follow AGENTS.md for all agent behavior, decision framework, and coding conventions.",
12 |       "severity": "error"
13 |     },
14 |     {
15 |       "name": "Path Resolution",
16 |       "description": "All path variables are defined in context/config/paths.md; read once and cache.",
17 |       "severity": "error"
18 |     }
19 |   ],
20 |   "important_files": [
21 |     "AGENTS.md",
22 |     "context/config/paths.md",
23 |     "pyproject.toml",
24 |     "src/app/app.py"
25 |   ],
26 |   "ignore_patterns": [
27 |     "*.pyc",
28 |     "__pycache__/",
29 |     ".pytest_cache/",
30 |     ".ruff_cache/",
31 |     ".git/",
32 |     "logs/",
33 |     "*.png",
34 |     "*.pdf"
35 |   ],
36 |   "context_files": [
37 |     "AGENTS.md",
38 |     "context/config/paths.md"
39 |   ]
40 | }
41 | 


--------------------------------------------------------------------------------
/.devcontainer/devcontainer.json:
--------------------------------------------------------------------------------
 1 | {
 2 |   "name": "make setup_dev",
 3 |   "image": "mcr.microsoft.com/vscode/devcontainers/python:3.13",
 4 |   "features": {
 5 |     "ghcr.io/devcontainers/features/node:1": {
 6 |         "version": "latest"
 7 |     },
 8 |     "ghcr.io/devcontainers/features/docker-in-docker:1": {
 9 |         "version": "latest",
10 |         "moby": true
11 |     }
12 |   },
13 |   "postCreateCommand": "make setup_dev"
14 | }


--------------------------------------------------------------------------------
/.env.example:
--------------------------------------------------------------------------------
 1 | ANTHROPIC_API_KEY="sk-abc-xyz"
 2 | GEMINI_API_KEY="xyz"
 3 | CEREBRAS_API_KEY="csk-xyz"
 4 | GITHUB_API_KEY="ghp_xyz"
 5 | GROK_API_KEY="xai-xyz"
 6 | HUGGINGFACE_API_KEY="hf_xyz"
 7 | OPENROUTER_API_KEY="sk-or-v1-xyz"
 8 | PERPLEXITY_API_KEY=""
 9 | RESTACK_API_KEY="xyz"
10 | TOGETHER_API_KEY="xyz"


--------------------------------------------------------------------------------
/.gemini/settings.json:
--------------------------------------------------------------------------------
 1 | {
 2 |   "agent_name": "Gemini-CLI-Agent",
 3 |   "version": "1.0.1",
 4 |   "description": "An interactive CLI agent specializing in software engineering tasks, designed for safety and efficiency within a user's development environment.",
 5 |   "generated_at": "2025-07-27T20:20:00Z",
 6 |   "contextFileName": "AGENTS.md",
 7 |   "excludeTools": [
 8 |     "ShellTool(rm -rf)",
 9 |     "ShellTool(git commit)",
10 |     "ShellTool(git push)"
11 |   ],
12 |   "telemetry": {
13 |     "enabled": false,
14 |     "target": "gcp",
15 |     "logPrompts": false
16 |   },
17 |   "hideBanner": true,
18 |   "sandbox": false
19 | }


--------------------------------------------------------------------------------
/.github/dependabot.yaml:
--------------------------------------------------------------------------------
 1 | ---
 2 | # https://docs.github.com/github/administering-a-repository/configuration-options-for-dependency-updates
 3 | version: 2
 4 | updates:
 5 |   - package-ecosystem: "pip"
 6 |     directory: "/"
 7 |     schedule:
 8 |       interval: "weekly"
 9 | ...
10 | 


--------------------------------------------------------------------------------
/.github/scripts/create_pr.sh:
--------------------------------------------------------------------------------
 1 | #!/bin/bash
 2 | # 1 base ref, 2 target ref, 3 title suffix
 3 | # 4 current version, 5 bumped
 4 | 
 5 | pr_title="PR $2 $3"
 6 | pr_body="PR automatically created from \`$1\` to bump from \`$4\` to \`$5\` on \`$2\`. Tag \`v$5\` will be created and has to be deleted manually if PR gets closed without merge."
 7 | 
 8 | gh pr create \
 9 |   --base $1 \
10 |   --head $2 \
11 |   --title "${pr_title}" \
12 |   --body "${pr_body}"
13 |   # --label "bump"
14 | 


--------------------------------------------------------------------------------
/.github/scripts/delete_branch_pr_tag.sh:
--------------------------------------------------------------------------------
 1 | #!/bin/bash
 2 | # 1 repo, 2 target ref, 3 current version
 3 | 
 4 | tag_to_delete="v$3"
 5 | branch_del_api_call="repos/$1/git/refs/heads/$2"
 6 | del_msg="'$2' force deletion attempted."
 7 | close_msg="Closing PR '$2' to rollback after failure"
 8 | 
 9 | echo "Tag $tag_to_delete for $del_msg"
10 | git tag -d "$tag_to_delete"
11 | echo "PR for $del_msg"
12 | gh pr close "$2" --comment "$close_msg"
13 | echo "Branch $del_msg"
14 | gh api "$branch_del_api_call" -X DELETE && \
15 |   echo "Branch without error return deleted."


--------------------------------------------------------------------------------
/.github/workflows/bump-my-version.yaml:
--------------------------------------------------------------------------------
  1 | name: bump-my-version
  2 | 
  3 | on:
  4 |   # pull_request:
  5 |   #  types: [closed]
  6 |   #  branches: [main]
  7 |   workflow_dispatch:
  8 |     inputs:
  9 |       bump_type:
 10 |         description: '[major|minor|patch]'
 11 |         required: true
 12 |         default: 'patch'
 13 |         type: choice
 14 |         options:
 15 |         - 'major'
 16 |         - 'minor'
 17 |         - 'patch'
 18 | 
 19 | env:
 20 |   BRANCH_NEW: "bump-${{ github.run_number }}-${{ github.ref_name }}"
 21 |   SKIP_PR_HINT: "[skip ci bump]"
 22 |   SCRIPT_PATH: ".github/scripts"
 23 | 
 24 | jobs:
 25 |   bump_my_version:
 26 |     # TODO bug? currently resulting in: Unrecognized named-value: 'env'.
 27 |     # https://stackoverflow.com/questions/61238849/github-actions-if-contains-function-not-working-with-env-variable/61240761
 28 |     # if: !contains(
 29 |     #      github.event.pull_request.title,
 30 |     #      ${{ env.SKIP_PR_HINT }}
 31 |     #    )
 32 |     # TODO check for PR closed by bot to avoid PR creation loop
 33 |     # github.actor != 'github-actions'
 34 |     if: >
 35 |         github.event_name == 'workflow_dispatch' ||
 36 |         ( github.event.pull_request.merged == true &&
 37 |         github.event.pull_request.closed_by != 'github-actions' )
 38 |     runs-on: ubuntu-latest
 39 |     outputs:
 40 |       branch_new: ${{ steps.create_branch.outputs.branch_new }}
 41 |       summary_data: ${{ steps.set_summary.outputs.summary_data }}
 42 |     permissions:
 43 |       actions: read
 44 |       checks: write
 45 |       contents: write
 46 |       pull-requests: write
 47 |     steps:
 48 | 
 49 |       - name: Checkout repo
 50 |         uses: actions/checkout@v4
 51 |         with:
 52 |           fetch-depth: 1
 53 | 
 54 |       - name: Set git cfg and create branch
 55 |         id: create_branch
 56 |         run: |
 57 |           git config user.email "github-actions@users.noreply.github.com"
 58 |           git config user.name "github-actions[bot]"
 59 |           git checkout -b "${{ env.BRANCH_NEW }}"
 60 |           echo "branch_new=${{ env.BRANCH_NEW }}" >> $GITHUB_OUTPUT
 61 | 
 62 |       - name: Bump version
 63 |         id: bump
 64 |         uses: callowayproject/bump-my-version@0.29.0
 65 |         env:
 66 |           BUMPVERSION_TAG: "true"
 67 |         with:
 68 |           args: ${{ inputs.bump_type }}
 69 |           branch: ${{ env.BRANCH_NEW }}
 70 | 
 71 |       - name: "Create PR '${{ env.BRANCH_NEW }}'"
 72 |         if: steps.bump.outputs.bumped == 'true'
 73 |         env:
 74 |           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
 75 |         run: |
 76 |           src="${{ env.SCRIPT_PATH }}/create_pr.sh"
 77 |           chmod +x "$src"
 78 |           $src "${{ github.ref_name }}" "${{ env.BRANCH_NEW }}" "${{ env.SKIP_PR_HINT }}" "${{ steps.bump.outputs.previous-version }}" "${{ steps.bump.outputs.current-version }}"
 79 | 
 80 |       - name: Delete branch, PR and tag in case of failure or cancel
 81 |         if: failure() || cancelled()
 82 |         env:
 83 |           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
 84 |         run: |
 85 |           src="${{ env.SCRIPT_PATH }}/delete_branch_pr_tag.sh"
 86 |           chmod +x "$src"
 87 |           $src "${{ github.repository }}" "${{ env.BRANCH_NEW }}" "${{ steps.bump.outputs.current-version }}"
 88 | 
 89 |       - name: Set summary data
 90 |         id: set_summary
 91 |         if: ${{ always() }}
 92 |         run: echo "summary_data=${GITHUB_STEP_SUMMARY}" >> $GITHUB_OUTPUT
 93 |   
 94 |   generate_summary:
 95 |     name: Generate Summary Report 
 96 |     if: ${{ always() }}
 97 |     needs: bump_my_version
 98 |     uses: ./.github/workflows/summarize-jobs-reusable.yaml
 99 |     with:
100 |       branch_to_summarize: ${{ needs.bump_my_version.outputs.branch_new }}
101 |       summary_data: ${{ needs.bump_my_version.outputs.summary_data }}
102 | 


--------------------------------------------------------------------------------
/.github/workflows/codeql.yaml:
--------------------------------------------------------------------------------
 1 | ---
 2 | # https://github.blog/changelog/2023-01-18-code-scanning-codeql-action-v1-is-now-deprecated/
 3 | name: "CodeQL"
 4 | 
 5 | on:
 6 |   push:
 7 |   pull_request:
 8 |     types: [closed]
 9 |     branches: [ main ]
10 |   schedule:
11 |     - cron: '27 11 * * 0'
12 |   workflow_dispatch:
13 | 
14 | jobs:
15 |   analyze:
16 |     name: Analyze
17 |     runs-on: ubuntu-latest
18 |     permissions:
19 |       actions: read
20 |       contents: read
21 |       security-events: write
22 | 
23 |     steps:
24 |     - name: Checkout repository
25 |       uses: actions/checkout@v4
26 | 
27 |     - name: Initialize CodeQL
28 |       uses: github/codeql-action/init@v3
29 |       with:
30 |         languages: python
31 | 
32 |     - name: Autobuild
33 |       uses: github/codeql-action/autobuild@v3
34 |     # if autobuild fails
35 |     #- run: |
36 |     #   make bootstrap
37 |     #   make release
38 | 
39 |     - name: Perform CodeQL Analysis
40 |       uses: github/codeql-action/analyze@v3
41 |     #- name: sarif
42 |     #  uses: github/codeql-action/upload-sarif@v2
43 | ...
44 | 


--------------------------------------------------------------------------------
/.github/workflows/generate-deploy-mkdocs-ghpages.yaml:
--------------------------------------------------------------------------------
  1 | ---
  2 | name: Deploy Docs
  3 | 
  4 | on:
  5 |   pull_request:
  6 |     types: [closed]
  7 |     branches: [main]
  8 |   workflow_dispatch:
  9 | 
 10 | env:
 11 |   DOCSTRINGS_FILE: "docstrings.md"
 12 |   DOC_DIR: "docs"
 13 |   SRC_DIR: "src"
 14 |   SITE_DIR: "site"
 15 |   IMG_DIR: "assets/images"
 16 | 
 17 | jobs:
 18 |   build-and-deploy:
 19 |     runs-on: ubuntu-latest
 20 |     permissions:
 21 |       contents: read
 22 |       pages: write
 23 |       id-token: write
 24 |     environment:
 25 |       name: github-pages
 26 |     steps:
 27 | 
 28 |     - name: Checkout the repository
 29 |       uses: actions/checkout@v4.0.0
 30 |       with:
 31 |         ref:
 32 |           ${{
 33 |             github.event.pull_request.merged == true &&
 34 |             'main' ||
 35 |             github.ref_name
 36 |           }}
 37 |         fetch-depth: 0
 38 | 
 39 |     - uses: actions/configure-pages@v5.0.0
 40 | 
 41 |     # caching instead of actions/cache@v4.0.0
 42 |     # https://docs.astral.sh/uv/guides/integration/github/#caching
 43 |     - name: Install uv with cache dependency glob
 44 |       uses: astral-sh/setup-uv@v5.0.0
 45 |       with:
 46 |         enable-cache: true
 47 |         cache-dependency-glob: "uv.lock"
 48 | 
 49 |     # setup python from pyproject.toml using uv
 50 |     # instead of using actions/setup-python@v5.0.0
 51 |     # https://docs.astral.sh/uv/guides/integration/github/#setting-up-python
 52 |     - name: "Set up Python"
 53 |       run: uv python install
 54 | 
 55 |     - name: Install only doc deps
 56 |       run: uv sync --only-group docs # --frozen
 57 | 
 58 |     - name: Get repo info and stream into mkdocs.yaml
 59 |       id: repo_info
 60 |       run: |
 61 |         REPO_INFO=$(curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
 62 |           -H "Accept: application/vnd.github.v3+json" \
 63 |           https://api.github.com/repos/${{ github.repository }})
 64 |         REPO_URL="${{ github.server_url }}/${{ github.repository }}"
 65 |         REPO_URL=$(echo ${REPO_URL} | sed 's|/|\\/|g')
 66 |         SITE_NAME=$(sed '1!d' README.md | sed '0,/# /{s/# //}')
 67 |         SITE_DESC=$(echo $REPO_INFO | jq -r .description)
 68 |         sed -i "s/<gha_sed_repo_url_here>/${REPO_URL}/g" mkdocs.yaml
 69 |         sed -i "s/<gha_sed_site_name_here>/${SITE_NAME}/g" mkdocs.yaml
 70 |         sed -i "s/<gha_sed_site_description_here>/${SITE_DESC}/g" mkdocs.yaml
 71 | 
 72 |     - name: Copy text files to be included
 73 |       run: |
 74 |         CFG_PATH="src/app/config"
 75 |         mkdir -p "${DOC_DIR}/${CFG_PATH}"
 76 |         cp README.md "${DOC_DIR}/index.md"
 77 |         cp CHANGELOG.md LICENSE "${DOC_DIR}"
 78 |         # Auxiliary files
 79 |         cp .env.example "${DOC_DIR}"
 80 | 
 81 |     - name: Generate code docstrings concat file
 82 |       run: |
 83 |         PREFIX="::: "
 84 |         find "${SRC_DIR}" -type f -name "*.py" \
 85 |           -type f -not -name "__*__*" -printf "%P\n" | \
 86 |           sed 's/\//./g' | sed 's/\.py$//' | \
 87 |           sed "s/^/${PREFIX}/" | sort > \
 88 |           "${DOC_DIR}/${DOCSTRINGS_FILE}"
 89 | 
 90 |     - name: Build documentation
 91 |       run: uv run --locked --only-group docs mkdocs build
 92 | 
 93 |     - name: Copy image files to be included
 94 |       run: |
 95 |         # copy images, mkdocs does not by default
 96 |         # mkdocs also overwrites pre-made directories
 97 |         dir="${{ env.SITE_DIR }}/${{ env.IMG_DIR }}"
 98 |         if [ -d "${{ env.IMG_DIR }}" ]; then
 99 |           mkdir -p "${dir}"
100 |           cp "${{ env.IMG_DIR }}"/* "${dir}"
101 |         fi
102 | 
103 | #    - name: Push to gh-pages
104 | #      run: uv run mkdocs gh-deploy --force
105 | 
106 |     - name: Upload artifact
107 |       uses: actions/upload-pages-artifact@v3.0.0
108 |       with:
109 |         path: "${{ env.SITE_DIR }}"
110 | 
111 |     - name: Deploy to GitHub Pages
112 |       id: deployment
113 |       uses: actions/deploy-pages@v4.0.0
114 | ...
115 | 


--------------------------------------------------------------------------------
/.github/workflows/links-fail-fast.yaml:
--------------------------------------------------------------------------------
 1 | ---
 2 | # https://github.com/lycheeverse/lychee-action
 3 | # https://github.com/marketplace/actions/lychee-broken-link-checker
 4 | name: "Link Checker"
 5 | 
 6 | on:
 7 |   workflow_dispatch:
 8 |   push:
 9 |     branches-ignore: [main]
10 |   pull_request:
11 |     types: [closed]
12 |     branches: [main]
13 |   schedule:
14 |     - cron: "00 00 * * 0"
15 | 
16 | jobs:
17 |   linkChecker:
18 |     runs-on: ubuntu-latest
19 |     permissions:
20 |       issues: write
21 | 
22 |     steps:
23 |       - uses: actions/checkout@v4
24 | 
25 |       - name: Link Checker
26 |         id: lychee
27 |         uses: lycheeverse/lychee-action@v2
28 | 
29 |       - name: Create Issue From File
30 |         if: steps.lychee.outputs.exit_code != 0
31 |         uses: peter-evans/create-issue-from-file@v5
32 |         with:
33 |           title: lychee Link Checker Report
34 |           content-filepath: ./lychee/out.md
35 |           labels: report, automated issue
36 | ...
37 | 


--------------------------------------------------------------------------------
/.github/workflows/pytest.yaml:
--------------------------------------------------------------------------------
 1 | name: pytest
 2 | 
 3 | on:
 4 |   workflow_dispatch:
 5 | 
 6 | jobs:
 7 |   test:
 8 |     runs-on: ubuntu-latest
 9 |     steps:
10 |       - name: Checkout repository
11 |         uses: actions/checkout@v4
12 | 
13 |       - name: Set up Python
14 |         uses: actions/setup-python@v4
15 |         with:
16 |           python-version: '3.12'
17 | 
18 |       - name: Install dependencies
19 |         run: |
20 |           python -m pip install --upgrade pip
21 |           pip install pytest
22 | 
23 |       - name: Run tests
24 |         run: pytest
25 | 


--------------------------------------------------------------------------------
/.github/workflows/ruff.yaml:
--------------------------------------------------------------------------------
 1 | ---
 2 | # https://github.com/astral-sh/ruff-action
 3 | # https://github.com/astral-sh/ruff
 4 | name: ruff
 5 | on: 
 6 |   push:
 7 |   pull_request:
 8 |     types: [closed]
 9 |     branches: [main]
10 |   schedule:
11 |     - cron: "0 0 * * 0"
12 |   workflow_dispatch:
13 | jobs:
14 |   ruff:
15 |     runs-on: ubuntu-latest
16 |     steps:
17 |       - uses: actions/checkout@v4
18 |       - uses: astral-sh/ruff-action@v3
19 | ...
20 | 


--------------------------------------------------------------------------------
/.github/workflows/summarize-jobs-reusable.yaml:
--------------------------------------------------------------------------------
  1 | ---
  2 | # https://ecanarys.com/supercharging-github-actions-with-job-summaries-and-pull-request-comments/
  3 | # FIXME currently bug in gha summaries ? $GITHUB_STEP_SUMMARY files are empty
  4 | # https://github.com/orgs/community/discussions/110283
  5 | # https://github.com/orgs/community/discussions/67991
  6 | # Possible workaround
  7 | # echo ${{ fromJSON(step).name }}" >> $GITHUB_STEP_SUMMARY
  8 | # echo ${{ fromJSON(step).outcome }}" >> $GITHUB_STEP_SUMMARY
  9 | # echo ${{ fromJSON(step).conclusion }}"
 10 | 
 11 | name: Summarize workflow jobs
 12 | 
 13 | on:
 14 |   workflow_call:
 15 |     outputs:
 16 |       summary:
 17 |         description: "Outputs summaries of jobs in a workflow"
 18 |         value: ${{ jobs.generate_summary.outputs.summary }}
 19 |     inputs:
 20 |       branch_to_summarize:
 21 |         required: false
 22 |         default: 'main'
 23 |         type: string
 24 |       summary_data:
 25 |         required: false
 26 |         type: string
 27 | 
 28 | jobs:
 29 |   generate_summary:
 30 |     name: Generate Summary
 31 |     runs-on: ubuntu-latest
 32 |     permissions:
 33 |       contents: read
 34 |       actions: read
 35 |       checks: read
 36 |       pull-requests: none
 37 |     outputs:
 38 |       summary: ${{ steps.add_changed_files.outputs.summary }}
 39 |     steps:
 40 | 
 41 |       - name: Add general information
 42 |         id: general_info
 43 |         run: |
 44 |           echo "# Job Summaries" >> $GITHUB_STEP_SUMMARY
 45 |           echo "Job: `${{ github.job }}`" >> $GITHUB_STEP_SUMMARY
 46 |           echo "Date: $(date +'%Y-%m-%d %H:%M:%S')" >> $GITHUB_STEP_SUMMARY
 47 | 
 48 |       - name: Add step states
 49 |         id: step_states
 50 |         run: |
 51 |           echo "### Steps:" >> $GITHUB_STEP_SUMMARY
 52 |           # loop summary_data if valid json
 53 |           if jq -e . >/dev/null 2>&1 <<< "${{ inputs.summary_data }}"; then
 54 |             jq -r '
 55 |               .steps[]
 56 |               | select(.conclusion != null)
 57 |               | "- **\(.name)**: \(
 58 |                 if .conclusion == "success" then ":white_check_mark:"
 59 |                 elif .conclusion == "failure" then ":x:"
 60 |                 else ":warning:" end
 61 |               )"
 62 |             ' <<< "${{ inputs.summary_data }}" >> $GITHUB_STEP_SUMMARY
 63 |           else
 64 |             echo "Invalid JSON in summary data." >> $GITHUB_STEP_SUMMARY
 65 |           fi
 66 | 
 67 |       - name: Checkout repo
 68 |         uses: actions/checkout@v4
 69 |         with:
 70 |           ref: "${{ inputs.branch_to_summarize }}"
 71 |           fetch-depth: 0
 72 | 
 73 |       - name: Add changed files since last push
 74 |         id: add_changed_files
 75 |         run: |
 76 |           # Get the tags
 77 |           # Use disabled lines to get last two commits
 78 |           # current=$(git show -s --format=%ci HEAD)
 79 |           # previous=$(git show -s --format=%ci HEAD~1)
 80 |           # git diff --name-only HEAD^ HEAD >> $GITHUB_STEP_SUMMARY
 81 |           version_tag_regex="^v[0-9]+\.[0-9]+\.[0-9]+$" # v0.0.0 
 82 |           tags=$(git tag --sort=-version:refname | \
 83 |             grep -E "${version_tag_regex}" || echo "")
 84 | 
 85 |           # Get latest and previous tags
 86 |           latest_tag=$(echo "${tags}" | head -n 1)
 87 |           previous_tag=$(echo "${tags}" | head -n 2 | tail -n 1)
 88 | 
 89 |           echo "tags: latest '${latest_tag}', previous '${previous_tag}'"
 90 | 
 91 |           # Write to summary
 92 |           error_msg="No files to output. Tag not found:"
 93 |           echo ${{ steps.step_states.outputs.summary }} >> $GITHUB_STEP_SUMMARY
 94 |           echo "## Changed files on '${{ inputs.branch_to_summarize }}'" >> $GITHUB_STEP_SUMMARY
 95 | 
 96 |           if [ -z "${latest_tag}" ]; then
 97 |             echo "${error_msg} latest" >> $GITHUB_STEP_SUMMARY
 98 |           elif [ -z "${previous_tag}" ]; then
 99 |             echo "${error_msg} previous" >> $GITHUB_STEP_SUMMARY
100 |           elif [ "${latest_tag}" == "${previous_tag}" ]; then
101 |             echo "Latest and previous tags are the same: '${latest_tag}'" >> $GITHUB_STEP_SUMMARY
102 |           else
103 |             # Get commit dates and hashes
104 |             latest_date=$(git log -1 --format=%ci $latest_tag)
105 |             previous_date=$(git log -1 --format=%ci $previous_tag)
106 |             current_hash=$(git rev-parse --short $latest_tag)
107 |             previous_hash=$(git rev-parse --short $previous_tag)
108 | 
109 |             # Append summary to the job summary
110 |             echo "Latest Tag Commit: '${latest_tag}' (${current_hash}) ${latest_date}" >> $GITHUB_STEP_SUMMARY
111 |             echo "Previous Tag Commit: '${previous_tag}' (${previous_hash}) ${previous_date}" >> $GITHUB_STEP_SUMMARY
112 |             echo "Files changed:" >> $GITHUB_STEP_SUMMARY
113 |             echo '```' >> $GITHUB_STEP_SUMMARY
114 |             git diff --name-only $previous_tag..$latest_tag >> $GITHUB_STEP_SUMMARY
115 |             echo '```' >> $GITHUB_STEP_SUMMARY
116 |           fi
117 | 
118 |       - name: Output error message in case of failure or cancel
119 |         if: failure() || cancelled()
120 |         run: |
121 |           if [ "${{ job.status }}" == "cancelled" ]; then
122 |             out_msg="## Workflow was cancelled"
123 |           else
124 |             out_msg="## Error in previous step"
125 |           fi
126 |           echo $out_msg >> $GITHUB_STEP_SUMMARY
127 | ...


--------------------------------------------------------------------------------
/.github/workflows/write-llms-txt.yaml:
--------------------------------------------------------------------------------
 1 | # TODO use local installation of repo to text
 2 | # https://github.com/itsitgroup/repo2txt
 3 | name: Write repo llms.txt
 4 | 
 5 | on:
 6 |   push:
 7 |     branches: [main]
 8 |   workflow_dispatch:
 9 |     inputs:
10 |       LLMS_TXT_PATH:
11 |         description: 'Path to the directory to save llsm.txt'
12 |         required: true
13 |         default: 'docs'
14 |         type: string
15 |       LLMS_TXT_NAME:
16 |         description: 'Path to the directory to save llsm.txt'
17 |         required: true
18 |         default: 'llms.txt'
19 |         type: string
20 |       CONVERTER_URL:
21 |         description: '[uithub|gittodoc]'  # |repo2txt
22 |         required: true
23 |         default: 'uithub.com'
24 |         type: choice
25 |         options:
26 |         - 'uithub.com'
27 |         - 'gittodoc.com'
28 |         # - 'repo2txt.com'
29 | 
30 | jobs:
31 |   generate-file:
32 |     runs-on: ubuntu-latest
33 | 
34 |     steps:
35 |       - name: Checkout repo
36 |         uses: actions/checkout@v4
37 | 
38 |       - name: Construct and create llms.txt path
39 |         id: construct_and_create_llms_txt_path
40 |         run: |
41 |           LLMS_TXT_PATH="${{ inputs.LLMS_TXT_PATH }}"
42 |           LLMS_TXT_PATH="${LLMS_TXT_PATH:-docs}"
43 |           LLMS_TXT_NAME="${{ inputs.LLMS_TXT_NAME }}"
44 |           LLMS_TXT_NAME="${LLMS_TXT_NAME:-llms.txt}"
45 |           echo "LLMS_TXT_FULL=${LLMS_TXT_PATH}/${LLMS_TXT_NAME}" >> $GITHUB_OUTPUT
46 |           mkdir -p "${LLMS_TXT_PATH}"
47 | 
48 |       - name: Fetch TXT from URL
49 |         run: |
50 |           LLMS_TXT_FULL=${{ steps.construct_and_create_llms_txt_path.outputs.LLMS_TXT_FULL }}
51 |           URL="https://${{ inputs.CONVERTER_URL }}/${{ github.repository }}"
52 |           echo "Fetching content from: ${URL}"
53 |           echo "Saving content to: ${LLMS_TXT_FULL}"
54 |           curl -s "${URL}" > "${LLMS_TXT_FULL}"
55 | 
56 |       - name: Commit and push file
57 |         run: |
58 |           LLMS_TXT_FULL=${{ steps.construct_and_create_llms_txt_path.outputs.LLMS_TXT_FULL }}
59 |           commit_msg="feat(docs): Add/Update ${LLMS_TXT_FULL}, a flattened repo as single text file, inspired by [llmstxt.org](https://llmstxt.org/)."
60 |           git config user.name "github-actions"
61 |           git config user.email "github-actions@github.com"
62 |           git add "${LLMS_TXT_FULL}"
63 |           git commit -m "${commit_msg}"
64 |           git push
65 | 


--------------------------------------------------------------------------------
/.gitignore:
--------------------------------------------------------------------------------
 1 | # Python bytecode
 2 | __pycache__/
 3 | *.py[cod]
 4 | 
 5 | # environment
 6 | .venv/
 7 | *.env
 8 | 
 9 | # Distribution / packaging
10 | build/
11 | dist/
12 | *.egg-info/
13 | 
14 | # Testing
15 | .pytest_cache/
16 | .coverage
17 | .hypothesis
18 | 
19 | # Logs
20 | *.log
21 | /logs
22 | 
23 | # OS generated files
24 | .DS_Store
25 | Thumbs.db
26 | 
27 | # IDE specific files (adjust as needed)
28 | # .vscode/
29 | # .idea/
30 | 
31 | # mkdocs
32 | reference/
33 | site/
34 | 
35 | # linting
36 | .ruff_cache
37 | 
38 | # type checking
39 | .mypy_cache/
40 | 


--------------------------------------------------------------------------------
/.gitmessage:
--------------------------------------------------------------------------------
 1 | #<--- 72 characters --------------------------------------------------->
 2 | #
 3 | # Conventional Commits, semantic commit messages for humans and machines
 4 | # https://www.conventionalcommits.org/en/v1.0.0/
 5 | # Lint your conventional commits
 6 | # https://github.com/conventional-changelog/commitlint/tree/master/%40 \
 7 | #	commitlint/config-conventional
 8 | # Common types can be (based on Angular convention)
 9 | # build, chore, ci, docs, feat, fix, perf, refactor, revert, style, test
10 | # https://github.com/conventional-changelog/commitlint/tree/master/%40
11 | # Footer
12 | # https://git-scm.com/docs/git-interpret-trailers
13 | #
14 | #<--- pattern --------------------------------------------------------->
15 | #
16 | # <feat|fix|build|chore|ci|docs|style|refactor|perf|test>[(Scope)][!]: \
17 | #	<description>
18 | # short description: <type>[(<scope>)]: <subject>
19 | #
20 | # ! after scope in header indicates breaking change
21 | #
22 | # [optional body]
23 | #
24 | # - with bullets points
25 | #
26 | # [optional footer(s)]
27 | #
28 | # [BREAKING CHANGE:, Refs:, Resolves:, Addresses:, Reviewed by:]
29 | #
30 | #<--- usage ----------------------------------------------------------->
31 | #
32 | # Set locally (in the repository)
33 | # `git config commit.template .gitmessage`
34 | #
35 | # Set globally
36 | # `git config --global commit.template .gitmessage`
37 | #
38 | #<--- 72 characters --------------------------------------------------->


--------------------------------------------------------------------------------
/.vscode/extensions.json:
--------------------------------------------------------------------------------
 1 | {
 2 |     "recommendations": [
 3 |         "anthropic.claude-code",
 4 |         "saoudrizwan.claude-dev",
 5 | 
 6 |         "charliermarsh.ruff",
 7 |         "davidanson.vscode-markdownlint",
 8 |         "donjayamanne.githistory",
 9 |         "editorconfig.editorconfig",
10 |         "gruntfuggly.todo-tree",
11 |         "mhutchie.git-graph",
12 |         "redhat.vscode-yaml",
13 |         "tamasfe.even-better-toml",
14 |         "yzhang.markdown-all-in-one",
15 | 
16 |         "github.copilot",
17 |         "github.copilot-chat",
18 |         "github.vscode-github-actions",
19 |         "ms-azuretools.vscode-docker",
20 |         "ms-azuretools.vscode-containers",
21 |         "ms-python.debugpy",
22 |         "ms-python.python",
23 |         "ms-python.vscode-pylance",
24 |         "ms-vscode.makefile-tools",
25 |     ]
26 | }


--------------------------------------------------------------------------------
/.vscode/settings.json:
--------------------------------------------------------------------------------
 1 | {
 2 |     "editor.lineNumbers": "on",
 3 |     "editor.wordWrap": "on",
 4 |     "explorer.confirmDelete": true,
 5 |     "files.autoSave": "onFocusChange",
 6 |     "git.autofetch": true,
 7 |     "git.enableSmartCommit": true,
 8 |     "makefile.configureOnOpen": false,
 9 |     "markdownlint.config": {
10 |         "MD024": false,
11 |         "MD033": false
12 |     },
13 |     "python.analysis.extraPaths": ["./venv/lib/python3.13/site-packages"],
14 |     "python.defaultInterpreterPath": "./.venv/bin/python",
15 |     "python.analysis.typeCheckingMode": "strict",
16 |     "python.analysis.diagnosticSeverityOverrides": {
17 |         "reportMissingTypeStubs": "none",
18 |         "reportUnknownMemberType": "none",
19 |         "reportUnknownVariableType": "none"
20 |     },
21 |     "redhat.telemetry.enabled": false
22 | }


--------------------------------------------------------------------------------
/CHANGELOG.md:
--------------------------------------------------------------------------------
 1 | # Changelog
 2 | 
 3 | All notable changes to this project will be documented in this file.
 4 | 
 5 | The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.1.0/),
 6 | and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).
 7 | 
 8 | ## Guiding Principles
 9 | 
10 | - Changelogs are for humans, not machines.
11 | - There should be an entry for every single version.
12 | - The same types of changes should be grouped.
13 | - Versions and sections should be linkable.
14 | - The latest version comes first.
15 | - The release date of each version is displayed.
16 | - Mention whether you follow Semantic Versioning.
17 | 
18 | ## Types of changes
19 | 
20 | - `Added` for new features.
21 | - `Changed` for changes in existing functionality.
22 | - `Deprecated` for soon-to-be removed features.
23 | - `Removed` for now removed features.
24 | - `Fixed` for any bug fixes.
25 | - `Security` in case of vulnerabilities.
26 | 
27 | ## [Unreleased]
28 | 
29 | ### Added
30 | 
31 | - Complete BRD → PRD → FRP workflow for business-driven development
32 | - Business input document templates with multiple input approaches
33 | - Product Requirements Document (PRD) generation from BRD
34 | - Feature-specific FRP generation from PRD with business context traceability
35 | - Make targets for new workflow commands (brd_gen_claude, prd_gen_claude, frp_gen_claude)
36 | - Comprehensive business input template with stakeholder, market, and risk analysis
37 | - Multiple BRD input methods: business input document, interactive session, partial completion
38 | - Example AI assistant business input and BRD demonstrating complete workflow
39 | - Enhanced sequence diagrams showing both new and legacy workflows with input options
40 | - docs/usage-guide.md - Detailed workflow instructions and configuration
41 | - docs/examples.md - Complete examples, best practices, and troubleshooting  
42 | - context/business_inputs/ directory for initial business information
43 | - context/BRDs/ directory for business requirements definitions
44 | - context/PRDs/ directory for product requirements documents
45 | - CABIO vision documents: vision, product roadmap, and implementation guide
46 | - Prominent product state and vision summary in README.md
47 | - Complete PlantUML architecture diagram suite with GitHub theme support
48 | - Workflow visualizations showing current → enhanced → enterprise evolution
49 | - docs/architecture/ directory with comprehensive PlantUML source files
50 | - Architecture documentation (README.md) with local and online rendering instructions
51 | 
52 | ### Changed
53 | 
54 | - Restructured README.md for clarity with workflow visualizations using GitHub theme-aware diagrams
55 | - Updated paths.md with new BRD, PRD, and business input paths
56 | - Enhanced execute-frp command to reference PRD and BRD context for full traceability
57 | - Legacy Makefile recipes renamed for clarity (frp_gen_legacy_claude, frp_exe_legacy_claude)
58 | - Comprehensive documentation consistency fixes across all files
59 | - Aligned product positioning: template system (current) → enhanced templates (8-12 weeks) → CABIO (12+ months)
60 | - Clarified target market focus on small teams (5-25 people) with enterprise scaling path
61 | - Resolved timeline contradictions and technical architecture inconsistencies
62 | 
63 | ## [0.0.1] - 2025-07-07
64 | 
65 | ### Added
66 | 
67 | - Initial template containing templates for PRP
68 | 


--------------------------------------------------------------------------------
/CLAUDE.md:
--------------------------------------------------------------------------------
1 | # Redirected to [AGENTS.md](AGENTS.md) for project documentation
2 | 
3 | @AGENTS.md
4 | 


--------------------------------------------------------------------------------
/Dockerfile:
--------------------------------------------------------------------------------
 1 | # --- Build Stage ---
 2 | FROM python:3.13-slim-bookworm AS builder
 3 | WORKDIR /app
 4 | 
 5 | COPY pyproject.toml uv.lock ./
 6 | COPY src ./src
 7 | 
 8 | RUN pip install uv -q
 9 | RUN uv sync --frozen
10 | 
11 | # --- Run Stage ---
12 | FROM python:3.13-slim-bookworm AS runner
13 | WORKDIR /app
14 | ENV PYTHONPATH=/app/src
15 | 
16 | COPY --from=builder /app/.venv ./.venv
17 | COPY --from=builder /app/src ./src
18 | COPY pyproject.toml uv.lock ./
19 | 
20 | ENV PATH="/app/.venv/bin:$PATH"
21 | # TODO add entry point
22 | # CMD ["python", "-m", "src.main", "server"]
23 | 


--------------------------------------------------------------------------------
/GEMINI.md:
--------------------------------------------------------------------------------
1 | # Redirected to [AGENTS.md](AGENTS.md) for project documentation
2 | 
3 | @AGENTS.md
4 | 


--------------------------------------------------------------------------------
/assets/images/Business-Driven-Development-CABIO-Enterprise-Concise-dark.png:
--------------------------------------------------------------------------------
https://raw.githubusercontent.com/qte77/context-engineering-template/3a4083177213652723eb99487804e4ff6eaa97a0/assets/images/Business-Driven-Development-CABIO-Enterprise-Concise-dark.png


--------------------------------------------------------------------------------
/assets/images/Business-Driven-Development-CABIO-Enterprise-Concise-light.png:
--------------------------------------------------------------------------------
https://raw.githubusercontent.com/qte77/context-engineering-template/3a4083177213652723eb99487804e4ff6eaa97a0/assets/images/Business-Driven-Development-CABIO-Enterprise-Concise-light.png


--------------------------------------------------------------------------------
/assets/images/Business-Driven-Development-CABIO-Enterprise-Phase-dark.png:
--------------------------------------------------------------------------------
https://raw.githubusercontent.com/qte77/context-engineering-template/3a4083177213652723eb99487804e4ff6eaa97a0/assets/images/Business-Driven-Development-CABIO-Enterprise-Phase-dark.png


--------------------------------------------------------------------------------
/assets/images/Business-Driven-Development-CABIO-Enterprise-Phase-light.png:
--------------------------------------------------------------------------------
https://raw.githubusercontent.com/qte77/context-engineering-template/3a4083177213652723eb99487804e4ff6eaa97a0/assets/images/Business-Driven-Development-CABIO-Enterprise-Phase-light.png


--------------------------------------------------------------------------------
/assets/images/Business-Driven-Development-CABIO-SMB-Concise-dark.png:
--------------------------------------------------------------------------------
https://raw.githubusercontent.com/qte77/context-engineering-template/3a4083177213652723eb99487804e4ff6eaa97a0/assets/images/Business-Driven-Development-CABIO-SMB-Concise-dark.png


--------------------------------------------------------------------------------
/assets/images/Business-Driven-Development-CABIO-SMB-Concise-light.png:
--------------------------------------------------------------------------------
https://raw.githubusercontent.com/qte77/context-engineering-template/3a4083177213652723eb99487804e4ff6eaa97a0/assets/images/Business-Driven-Development-CABIO-SMB-Concise-light.png


--------------------------------------------------------------------------------
/assets/images/Business-Driven-Development-CABIO-SMB-Phase-dark.png:
--------------------------------------------------------------------------------
https://raw.githubusercontent.com/qte77/context-engineering-template/3a4083177213652723eb99487804e4ff6eaa97a0/assets/images/Business-Driven-Development-CABIO-SMB-Phase-dark.png


--------------------------------------------------------------------------------
/assets/images/Business-Driven-Development-CABIO-SMB-Phase-light.png:
--------------------------------------------------------------------------------
https://raw.githubusercontent.com/qte77/context-engineering-template/3a4083177213652723eb99487804e4ff6eaa97a0/assets/images/Business-Driven-Development-CABIO-SMB-Phase-light.png


--------------------------------------------------------------------------------
/assets/images/Business-Driven-Development-Current-Concise-dark.png:
--------------------------------------------------------------------------------
https://raw.githubusercontent.com/qte77/context-engineering-template/3a4083177213652723eb99487804e4ff6eaa97a0/assets/images/Business-Driven-Development-Current-Concise-dark.png


--------------------------------------------------------------------------------
/assets/images/Business-Driven-Development-Current-Concise-light.png:
--------------------------------------------------------------------------------
https://raw.githubusercontent.com/qte77/context-engineering-template/3a4083177213652723eb99487804e4ff6eaa97a0/assets/images/Business-Driven-Development-Current-Concise-light.png


--------------------------------------------------------------------------------
/assets/images/Business-Driven-Development-Current-Dark-dark.png:
--------------------------------------------------------------------------------
https://raw.githubusercontent.com/qte77/context-engineering-template/3a4083177213652723eb99487804e4ff6eaa97a0/assets/images/Business-Driven-Development-Current-Dark-dark.png


--------------------------------------------------------------------------------
/assets/images/Business-Driven-Development-Current-Dark-light.png:
--------------------------------------------------------------------------------
https://raw.githubusercontent.com/qte77/context-engineering-template/3a4083177213652723eb99487804e4ff6eaa97a0/assets/images/Business-Driven-Development-Current-Dark-light.png


--------------------------------------------------------------------------------
/assets/images/example_execute_feature_mcp_server_PRP_update_pyproject.PNG:
--------------------------------------------------------------------------------
https://raw.githubusercontent.com/qte77/context-engineering-template/3a4083177213652723eb99487804e4ff6eaa97a0/assets/images/example_execute_feature_mcp_server_PRP_update_pyproject.PNG


--------------------------------------------------------------------------------
/assets/images/example_execute_feature_mcp_server_PRP_update_pyproject_diff.PNG:
--------------------------------------------------------------------------------
https://raw.githubusercontent.com/qte77/context-engineering-template/3a4083177213652723eb99487804e4ff6eaa97a0/assets/images/example_execute_feature_mcp_server_PRP_update_pyproject_diff.PNG


--------------------------------------------------------------------------------
/assets/images/example_execute_feature_mcp_server_created.PNG:
--------------------------------------------------------------------------------
https://raw.githubusercontent.com/qte77/context-engineering-template/3a4083177213652723eb99487804e4ff6eaa97a0/assets/images/example_execute_feature_mcp_server_created.PNG


--------------------------------------------------------------------------------
/assets/images/example_generate_feature_mcp_server_PRP.PNG:
--------------------------------------------------------------------------------
https://raw.githubusercontent.com/qte77/context-engineering-template/3a4083177213652723eb99487804e4ff6eaa97a0/assets/images/example_generate_feature_mcp_server_PRP.PNG


--------------------------------------------------------------------------------
/assets/images/sequence_diagram_legacy_workflow_custom_commands.png:
--------------------------------------------------------------------------------
https://raw.githubusercontent.com/qte77/context-engineering-template/3a4083177213652723eb99487804e4ff6eaa97a0/assets/images/sequence_diagram_legacy_workflow_custom_commands.png


--------------------------------------------------------------------------------
/context/business_inputs/example_ai_assistant.md:
--------------------------------------------------------------------------------
 1 | # Business Input Document - AI-Powered Personal Assistant
 2 | 
 3 | This template helps stakeholders provide initial business information that will be expanded into a comprehensive Business Requirements Definition (BRD).
 4 | 
 5 | Use the paths defined in `context/config/paths.md`
 6 | 
 7 | ## Business Problem Statement
 8 | 
 9 | Small business owners and entrepreneurs are overwhelmed by managing multiple daily tasks across different tools and platforms. They spend too much time on administrative work instead of focusing on growing their business. Current solutions are either too complex for small teams or don't integrate well together, leading to decreased productivity and missed opportunities.
10 | 
11 | ## Business Objectives
12 | 
13 | Primary business goals for this AI assistant product:
14 | 
15 | - **Objective 1**: Increase user productivity by 40% through intelligent task automation and prioritization
16 | - **Objective 2**: Generate $500K Annual Recurring Revenue within 12 months via freemium subscription model
17 | - **Objective 3**: Achieve 85% user retention rate by providing highly personalized, context-aware assistance
18 | 
19 | ## Target Users & Market
20 | 
21 | Targeting the underserved small business segment with AI-powered productivity solutions.
22 | 
23 | ### Primary Users
24 | 
25 | - **User Type**: Small business owners managing 1-10 employees
26 | - **Pain Points**: Context switching between tools, manual task prioritization, time-consuming administrative work
27 | - **Needs**: Simple interface with powerful automation, natural language interaction, seamless integrations
28 | 
29 | ### Market Context
30 | 
31 | - **Market Size**: $12B task management market with 15% annual growth
32 | - **Competitors**: Notion (too complex), Todoist (lacks AI), Zapier (requires technical knowledge)
33 | - **Differentiation**: Natural language interaction combined with business-context awareness and zero-setup integrations
34 | 
35 | ## Success Metrics
36 | 
37 | Business success measurements:
38 | 
39 | - **Primary Metric**: 10,000 Monthly Active Users within 6 months
40 | - **Secondary Metrics**: 15+ minute average session duration, 60%+ feature adoption rate, $50/month average revenue per user
41 | - **Timeline**: Initial metrics by Q2 2025, full targets by Q4 2025
42 | 
43 | ## Business Constraints
44 | 
45 | Key limitations and requirements:
46 | 
47 | ### Resource Constraints
48 | 
49 | - **Budget**: $200K development budget over 6 months
50 | - **Team**: 3-person development team plus 1 designer
51 | - **Timeline**: MVP launch required by Q2 2025 for conference season marketing
52 | 
53 | ### Technical Constraints
54 | 
55 | - **Existing Systems**: Must integrate with Google Workspace and Microsoft 365
56 | - **Technology Preferences**: Cloud-native, API-first architecture for future integrations
57 | - **Performance Requirements**: Sub-2 second response times, 99.9% uptime
58 | 
59 | ### Business Constraints
60 | 
61 | - **Regulatory**: GDPR compliance required for European market expansion
62 | - **Organizational**: Freemium model with clear upgrade path to paid tiers
63 | - **Market**: Launch timing critical for Q2 conference season
64 | 
65 | ## Additional Context
66 | 
67 | Strategic considerations and business context:
68 | 
69 | ### Assumptions
70 | 
71 | - Users prefer natural language over complex UI interactions
72 | - Small businesses willing to pay premium for truly intelligent automation
73 | - Voice/chat interface will differentiate from existing visual-heavy tools
74 | 
75 | ### Risks
76 | 
77 | - AI accuracy critical for user trust - errors could cause user churn
78 | - Established competitors (Microsoft, Google) could quickly copy features
79 | - Integration complexity with third-party services could delay launch
80 | 
81 | ### Opportunities
82 | 
83 | - Success could enable expansion into business intelligence and analytics
84 | - Strong user base could attract partnership opportunities with other SMB tools
85 | - Data insights could enable AI model improvements and new feature development
86 | 
87 | ## Stakeholder Information
88 | 
89 | Key stakeholders for this initiative:
90 | 
91 | - **Business Owner**: Sarah Chen - CEO, final product vision and budget approval
92 | - **Primary Users**: Small business owners, entrepreneurs, freelancers with administrative overhead
93 | - **Technical Team**: Engineering team responsible for AI integration and platform development
94 | - **Decision Makers**: Sarah Chen (CEO), Alex Rodriguez (Product Manager), Morgan Kim (Technical Lead)
95 | 
96 | ---
97 | 
98 | **Next Steps**: This document will be processed by `/generate-brd` to create a comprehensive Business Requirements Definition (BRD) with full market analysis, risk assessment, and implementation strategy.
99 | 


--------------------------------------------------------------------------------
/context/config/paths.md:
--------------------------------------------------------------------------------
 1 | # Default paths
 2 | 
 3 | Note: Update this file according to project needs.
 4 | 
 5 | ## App
 6 | 
 7 | - `APP_PATH = src`: The core application logic. This is where most of your work will be.
 8 | - `TEST_PATH = tests/`: Contains all tests for the project.
 9 | 
10 | ### Important files
11 | 
12 | - `${APP_PATH}/main.py`: The main entry point for the CLI application.
13 | 
14 | ## Context
15 | 
16 | - `CONTEXT_PATH = context`: Contains auxiliary context for coding agents.
17 | - `CTX_CONFIG_PATH = ${CONTEXT_PATH}/config`
18 | - `CTX_EXAMPLES_PATH = ${CONTEXT_PATH}/examples`
19 | - `CTX_FEATURES_PATH = ${CONTEXT_PATH}/features`
20 | - `CTX_LOGS_PATH = ${CONTEXT_PATH}/logs`
21 | - `CTX_BUSINESS_INPUTS_PATH = ${CONTEXT_PATH}/business_inputs`: Contains initial business input documents for BRD generation.
22 | - `CTX_BRD_PATH = ${CONTEXT_PATH}/BRDs`: Contains the business requirements definition files.
23 | - `CTX_PRD_PATH = ${CONTEXT_PATH}/PRDs`: Contains the product requirements document files.
24 | - `CTX_FRP_PATH = ${CONTEXT_PATH}/FRPs`: Contains the generated feature requirements prompt files.
25 | - `CTX_TEMPLATES_PATH = ${CONTEXT_PATH}/templates`
26 | 
27 | ## Project
28 | 
29 | - `DOCS_PATH = docs`: Contains auxiliary files for project documentation, like the Product Requirements Document (`PRD.md`) and architecture model visualizations.
30 | 
31 | ### Important files
32 | 
33 | - `CTX_BUSINESS_INPUT_TEMPLATE = ${CTX_TEMPLATES_PATH}/business_input_base.md`: Template for initial business information input.
34 | - `CTX_BRD_TEMPLATE = ${CTX_TEMPLATES_PATH}/brd_base.md`: Template for creating business requirements definitions.
35 | - `CTX_PRD_TEMPLATE = ${CTX_TEMPLATES_PATH}/prd_base.md`: Template for creating product requirements documents.
36 | - `CTX_FRP_TEMPLATE = ${CTX_TEMPLATES_PATH}/frp_base.md`: Template for creating feature requirements prompts.
37 | - `CHANGELOG_PATH = CHANGELOG.md`: Contains the most important changes made in each version of the project.
38 | - `LLMSTXT_PATH = ${DOCS_PATH}/llms.txt`: Contains the flattened project, i.e., the structure and content of the project in one text file to be ingested by LLMs. Might not reflect the current project state depending on update strategy.
39 | - `PRD_PATH = ${DOCS_PATH}/PRD.md`: Contains the product requirements definitions for this project.
40 | - `PROJECT_REQUIREMENTS = pyproject.toml`: Defines meta data like package name, dependencies and tool settings.
41 | 


--------------------------------------------------------------------------------
/context/templates/brd_base.md:
--------------------------------------------------------------------------------
  1 | # Business Requirements Definition (BRD) Template
  2 | 
  3 | This template captures business context and objectives that drive technical feature development. Use this as input for generating Feature Requirements Prompts (FRPs).
  4 | 
  5 | Use the paths defined in `context/config/paths.md`
  6 | 
  7 | ## Business Overview
  8 | 
  9 | ### Problem Statement
 10 | 
 11 | [What business problem are we solving? Include pain points, market gaps, or opportunities]
 12 | 
 13 | ### Business Objectives
 14 | 
 15 | [Primary business goals this feature should achieve]
 16 | 
 17 | - **Objective 1**: [Specific, measurable business outcome]
 18 | - **Objective 2**: [Another key business goal]
 19 | - **Objective 3**: [Additional objective if applicable]
 20 | 
 21 | ### Success Metrics & KPIs
 22 | 
 23 | [How will we measure business success?]
 24 | 
 25 | - **Primary KPI**: [Main success metric with target values]
 26 | - **Secondary KPIs**: [Additional metrics to track]
 27 | - **Time Frame**: [When should these metrics be achieved]
 28 | 
 29 | ## Market Context
 30 | 
 31 | ### Target Users & Personas
 32 | 
 33 | [Who will use this feature?]
 34 | 
 35 | - **Primary User**: [Main user type, their needs, pain points]
 36 | - **Secondary Users**: [Other user types who might benefit]
 37 | - **Use Cases**: [Specific scenarios where this feature adds value]
 38 | 
 39 | ### Competitive Landscape
 40 | 
 41 | [How do competitors address this need?]
 42 | 
 43 | - **Competitor Analysis**: [What existing solutions are available]
 44 | - **Differentiation**: [How our approach will be different/better]
 45 | - **Market Opportunity**: [Size and potential of this market segment]
 46 | 
 47 | ### Business Value Proposition
 48 | 
 49 | [Why is this valuable from a business perspective?]
 50 | 
 51 | - **Revenue Impact**: [Direct/indirect revenue effects]
 52 | - **Cost Reduction**: [Operational efficiencies gained]
 53 | - **Strategic Value**: [Long-term competitive advantages]
 54 | - **Risk Mitigation**: [Business risks this addresses]
 55 | 
 56 | ## Constraints & Requirements
 57 | 
 58 | ### Business Constraints
 59 | 
 60 | [Business limitations that affect implementation]
 61 | 
 62 | - **Budget**: [Financial limitations or targets]
 63 | - **Timeline**: [Business deadlines, market timing]
 64 | - **Resource**: [Team, skill, or operational constraints]
 65 | - **Regulatory**: [Compliance, legal, or policy requirements]
 66 | - **Integration**: [Must work with existing business processes]
 67 | 
 68 | ### Stakeholder Requirements
 69 | 
 70 | [What different stakeholders need from this feature]
 71 | 
 72 | - **End Users**: [User experience requirements]
 73 | - **Business Users**: [Administrative, reporting, or operational needs]
 74 | - **Technical Teams**: [Integration, maintenance, or support requirements]
 75 | - **Management**: [Reporting, monitoring, or control needs]
 76 | 
 77 | ### Risk Assessment
 78 | 
 79 | [Business risks and mitigation strategies]
 80 | 
 81 | - **High Risk**: [Critical risks that could impact business objectives]
 82 | - **Medium Risk**: [Important risks to monitor and manage]
 83 | - **Mitigation**: [Strategies to address identified risks]
 84 | 
 85 | ## Success Criteria
 86 | 
 87 | ### Must-Have Requirements
 88 | 
 89 | [Essential business requirements that define minimum viable success]
 90 | 
 91 | - [ ] [Critical business requirement 1]
 92 | - [ ] [Critical business requirement 2]
 93 | - [ ] [Critical business requirement 3]
 94 | 
 95 | ### Should-Have Requirements
 96 | 
 97 | [Important but not critical for initial success]
 98 | 
 99 | - [ ] [Important requirement 1]
100 | - [ ] [Important requirement 2]
101 | 
102 | ### Could-Have Requirements
103 | 
104 | [Nice-to-have features for future iterations]
105 | 
106 | - [ ] [Future enhancement 1]
107 | - [ ] [Future enhancement 2]
108 | 
109 | ## Implementation Context
110 | 
111 | ### Business Process Integration
112 | 
113 | [How this feature fits into existing business processes]
114 | 
115 | - **Current Process**: [How things work today]
116 | - **Future Process**: [How this feature changes the process]
117 | - **Change Management**: [What business changes are needed]
118 | 
119 | ### Dependencies & Prerequisites
120 | 
121 | [Business dependencies that must be resolved]
122 | 
123 | - **Business Dependencies**: [Process, policy, or organizational changes needed]
124 | - **External Dependencies**: [Partner, vendor, or customer requirements]
125 | - **Technical Dependencies**: [Technical prerequisites from business perspective]
126 | 
127 | ### Success Validation Plan
128 | 
129 | [How we'll validate business success]
130 | 
131 | - **Testing Approach**: [Business validation methods]
132 | - **User Acceptance**: [How we'll confirm user satisfaction]
133 | - **Success Measurement**: [When and how we'll measure KPIs]
134 | - **Review Schedule**: [When to evaluate business success]
135 | 
136 | ## Future Considerations
137 | 
138 | ### Scalability Requirements
139 | 
140 | [Business growth considerations]
141 | 
142 | - **User Growth**: [Expected user base expansion]
143 | - **Usage Growth**: [Expected usage pattern changes]
144 | - **Feature Evolution**: [How this feature might evolve]
145 | 
146 | ### Long-term Business Impact
147 | 
148 | [Strategic considerations beyond immediate implementation]
149 | 
150 | - **Platform Strategy**: [How this fits into broader platform vision]
151 | - **Market Expansion**: [Opportunities this enables]
152 | - **Innovation Pipeline**: [Future features this enables]
153 | 
154 | ## Approval & Sign-off
155 | 
156 | ### Stakeholder Review
157 | 
158 | - [ ] **Business Owner**: [Name] - Approved business requirements
159 | - [ ] **Product Manager**: [Name] - Confirmed product alignment
160 | - [ ] **Technical Lead**: [Name] - Reviewed feasibility
161 | - [ ] **Project Manager**: [Name] - Confirmed timeline and resources
162 | 
163 | ### Document Control
164 | 
165 | - **Version**: [Version number]
166 | - **Created**: [Date]
167 | - **Last Updated**: [Date]
168 | - **Next Review**: [Scheduled review date]
169 | 


--------------------------------------------------------------------------------
/context/templates/business_input_base.md:
--------------------------------------------------------------------------------
 1 | # Business Input Document Template
 2 | 
 3 | This template helps stakeholders provide initial business information that will be expanded into a comprehensive Business Requirements Definition (BRD).
 4 | 
 5 | Use the paths defined in `context/config/paths.md`
 6 | 
 7 | ## Business Problem Statement
 8 | 
 9 | [What business problem or opportunity are you addressing? What pain points exist in the current situation?]
10 | 
11 | ## Business Objectives
12 | 
13 | [What are your primary business goals? What do you want to achieve?]
14 | 
15 | - **Objective 1**: [Specific business goal with measurable outcome]
16 | - **Objective 2**: [Another key business objective]
17 | - **Objective 3**: [Additional objective if applicable]
18 | 
19 | ## Target Users & Market
20 | 
21 | [Who are your target users? What market are you addressing?]
22 | 
23 | ### Primary Users
24 | 
25 | - **User Type**: [Description of main user group]
26 | - **Pain Points**: [Their current challenges]
27 | - **Needs**: [What they need from a solution]
28 | 
29 | ### Market Context
30 | 
31 | - **Market Size**: [If known, market size or opportunity]
32 | - **Competitors**: [Key competitors or alternatives]
33 | - **Differentiation**: [How your solution will be different]
34 | 
35 | ## Success Metrics
36 | 
37 | [How will you measure business success?]
38 | 
39 | - **Primary Metric**: [Main KPI you'll track]
40 | - **Secondary Metrics**: [Other important measurements]
41 | - **Timeline**: [When you expect to achieve these metrics]
42 | 
43 | ## Business Constraints
44 | 
45 | [What limitations or requirements must be considered?]
46 | 
47 | ### Resource Constraints
48 | 
49 | - **Budget**: [Financial constraints or targets]
50 | - **Team**: [Team size and skill constraints]
51 | - **Timeline**: [Key deadlines or time limitations]
52 | 
53 | ### Technical Constraints
54 | 
55 | - **Existing Systems**: [Systems that must integrate with]
56 | - **Technology Preferences**: [Required or preferred technologies]
57 | - **Performance Requirements**: [Speed, scale, or reliability needs]
58 | 
59 | ### Business Constraints
60 | 
61 | - **Regulatory**: [Legal or compliance requirements]
62 | - **Organizational**: [Company policies or procedures]
63 | - **Market**: [Market timing or competitive pressures]
64 | 
65 | ## Additional Context
66 | 
67 | [Any other relevant business information, assumptions, or considerations]
68 | 
69 | ### Assumptions
70 | 
71 | - [Key assumptions about users, market, or technology]
72 | 
73 | ### Risks
74 | 
75 | - [Known business risks or concerns]
76 | 
77 | ### Opportunities
78 | 
79 | - [Future opportunities this could enable]
80 | 
81 | ## Stakeholder Information
82 | 
83 | [Who are the key stakeholders for this initiative?]
84 | 
85 | - **Business Owner**: [Name and role]
86 | - **Primary Users**: [Who will actually use the solution]
87 | - **Technical Team**: [Who will build and maintain it]
88 | - **Decision Makers**: [Who has final approval authority]
89 | 
90 | ---
91 | 
92 | **Next Steps**: Once completed, this document will be processed by `/generate-brd` to create a comprehensive Business Requirements Definition (BRD).
93 | 


--------------------------------------------------------------------------------
/context/templates/feature_base.md:
--------------------------------------------------------------------------------
 1 | # Feature description for: [ Initial template for new features ]
 2 | 
 3 | Use the paths defined in `context/config/paths.md`
 4 | 
 5 | ## FEATURE
 6 | 
 7 | [Insert your feature here]
 8 | 
 9 | ## EXAMPLES
10 | 
11 | [Provide and explain examples that you have in the `$CTX_EXAMPLES_PATH` folder]
12 | 
13 | ## DOCUMENTATION
14 | 
15 | [List out any documentation (web pages, sources for an MCP server like Crawl4AI RAG, etc.) that will need to be referenced during development]
16 | 
17 | ## OTHER CONSIDERATIONS
18 | 
19 | [Any other considerations or specific requirements - great place to include gotchas that you see AI coding assistants miss with your projects a lot]
20 | 


--------------------------------------------------------------------------------
/docs/CABIO-vision.md:
--------------------------------------------------------------------------------
 1 | # CABIO Vision
 2 | 
 3 | Why Context-Aware Business Intelligence Orchestration matters
 4 | 
 5 | ## The Problem We've Experienced
 6 | 
 7 | **Small teams lack structured business analysis frameworks.**
 8 | 
 9 | From our own development experience, we've seen how small teams (5-25 people) struggle with business decisions:
10 | 
11 | - No dedicated business analysts or market researchers on team
12 | - Ad-hoc business analysis leads to inconsistent, incomplete frameworks
13 | - Templates exist but require extensive manual refinement and context gathering
14 | - Business requirements disconnect from market realities due to resource constraints
15 | 
16 | **The result?** Small teams make critical product decisions without professional business intelligence frameworks, while larger organizations have dedicated resources for structured analysis.
17 | 
18 | ## Our Vision: The Business Intelligence Companion
19 | 
20 | **Small teams should have access to professional business analysis frameworks.**
21 | 
22 | We envision an evolution from current template system toward intelligent orchestration:
23 | 
24 | **Phase 1 (8-12 weeks)**: Enhanced templates with agent orchestration and context compression
25 | 
26 | - Small teams get better templates with automated handoffs between AI agents
27 | - Context preservation between business analysis phases
28 | - Streamlined workflow requiring less manual refinement
29 | 
30 | **Phase 2 (12+ months)**: Full CABIO business intelligence orchestration
31 | 
32 | - Real market intelligence integration for data-driven decisions
33 | - Enterprise-grade workflows that scale with organizational growth
34 | 
35 | ## Why This Matters Now
36 | 
37 | ### The AI Agent Revolution
38 | 
39 | AI agents are becoming sophisticated enough to handle complex business analysis, but they work in isolation. We need orchestration that makes agents work together intelligently.
40 | 
41 | ### The Context Problem  
42 | 
43 | Traditional tools overwhelm users with information. We believe in **context compression and on-demand routing** - giving decision makers exactly the information they need, when they need it, through smart allocation and need-to-know filtering.
44 | 
45 | ### The Small Team Reality
46 | 
47 | Small teams (5-25 people) typically operate without dedicated business analysts, market researchers, or strategy consultants due to budget and scale constraints. Our current template system provides structure, but enhanced templates with agent orchestration will democratize access to professional business intelligence frameworks.
48 | 
49 | ## Our North Star
50 | 
51 | **Transform business decision-making from ad-hoc to structured.**
52 | 
53 | Instead of making decisions based on incomplete analysis, small teams should have access to professional business intelligence frameworks that scale with their growth.
54 | 
55 | We're evolving from template automation toward a **business intelligence companion** - starting with enhanced templates and agent orchestration, building toward comprehensive context-aware intelligence systems.
56 | 
57 | ## Personal Mission
58 | 
59 | This comes from our own experience building products:
60 | 
61 | - **Frustration** with manual business analysis refinement and context gathering
62 | - **Recognition** that structured frameworks improve product decisions
63 | - **Belief** that enhanced templates with agent orchestration can reduce analysis overhead
64 | - **Vision** that small teams deserve professional business intelligence frameworks
65 | 
66 | CABIO evolves business intelligence from manual template refinement toward intelligent agent orchestration for teams of any size.
67 | 
68 | ---
69 | 
70 | *This vision drives everything we build - from enhanced templates to agent orchestration to user experience.*
71 | 


--------------------------------------------------------------------------------
/docs/architecture/Business-Driven-Development-CABIO-Enterprise-Concise.plantuml:
--------------------------------------------------------------------------------
 1 | @startuml Business-Driven-Development-CABIO-Enterprise-Concise
 2 | title CABIO Enterprise Business Intelligence (12+ months) - Concise
 3 | 
 4 | !log Current 'STYLE' dvar: STYLE
 5 | !log About to include: styles/github-STYLE.puml
 6 | !include styles/github-STYLE.puml
 7 | 
 8 | participant "User" as User
 9 | participant "CABIO Orchestrator" as Orchestrator
10 | participant "Real-time Data" as RealTimeData
11 | participant "Business Agents" as Agents
12 | participant "Memory System" as Memory
13 | participant "Human Oversight" as Oversight
14 | 
15 | == Full CABIO Business Intelligence Orchestration ==
16 | 
17 | User -> Orchestrator: Business objectives
18 | 
19 | par Real-time Intelligence
20 |     Orchestrator -> RealTimeData: **Live market data**\n(APIs, competitive intel)
21 |     Orchestrator -> Agents: **Multi-agent coordination**\nwith cost optimization
22 | end
23 | 
24 | Orchestrator -> Memory: **Intelligent memory**\n95% insight preservation\n60% token reduction
25 | 
26 | par Enterprise Features
27 |     Orchestrator -> Oversight: **High-stakes validation**\nwith human approval
28 |     Orchestrator -> Orchestrator: **>99.5% uptime**\nEnterprise architecture
29 | end
30 | 
31 | Memory -> User: **Enterprise BRD** with real-time intelligence\nCompetitive analysis & strategic alignment
32 | 
33 | == Scaled Business Intelligence ==
34 | 
35 | User -> Orchestrator: Generate PRD with real-time validation
36 | Orchestrator -> Agents: **Data-driven product features**\nwith competitive positioning
37 | Agents -> User: **Validated PRD** with market alignment
38 | 
39 | User -> Orchestrator: Generate FRP with intelligence context
40 | Orchestrator -> Agents: Technical specification\nwith complete context traceability
41 | Agents -> User: **Enterprise FRP** with real-time data
42 | 
43 | == Implementation (Key USP) ==
44 | 
45 | User -> Orchestrator: **Execute enterprise implementation**\n(Multi-team coordination: 100+ people)
46 | Orchestrator -> Agents: **Multi-model routing** (40%+ cost reduction)\n**Implement with full business intelligence**
47 | Agents -> User: **Production-Ready Features**\nwith real-time market validation & enterprise scaling
48 | 
49 | @enduml


--------------------------------------------------------------------------------
/docs/architecture/Business-Driven-Development-CABIO-Enterprise-Phase.plantuml:
--------------------------------------------------------------------------------
 1 | @startuml Business-Driven-Development-CABIO-Enterprise-Phase
 2 | title CABIO Enterprise Business Intelligence Orchestration (12+ months)
 3 | 
 4 | !log Current 'STYLE' dvar: STYLE
 5 | !log About to include: styles/github-STYLE.puml
 6 | !include styles/github-STYLE.puml
 7 | 
 8 | participant "User" as User
 9 | participant "CABIO Orchestrator" as Orchestrator
10 | participant "Real-time Market Data" as MarketData
11 | participant "Competitive Intelligence" as CompIntel
12 | participant "Business Analysis Agent" as BizAgent
13 | participant "Strategy Agent" as StrategyAgent
14 | participant "Technical Agent" as TechAgent
15 | participant "Memory System" as Memory
16 | participant "Human Oversight" as Oversight
17 | participant "Multi-Model Router" as ModelRouter
18 | 
19 | == Full CABIO Business Intelligence Orchestration ==
20 | 
21 | group Real-time Market Intelligence Integration [#161B22]
22 | 
23 |     User -> Orchestrator: Business input with strategic objectives
24 |     Orchestrator -> MarketData: **Live market data** query\n(Google Analytics, Crunchbase APIs)
25 |     MarketData --> Orchestrator: Real-time market metrics
26 |     
27 |     Orchestrator -> CompIntel: **Automated competitor research**\n(Social media APIs, financial data)
28 |     CompIntel --> Orchestrator: Competitive landscape analysis
29 |     
30 |     Orchestrator -> Memory: Store market intelligence\nwith **intelligent decay**
31 |     Memory -> Memory: Preserve 95% critical insights\nReduce token usage by 60%
32 | 
33 | end
34 | 
35 | group Advanced Agent Coordination with Memory [#161B22]
36 | 
37 |     Orchestrator -> ModelRouter: **Cost optimization**\nRoute complex analysis to Claude-3.5-Sonnet
38 |     ModelRouter -> BizAgent: Generate comprehensive business analysis\nwith real-time data integration
39 |     BizAgent -> Memory: Store business insights with context preservation
40 |     
41 |     Memory -> StrategyAgent: **Progressive context building**\nProvide relevant business + market context
42 |     ModelRouter -> StrategyAgent: Route strategy tasks to appropriate model
43 |     StrategyAgent -> StrategyAgent: Generate data-driven strategy\nwith competitive intelligence
44 |     
45 |     StrategyAgent -> Memory: Update strategy framework with market alignment
46 |     Memory -> TechAgent: **Context compression**\nDeliver technical requirements with full business context
47 |     ModelRouter -> TechAgent: Route implementation to GPT-4o-mini for cost efficiency
48 | 
49 | end
50 | 
51 | group Enterprise Quality Gates and Human Oversight [#161B22]
52 | 
53 |     Orchestrator -> Oversight: **High-stakes decision validation**\nBusiness predictions and strategic recommendations
54 |     
55 |     alt Human Approval Required
56 |         Oversight -> User: Present analysis for approval\nwith confidence metrics and assumptions
57 |         User -> Oversight: Approve with modifications
58 |         Oversight -> Memory: Update approved framework
59 |     else Automated Processing
60 |         Orchestrator -> Orchestrator: **Validation checkpoints**\nExtract-Resolve-Enrich pattern
61 |     end
62 |     
63 |     Memory -> User: **Enterprise BRD** with real-time intelligence\nCompetitive analysis and strategic alignment
64 | 
65 | end
66 | 
67 | group Enterprise Architecture and Scalability [#161B22]
68 | 
69 |     User -> Orchestrator: Scale to organizational workflow\n(100+ people, multiple product lines)
70 |     Orchestrator -> Orchestrator: **>99.5% uptime**\nHigh-availability deployment
71 |     
72 |     Orchestrator -> ModelRouter: **Multi-model optimization**\n40%+ cost reduction through intelligent routing
73 |     ModelRouter -> ModelRouter: Claude-3.5-Sonnet for complex analysis\nGPT-4o-mini for template formatting
74 |     
75 |     Orchestrator -> Memory: **Advanced memory management**\nIntelligent retention across organizational projects
76 |     Memory -> User: **Coordinated business intelligence**\nAcross multiple teams and product lines
77 | 
78 | end
79 | 
80 | group Complete Business Intelligence Workflow [#161B22]
81 | 
82 |     User -> Orchestrator: Generate PRD with real-time market validation
83 |     Orchestrator -> TechAgent: **Data-driven product features**\nwith competitive positioning
84 |     TechAgent -> User: **Validated PRD** with market-aligned priorities
85 |     
86 |     User -> Orchestrator: Generate FRP with business intelligence context
87 |     Orchestrator -> TechAgent: **Complete context traceability**\nReal-time data → Strategy → Technical specification
88 |     TechAgent -> User: **Enterprise FRP** ready for scaled implementation
89 | 
90 | end
91 | 
92 | @enduml


--------------------------------------------------------------------------------
/docs/architecture/Business-Driven-Development-CABIO-SMB-Concise.plantuml:
--------------------------------------------------------------------------------
 1 | @startuml Business-Driven-Development-CABIO-SMB-Concise
 2 | title Enhanced Templates with Agent Orchestration (8-12 weeks) - Concise
 3 | 
 4 | !log Current 'STYLE' dvar: STYLE
 5 | !log About to include: styles/github-STYLE.puml
 6 | !include styles/github-STYLE.puml
 7 | 
 8 | participant "User" as User
 9 | participant "Context Router" as Router
10 | participant "Market Agent" as MarketAgent
11 | participant "Strategy Agent" as StrategyAgent
12 | participant "Technical Agent" as TechAgent
13 | 
14 | == Enhanced Templates with Agent Orchestration ==
15 | 
16 | User -> Router: Business input
17 | Router -> Router: **Context Compression**\n& routing
18 | 
19 | par Agent Coordination
20 |     Router -> MarketAgent: Market analysis (20% context)
21 |     Router -> StrategyAgent: Strategy analysis (15% context) 
22 |     Router -> TechAgent: Technical requirements (25% context)
23 | end
24 | 
25 | par Context Preservation
26 |     MarketAgent --> Router: Market insights
27 |     StrategyAgent --> Router: Strategy framework
28 |     TechAgent --> Router: Technical specs
29 | end
30 | 
31 | Router -> User: **Enhanced BRD** with market integration\n**50% less manual editing**
32 | 
33 | == PRD & FRP Generation ==
34 | 
35 | User -> Router: Generate PRD
36 | Router -> TechAgent: Transform BRD to product features\nwith full business context
37 | TechAgent -> User: **Enhanced PRD**\nwith business traceability
38 | 
39 | User -> Router: Generate FRP
40 | Router -> TechAgent: Create technical specification\nwith BRD→PRD context
41 | TechAgent -> User: **Enhanced FRP**\nwith market integration
42 | 
43 | == Implementation (Key USP) ==
44 | 
45 | User -> Router: Execute FRP implementation
46 | Router -> TechAgent: **Implement feature**\nwith full BRD→PRD→FRP context
47 | TechAgent -> User: **Working Feature**\nwith business traceability & market alignment
48 | 
49 | @enduml


--------------------------------------------------------------------------------
/docs/architecture/Business-Driven-Development-CABIO-SMB-Phase.plantuml:
--------------------------------------------------------------------------------
 1 | @startuml Business-Driven-Development-CABIO-SMB-Phase
 2 | title Enhanced Templates with Agent Orchestration (8-12 weeks)
 3 | 
 4 | !log Current 'STYLE' dvar: STYLE
 5 | !log About to include: styles/github-STYLE.puml
 6 | !include styles/github-STYLE.puml
 7 | 
 8 | participant "User" as User
 9 | participant "Context Router" as Router
10 | participant "Market Research Agent" as MarketAgent
11 | participant "Strategy Agent" as StrategyAgent
12 | participant "Technical Agent" as TechAgent
13 | participant "Quality Gate" as Quality
14 | 
15 | == Enhanced Templates with Agent Orchestration ==
16 | 
17 | group Business Input Processing [#161B22]
18 | 
19 |     User -> Router: Upload business_inputs/project.md
20 |     Router -> Router: **Context Compression**\nAnalyze & route relevant sections
21 |     
22 |     alt Comprehensive Business Input
23 |         Router -> MarketAgent: Market analysis sections (20% context)
24 |         Router -> StrategyAgent: Strategy sections (15% context)
25 |         Router -> TechAgent: Technical requirements (25% context)
26 |     else Partial Business Input
27 |         Router -> User: Request missing information via guided prompts
28 |         User -> Router: Provide additional context
29 |         Router -> Router: Re-compress and route
30 |     end
31 | 
32 | end
33 | 
34 | group Agent Orchestration with Context Preservation [#161B22]
35 | 
36 |     MarketAgent -> MarketAgent: Generate market research\nwith competitive analysis
37 |     MarketAgent -> Router: Market insights + preserved context
38 |     
39 |     Router -> StrategyAgent: Market insights + strategy context
40 |     StrategyAgent -> StrategyAgent: Generate go-to-market\nstrategy with market data
41 |     StrategyAgent -> Router: Strategy framework + preserved context
42 |     
43 |     Router -> TechAgent: Business + market + strategy context
44 |     TechAgent -> TechAgent: Generate technical\nrequirements with business alignment
45 |     TechAgent -> Router: Technical specification + full context
46 | 
47 | end
48 | 
49 | group Quality Gates and Streamlined Output [#161B22]
50 | 
51 |     Router -> Quality: Validate context preservation\nand professional output quality
52 |     Quality -> Quality: **50% less manual editing**\nverification checkpoint
53 |     
54 |     alt Quality Check Passed
55 |         Quality -> User: **Enhanced BRD** with market research integration\nand preserved business context
56 |     else Quality Issues Found
57 |         Quality -> Router: Request agent refinement
58 |         Router -> MarketAgent: Refine analysis
59 |         Router -> StrategyAgent: Refine strategy
60 |         Router -> TechAgent: Refine requirements
61 |     end
62 | 
63 | end
64 | 
65 | group PRD and FRP Generation [#161B22]
66 | 
67 |     User -> Router: Generate PRD from enhanced BRD
68 |     Router -> TechAgent: Transform BRD to product features\nwith full business context
69 |     TechAgent -> User: **Enhanced PRD** with feature prioritization\nand business traceability
70 |     
71 |     User -> Router: Generate FRP for specific feature
72 |     Router -> TechAgent: Create technical specification\nwith BRD→PRD→FRP context
73 |     TechAgent -> User: **Enhanced FRP** ready for implementation
74 | 
75 | end
76 | 
77 | @enduml


--------------------------------------------------------------------------------
/docs/architecture/Business-Driven-Development-Current-Concise.plantuml:
--------------------------------------------------------------------------------
 1 | @startuml Business-Driven-Development-Current-Concise
 2 | title Current Business-Driven Development Workflow - Concise
 3 | 
 4 | !log Current 'STYLE' dvar: STYLE
 5 | !log About to include: styles/github-STYLE.puml
 6 | !include styles/github-STYLE.puml
 7 | 
 8 | participant "User" as User
 9 | participant "Claude Code" as Claude
10 | participant "AI Agent" as Agent
11 | 
12 | == Business-Driven Development (Recommended) ==
13 | 
14 | alt Business Input Options
15 |     User -> User: Create business_inputs/project.md
16 | else Interactive Session
17 |     User -> Claude: Interactive BRD generation
18 | else Partial BRD
19 |     User -> User: Partially fill BRDs/project.md
20 | end
21 | 
22 | User -> Claude: make brd_gen_claude
23 | Claude -> Agent: Generate BRD from business input
24 | Agent -> User: **Comprehensive BRD**
25 | 
26 | User -> Claude: make prd_gen_claude
27 | Claude -> Agent: Transform BRD to product features
28 | Agent -> User: **PRD** with feature list
29 | 
30 | User -> Claude: make frp_gen_claude
31 | Claude -> Agent: Create feature-specific technical spec
32 | Agent -> User: **FRP** with business context
33 | 
34 | User -> Claude: make frp_exe_claude
35 | Claude -> Agent: Implement with full context
36 | Agent -> User: **Feature** with business traceability
37 | 
38 | == Direct Feature Development (Legacy) ==
39 | 
40 | User -> User: Create features/feature.md
41 | User -> Claude: make frp_gen_legacy_claude
42 | Claude -> Agent: Generate FRP from feature
43 | Agent -> User: Technical spec (limited context)
44 | 
45 | User -> Claude: make frp_exe_legacy_claude
46 | Claude -> Agent: Quick implementation
47 | Agent -> User: Feature prototype
48 | 
49 | @enduml


--------------------------------------------------------------------------------
/docs/architecture/Business-Driven-Development-Current.plantuml:
--------------------------------------------------------------------------------
 1 | @startuml Business-Driven-Development-Current-Dark
 2 | title Current Business-Driven Development Workflow
 3 | 
 4 | !log Current 'STYLE' dvar: STYLE
 5 | !log About to include: styles/github-STYLE.puml
 6 | !include styles/github-STYLE.puml
 7 | 
 8 | participant "User" as User
 9 | participant "Claude Code" as Claude
10 | participant "AI Agent" as Agent
11 | 
12 | == Business-Driven Development (Recommended) ==
13 | 
14 | group Business Input Options [#161B22]
15 | 
16 |     alt Option A: Business Input Document
17 |         User -> User: Create business_inputs/project.md
18 |         User -> Claude: /generate-brd project.md\nOR make brd_gen_claude "ARGS=project.md"
19 |         Claude -> Agent: Read business input → Expand to BRD
20 |     else Option B: Interactive Session  
21 |         User -> Claude: /generate-brd project.md\nOR make brd_gen_claude "ARGS=project.md"
22 |         Claude -> Agent: Conduct Q&A → Generate BRD
23 |     else Option C: Complete Partial BRD
24 |         User -> User: Partially fill BRDs/project.md
25 |         User -> Claude: /generate-brd project.md\nOR make brd_gen_claude "ARGS=project.md"
26 |         Claude -> Agent: Complete missing sections
27 |     end
28 |     
29 |     Agent --> User: **Comprehensive BRD** with business context
30 | 
31 | end
32 | 
33 | group BRD → PRD → FRP Workflow [#161B22]
34 | 
35 |     User -> Claude: /generate-prd-from-brd project.md\nOR make prd_gen_claude "ARGS=project.md"
36 |     Claude -> Agent: Translate business to product features
37 |     Agent --> User: **PRD** with feature list & user stories
38 |     
39 |     User -> Claude: /generate-frp-from-prd project.md feature_name\nOR make frp_gen_claude "ARGS=project.md feature_name"
40 |     Claude -> Agent: Create feature-specific technical spec
41 |     Agent --> User: **FRP**: project_feature_name.md
42 |     
43 |     User -> Claude: /execute-frp project_feature_name.md\nOR make frp_exe_claude "ARGS=project_feature_name.md"
44 |     Claude -> Agent: Implement with full BRD→PRD→FRP context
45 |     Agent --> User: **Feature** with business traceability
46 | 
47 | end
48 | 
49 | == Direct Feature Development (Legacy) ==
50 | 
51 | group Legacy Workflow [#30363D]
52 | 
53 |     User -> User: Create features/feature.md
54 |     User -> Claude: /generate-frp feature.md\nOR make frp_gen_legacy_claude "ARGS=feature.md"
55 |     Claude -> Agent: Create FRP from feature description
56 |     Agent --> User: Technical spec (limited context)
57 |     
58 |     User -> Claude: /execute-frp feature.md\nOR make frp_exe_legacy_claude "ARGS=feature.md"
59 |     Claude -> Agent: Quick implementation
60 |     Agent --> User: Feature prototype
61 | 
62 | end
63 | 
64 | @enduml


--------------------------------------------------------------------------------
/docs/architecture/README.md:
--------------------------------------------------------------------------------
 1 | # Architecture Documentation
 2 | 
 3 | This directory contains the source files for the Context Engineering Template's architecture diagrams and workflow visualizations.
 4 | 
 5 | ## Purpose
 6 | 
 7 | The diagrams illustrate the evolution of the business-driven development workflow from current template-based system to full CABIO (Context-Aware Business Intelligence Orchestration) implementation:
 8 | 
 9 | - **Current State**: Template-based BRD→PRD→FRP workflow with AI agent support
10 | - **Enhanced Templates (8-12 weeks)**: Agent orchestration with context compression and market integration  
11 | - **Enterprise CABIO (12+ months)**: Real-time business intelligence with enterprise scalability
12 | 
13 | All diagrams prominently feature the **Implementation (Key USP)** section, demonstrating how the system transforms business analysis into working code - the critical differentiator from traditional business intelligence tools.
14 | 
15 | ## Rendering
16 | 
17 | All diagrams are authored in **PlantUML** and designed to render in both light and dark themes using GitHub Primer styles.
18 | 
19 | ### Prerequisites
20 | 
21 | - Docker installation
22 | - One-time setup: `make setup_plantuml`
23 | 
24 | ### Local Rendering
25 | 
26 | #### Interactive Mode
27 | 
28 | ```bash
29 | make run_puml_interactive
30 | ```
31 | 
32 | Starts a PlantUML server at `http://localhost:8080` for interactive diagram editing and rendering.
33 | 
34 | #### Single Diagram Generation
35 | 
36 | ```bash
37 | make run_puml_single INPUT_FILE="docs/architecture/filename.plantuml" STYLE="dark|light" OUTPUT_PATH="assets/images"
38 | ```
39 | 
40 | **Example:**
41 | 
42 | ```bash
43 | make run_puml_single INPUT_FILE="docs/architecture/Business-Driven-Development-Current.plantuml" STYLE="dark" OUTPUT_PATH="assets/images"
44 | ```
45 | 
46 | ### Online Rendering
47 | 
48 | Alternative method using [PlantUML.com](http://www.plantuml.com/plantuml/) web server:
49 | 
50 | 1. **Modify include paths** for online compatibility:
51 | 
52 |    ```plantuml
53 |    !include https://raw.githubusercontent.com/qte77/context-engineering-template/main/docs/architecture/styles/github-dark.puml
54 |    ```
55 | 
56 | 2. **Copy modified PlantUML source** and paste into the web interface
57 | 
58 | 3. **Generate PNG/SVG** directly from the web service
59 | 
60 | ## Styling
61 | 
62 | The diagrams use GitHub Primer themes located in `styles/`:
63 | 
64 | - `github-dark.puml` - Dark theme with GitHub dark mode colors
65 | - `github-light.puml` - Light theme with GitHub light mode colors
66 | 
67 | Themes are automatically applied based on the `STYLE` parameter during rendering.
68 | 
69 | ## Output
70 | 
71 | Rendered diagrams are saved to `assets/images/` with the naming convention:
72 | `{diagram-name}-{theme}.png`
73 | 
74 | ## Contributing
75 | 
76 | When adding new diagrams:
77 | 
78 | 1. Follow the existing naming convention
79 | 2. Include both detailed and concise versions where appropriate
80 | 3. Ensure compatibility with both light and dark themes
81 | 4. Test rendering with both local and online methods
82 | 5. Update this README with new diagram information
83 | 


--------------------------------------------------------------------------------
/docs/architecture/styles/github-dark.puml:
--------------------------------------------------------------------------------
 1 | ' GitHub Dark Theme (Primer)
 2 | ' Sourced from: https://github.com/primer/github-vscode-theme
 3 | <style>
 4 |   document {
 5 |     BackgroundColor #0D1117
 6 |   }
 7 |   root {
 8 |     BackgroundColor #0D1117
 9 |   }
10 |   title {
11 |     FontColor #C9D1D9
12 |   }
13 |   legend {
14 |     BackgroundColor #161B22
15 |     LineColor #8B949E
16 |     FontColor #C9D1D9
17 |   }
18 |   actor, person {
19 |     BackgroundColor #161B22
20 |     LineColor #8B949E
21 |     FontColor #C9D1D9
22 |   }
23 |   participant, system, system_ext {
24 |     BackgroundColor #161B22
25 |     LineColor #8B949E
26 |     FontColor #C9D1D9
27 |   }
28 |   database, container, containerdb {
29 |     BackgroundColor #161B22
30 |     LineColor #8B949E
31 |     FontColor #C9D1D9
32 |   }
33 |   entity {
34 |     BackgroundColor #161B22
35 |     LineColor #8B949E
36 |     FontColor #C9D1D9
37 |   }
38 |   rectangle, system_boundary {
39 |     BackgroundColor #0D1117
40 |     LineColor #30363D
41 |     FontColor #C9D1D9
42 |     shadowing false
43 |   }
44 |   note {
45 |     BackgroundColor #161B22
46 |     LineColor #30363D
47 |     FontColor #C9D1D9
48 |   }
49 |   arrow {
50 |     LineColor #58A6FF
51 |     FontColor #C9D1D9
52 |   }
53 |   lifeLine {
54 |     LineColor #8B949E
55 |   }
56 |   activity {
57 |     BackgroundColor #161B22
58 |     LineColor #8B949E
59 |     FontColor #C9D1D9
60 |     BorderColor #30363D
61 |   }
62 |   diamond {
63 |     BackgroundColor #161B22
64 |     LineColor #8B949E
65 |     FontColor #C9D1D9
66 |   }
67 | </style>
68 | 
69 | skinparam sequence {
70 |     LifeLineBackgroundColor #161B22
71 |     GroupBorderColor #30363D
72 |     GroupFontColor #C9D1D9
73 |     GroupHeaderFontColor #C9D1D9
74 |     GroupBackgroundColor #161B22
75 | }
76 | 
77 | skinparam activity {
78 |     StartColor #3FB950
79 |     StopColor #F85149
80 | }
81 | 
82 | skinparam ConditionEndStyle diamond
83 | skinparam ParticipantPadding 20
84 | skinparam BoxPadding 20


--------------------------------------------------------------------------------
/docs/architecture/styles/github-light.puml:
--------------------------------------------------------------------------------
 1 | ' GitHub Light Theme (Primer)
 2 | ' Sourced from: https://github.com/primer/github-vscode-theme
 3 | <style>
 4 |   document {
 5 |     BackgroundColor #FFFFFF
 6 |   }
 7 |   root {
 8 |     BackgroundColor #FFFFFF
 9 |   }
10 |   title {
11 |     FontColor #24292F
12 |   }
13 |   legend {
14 |     BackgroundColor #F6F8FA
15 |     LineColor #57606A
16 |     FontColor #24292F
17 |   }
18 |   actor, person {
19 |     BackgroundColor #F6F8FA
20 |     LineColor #57606A
21 |     FontColor #24292F
22 |   }
23 |   participant, system, system_ext {
24 |     BackgroundColor #F6F8FA
25 |     LineColor #57606A
26 |     FontColor #24292F
27 |   }
28 |   database, container, containerdb {
29 |     BackgroundColor #F6F8FA
30 |     LineColor #57606A
31 |     FontColor #24292F
32 |   }
33 |   entity {
34 |     BackgroundColor #F6F8FA
35 |     LineColor #57606A
36 |     FontColor #24292F
37 |   }
38 |   rectangle, system_boundary {
39 |     BackgroundColor #FFFFFF
40 |     LineColor #D0D7DE
41 |     FontColor #24292F
42 |     shadowing false
43 |   }
44 |   note {
45 |     BackgroundColor #F6F8FA
46 |     LineColor #D0D7DE
47 |     FontColor #24292F
48 |   }
49 |   arrow {
50 |     LineColor #0969DA
51 |     FontColor #24292F
52 |   }
53 |   lifeLine {
54 |     LineColor #57606A
55 |   }
56 |   activity {
57 |     BackgroundColor #F6F8FA
58 |     LineColor #57606A
59 |     FontColor #24292F
60 |     BorderColor #D0D7DE
61 |   }
62 |   diamond {
63 |     BackgroundColor #F6F8FA
64 |     LineColor #57606A
65 |     FontColor #24292F
66 |   }
67 | </style>
68 | 
69 | skinparam sequence {
70 |     LifeLineBackgroundColor #F6F8FA
71 |     GroupBorderColor #D0D7DE
72 |     GroupFontColor #24292F
73 |     GroupHeaderFontColor #24292F
74 |     GroupBackgroundColor #F6F8FA
75 | }
76 | 
77 | skinparam activity {
78 |     StartColor #2DA44E
79 |     StopColor #CF222E
80 | }
81 | 
82 | skinparam ConditionEndStyle diamond
83 | skinparam ParticipantPadding 20
84 | skinparam BoxPadding 20


--------------------------------------------------------------------------------
/docs/examples.md:
--------------------------------------------------------------------------------
  1 | # Examples
  2 | 
  3 | This document provides detailed examples and demonstrations of the Context Engineering Template workflows.
  4 | 
  5 | ## MCP Server-Client Example
  6 | 
  7 | The `examples/mcp-server-client` directory contains a complete implementation demonstrating the context engineering workflow with a real-world AI-powered assistant project.
  8 | 
  9 | ### What It Demonstrates
 10 | 
 11 | The MCP server-client example shows:
 12 | 
 13 | - **Business Requirements**: AI-powered task automation for small businesses
 14 | - **Product Features**: Natural language interface, tool integration, real-time responses
 15 | - **Technical Implementation**: MCP protocol, Streamlit GUI, async client-server architecture
 16 | 
 17 | ### Development Mode
 18 | 
 19 | Use these commands for development and testing:
 20 | 
 21 | ```bash
 22 | # Launch interactive GUI (Streamlit)
 23 | make run_example_gui
 24 | 
 25 | # Run MCP server only
 26 | make run_example_server
 27 | 
 28 | # Run MCP client with specific tool
 29 | make run_example_client ARGS="get_weather"
 30 | make run_example_client ARGS="roll_dice"
 31 | make run_example_client ARGS="get_date"
 32 | ```
 33 | 
 34 | ### Production Mode
 35 | 
 36 | For production deployment:
 37 | 
 38 | ```bash
 39 | # Run complete system with Docker Compose
 40 | make run_example_full
 41 | 
 42 | # Run with specific configuration
 43 | make run_example_full ARGS="--build"
 44 | ```
 45 | 
 46 | ### Detailed Documentation
 47 | 
 48 | See `examples/mcp-server-client/README.md` for:
 49 | 
 50 | - Complete setup instructions
 51 | - API documentation
 52 | - Architecture details
 53 | - Testing procedures
 54 | 
 55 | ## Business Input Examples
 56 | 
 57 | ### AI Assistant Project
 58 | 
 59 | Located at `context/business_inputs/example_ai_assistant.md`, this example shows:
 60 | 
 61 | - Complete business problem statement
 62 | - Target user personas and market analysis
 63 | - Success metrics and business constraints
 64 | - Stakeholder requirements and risk assessment
 65 | 
 66 | ### Usage Pattern
 67 | 
 68 | ```bash
 69 | # Use the existing example
 70 | make brd_gen_claude "ARGS=example_ai_assistant.md"
 71 | 
 72 | # Or create your own
 73 | cp context/templates/business_input_base.md context/business_inputs/my_project.md
 74 | # Edit with your business information
 75 | make brd_gen_claude "ARGS=my_project.md"
 76 | ```
 77 | 
 78 | ## Workflow Examples
 79 | 
 80 | ### Complete Business-Driven Example
 81 | 
 82 | This example walks through the entire BRD → PRD → FRP workflow:
 83 | 
 84 | ```bash
 85 | # 1. Start with business input
 86 | cp context/business_inputs/example_ai_assistant.md context/business_inputs/my_assistant.md
 87 | 
 88 | # 2. Generate business requirements
 89 | make brd_gen_claude "ARGS=my_assistant.md"
 90 | 
 91 | # 3. Create product specifications
 92 | make prd_gen_claude "ARGS=my_assistant.md"
 93 | 
 94 | # 4. Generate technical specifications for specific features
 95 | make frp_gen_claude "ARGS=my_assistant.md task_management"
 96 | make frp_gen_claude "ARGS=my_assistant.md email_integration"
 97 | 
 98 | # 5. Implement features
 99 | make frp_exe_claude "ARGS=my_assistant_task_management.md"
100 | make frp_exe_claude "ARGS=my_assistant_email_integration.md"
101 | ```
102 | 
103 | ### Legacy Quick Prototype Example
104 | 
105 | For rapid prototyping without business context:
106 | 
107 | ```bash
108 | # 1. Create feature description
109 | echo "# Quick Chat Feature
110 | A simple chat interface for user interaction" > context/features/quick_chat.md
111 | 
112 | # 2. Generate FRP
113 | make frp_gen_legacy_claude "ARGS=quick_chat.md"
114 | 
115 | # 3. Implement
116 | make frp_exe_legacy_claude "ARGS=quick_chat.md"
117 | ```
118 | 
119 | ## Template Examples
120 | 
121 | ### Business Input Template Usage
122 | 
123 | The business input template (`context/templates/business_input_base.md`) provides:
124 | 
125 | - Structured sections for business problem statement
126 | - User persona and market context templates
127 | - Success metrics and constraints frameworks
128 | - Risk assessment guidelines
129 | 
130 | ### BRD Template Features
131 | 
132 | The BRD template (`context/templates/brd_base.md`) includes:
133 | 
134 | - Comprehensive business analysis framework
135 | - Stakeholder requirement mapping
136 | - Risk mitigation strategies
137 | - Success validation approaches
138 | 
139 | ## Integration Examples
140 | 
141 | ### Multiple Agent Workflows
142 | 
143 | The system supports multiple AI agent configurations:
144 | 
145 | - **Claude Code**: Primary development agent
146 | - **Cline**: Alternative development environment
147 | - **Gemini**: Additional agent support
148 | 
149 | ### API Integration Patterns
150 | 
151 | Examples show integration with:
152 | 
153 | - Google Workspace APIs
154 | - Microsoft 365 services
155 | - Custom business APIs
156 | - Third-party tool integrations
157 | 
158 | ## Best Practices
159 | 
160 | ### File Naming Conventions
161 | 
162 | - Business inputs: `context/business_inputs/project_name.md`
163 | - Generated BRDs: `context/BRDs/project_name.md`
164 | - Generated PRDs: `context/PRDs/project_name.md`
165 | - Feature FRPs: `context/FRPs/project_name_feature_name.md`
166 | 
167 | ### Workflow Recommendations
168 | 
169 | 1. **Start Small**: Begin with one core feature
170 | 2. **Iterate Quickly**: Use the business-driven approach for comprehensive features
171 | 3. **Test Early**: Implement and test each feature independently
172 | 4. **Document Changes**: Update business requirements as you learn
173 | 
174 | ### Common Patterns
175 | 
176 | - **Feature Dependencies**: Handle in PRD feature sequencing
177 | - **Shared Components**: Identify in business requirements phase
178 | - **Integration Points**: Plan during product requirements phase
179 | - **Error Handling**: Include in feature requirements prompts
180 | 
181 | ## Troubleshooting Examples
182 | 
183 | ### Failed BRD Generation
184 | 
185 | If BRD generation fails:
186 | 
187 | ```bash
188 | # Check input file exists
189 | ls -la context/business_inputs/
190 | 
191 | # Verify template accessibility
192 | ls -la context/templates/business_input_base.md
193 | 
194 | # Try interactive approach instead
195 | /generate-brd my_project.md
196 | ```
197 | 
198 | ### Incomplete Feature Implementation
199 | 
200 | If feature implementation is incomplete:
201 | 
202 | ```bash
203 | # Check FRP quality
204 | cat context/FRPs/project_feature.md
205 | 
206 | # Re-run with more context
207 | make frp_exe_claude "ARGS=project_feature.md"
208 | 
209 | # Check for missing dependencies
210 | make check_types
211 | make test_all
212 | ```
213 | 


--------------------------------------------------------------------------------
/docs/llms.txt:
--------------------------------------------------------------------------------
1 | 404 - Failed to fetch repository. If the repo is private, be sure to provide an Authorization header. Status:404


--------------------------------------------------------------------------------
/examples/mcp-server-client/Dockerfile:
--------------------------------------------------------------------------------
 1 | # --- Build Stage ---
 2 | FROM python:3.13-slim-bookworm AS builder
 3 | WORKDIR /app
 4 | 
 5 | COPY pyproject.toml uv.lock ./
 6 | COPY src ./src
 7 | 
 8 | RUN pip install uv -q
 9 | RUN uv sync --frozen
10 | 
11 | # --- Run Stage ---
12 | FROM python:3.13-slim-bookworm AS runner
13 | WORKDIR /app
14 | ENV PYTHONPATH=/app/src
15 | 
16 | COPY --from=builder /app/.venv ./.venv
17 | COPY --from=builder /app/src ./src
18 | COPY pyproject.toml uv.lock ./
19 | 
20 | ENV PATH="/app/.venv/bin:$PATH"
21 | CMD ["python", "-m", "src.main", "server"]
22 | 


--------------------------------------------------------------------------------
/examples/mcp-server-client/Makefile:
--------------------------------------------------------------------------------
 1 | # MCP Server-Client Example Makefile
 2 | # This Makefile provides commands for the MCP server-client example
 3 | 
 4 | .SILENT:
 5 | .ONESHELL:
 6 | .PHONY: setup_dev setup_prod ruff test_all check_types coverage_all run_gui run_server run_client run_full help
 7 | .DEFAULT_GOAL := help
 8 | 
 9 | SRC_PATH := src
10 | APP_PATH := $(SRC_PATH)
11 | 
12 | # MARK: setup
13 | 
14 | setup_dev:  ## Install uv and development dependencies
15 | 	echo "Setting up dev environment ..."
16 | 	pip install uv -q
17 | 	uv sync --all-groups
18 | 
19 | setup_prod:  ## Install uv and production dependencies
20 | 	echo "Setting up prod environment ..."
21 | 	pip install uv -q
22 | 	uv sync --frozen
23 | 
24 | # MARK: code quality
25 | 
26 | ruff:  ## Format and lint code with ruff
27 | 	uv run ruff format
28 | 	uv run ruff check --fix
29 | 
30 | test_all:  ## Run all tests
31 | 	uv run pytest
32 | 
33 | coverage_all:  ## Get test coverage
34 | 	uv run coverage run -m pytest || true
35 | 	uv run coverage report -m
36 | 
37 | check_types:  ## Check for static typing errors
38 | 	uv run mypy $(APP_PATH)
39 | 
40 | # MARK: run
41 | 
42 | run_gui:  ## Launch Streamlit GUI
43 | 	uv run python -m src.main gui
44 | 
45 | run_server:  ## Run MCP server
46 | 	uv run python -m src.main server
47 | 
48 | run_client:  ## Run MCP client (requires ARGS)
49 | 	uv run python -m src.main client $(ARGS)
50 | 
51 | run_full:  ## Run full MCP server-client demo using Docker Compose
52 | 	docker compose up --build $(ARGS)
53 | 
54 | # MARK: help
55 | 
56 | help:  ## Display available commands
57 | 	echo "Usage: make [command]"
58 | 	echo "Commands:"
59 | 	awk '/^[a-zA-Z0-9_-]+:.*?##/ {
60 | 		helpMessage = match($$0, /## (.*)/)
61 | 		if (helpMessage) {
62 | 			recipe = $$1
63 | 			sub(/:/, "", recipe)
64 | 			printf "  \033[36m%-20s\033[0m %s\n", recipe, substr($$0, RSTART + 3, RLENGTH)
65 | 		}
66 | 	}' $(MAKEFILE_LIST)


--------------------------------------------------------------------------------
/examples/mcp-server-client/README.md:
--------------------------------------------------------------------------------
 1 | # MCP Server-Client Demo
 2 | 
 3 | A demonstration of Model Control Protocol (MCP) server-client infrastructure built with Claude Code CLI.
 4 | 
 5 | ## Quick Start
 6 | 
 7 | ```bash
 8 | # Setup development environment
 9 | make setup_dev
10 | 
11 | # Run GUI interface
12 | make run_gui
13 | 
14 | # Run server only
15 | make run_server
16 | 
17 | # Run with Docker Compose
18 | make run_full
19 | ```
20 | 
21 | ## Components
22 | 
23 | - **MCP Server**: Provides tools for date/time, weather, and dice rolling
24 | - **MCP Client**: CLI interface for interacting with server
25 | - **Streamlit GUI**: Web interface for server interaction
26 | 
27 | ## Docker Usage
28 | 
29 | ```bash
30 | # Run all services
31 | docker compose up --build
32 | 
33 | # Access GUI at http://localhost:8501
34 | # Server runs on port 8000
35 | ```
36 | 


--------------------------------------------------------------------------------
/examples/mcp-server-client/context/features/feature_1_mcp_server.md:
--------------------------------------------------------------------------------
 1 | # Feature description for: MCP Server with tools
 2 | 
 3 | ## FEATURE
 4 | 
 5 | Implement an **MCP (Message Control Protocol) Server** in Python that exposes three callable tools via structured messages. The server should receive well-formed MCP messages and dispatch tool invocations accordingly. The three tools to be exposed are:
 6 | 
 7 | 1. **Roll Dice**: Accepts a format like `2d6` or `1d20` and returns the rolled values and total.
 8 | 2. **Get Weather**: Accepts a city name or coordinates and returns the current weather conditions using a public weather API.
 9 | 3. **Get Date**: Returns the current date and time in ISO 8601 format or based on a requested timezone.
10 | 
11 | The server should be modular, testable, and extensible for future tools. Logging, error handling, and message validation should be considered first-class concerns.
12 | 
13 | ## EXAMPLES
14 | 
15 | Located in `/context/examples`:
16 | 
17 | * `roll_dice_example.json`: Demonstrates sending `{"tool": "roll_dice", "args": {"notation": "3d6"}}` and receiving `{"result": {"values": [4,2,6], "total": 12}}`.
18 | * `get_weather_example.json`: Sends `{"tool": "get_weather", "args": {"location": "San Francisco"}}` and expects weather data such as temperature, condition, and wind speed.
19 | * `get_date_example.json`: Sends `{"tool": "get_date", "args": {"timezone": "UTC"}}` and receives `{"result": "2025-07-06T16:22:00Z"}`.
20 | 
21 | These examples cover correct usage and malformed inputs to validate tool response and error handling.
22 | 
23 | ## DOCUMENTATION
24 | 
25 | * [Open-Meteo API](https://open-meteo.com/en/docs): For retrieving weather information.
26 | * [Python `datetime` module](https://docs.python.org/3/library/datetime.html): For implementing date and time tool.
27 | * [random module (Python)](https://docs.python.org/3/library/random.html): For rolling dice.
28 | * \[MCP Protocol Overview (proprietary/internal if applicable)] or general protocol documentation, if using a specific spec.
29 | 
30 | Additional context from [context-engineering-intro](https://github.com/qte77/context-engineering-template) will inform message structure and processing strategy.
31 | 
32 | ## OTHER CONSIDERATIONS
33 | 
34 | * **Tool routing logic** should be clearly separated to allow clean expansion.
35 | * **Input validation** is critical: especially for `roll_dice`, invalid formats (e.g., `3x5`, `0d6`, `d10`) must return informative errors.
36 | * **Weather API failures or rate limits** should be gracefully handled with fallback messages.
37 | * **Timezone parsing** for `get_date` should use `pytz` or `zoneinfo`, and clearly inform users when timezones are unsupported.
38 | * **Security note**: Weather and date APIs should not expose sensitive request metadata or leak internal server details in errors.
39 | * AI coding assistants often:
40 | 
41 |   * Miss edge case handling (e.g., zero dice, negative sides)
42 |   * Forget to structure results consistently across tools
43 |   * Fail to modularize tool logic, making future expansion difficult
44 | 


--------------------------------------------------------------------------------
/examples/mcp-server-client/context/features/feature_2_mcp_client.md:
--------------------------------------------------------------------------------
 1 | # Feature description for: MCP Client for Tool Invocation
 2 | 
 3 | ## FEATURE
 4 | 
 5 | Implement a **Python-based MCP Client** capable of sending structured requests to an MCP Server and handling the corresponding responses. The client should:
 6 | 
 7 | * Connect to the MCP server over a socket, HTTP, or another configured protocol.
 8 | * Serialize requests into the expected MCP message format (e.g., JSON or line-based protocol).
 9 | * Provide a command-line interface (CLI) and/or programmatic interface for interacting with the following tools:
10 | 
11 |   1. **Roll Dice** (`roll_dice`) – accepts dice notation like `2d6`, `1d20`.
12 |   2. **Get Weather** (`get_weather`) – accepts a location name or coordinates.
13 |   3. **Get Date** (`get_date`) – optionally accepts a timezone.
14 | 
15 | The client should also handle connection errors, invalid tool responses, and retry logic gracefully.
16 | 
17 | ## EXAMPLES
18 | 
19 | Located in `/context/examples`:
20 | 
21 | * `client_roll_dice_input.json`: `{ "tool": "roll_dice", "args": { "notation": "2d6" } }`
22 | * `client_get_weather_input.json`: `{ "tool": "get_weather", "args": { "location": "Berlin" } }`
23 | * `client_get_date_input.json`: `{ "tool": "get_date", "args": { "timezone": "UTC" } }`
24 | * `client_invalid_tool.json`: `{ "tool": "fly_to_mars", "args": {} }` → Should trigger a meaningful error from the server
25 | 
26 | These example requests and expected responses can be used for local testing and automated integration checks.
27 | 
28 | ## DOCUMENTATION
29 | 
30 | * [Python `socket` module](https://docs.python.org/3/library/socket.html) or [requests](https://docs.python.org/3/library/urllib.request.html) depending on transport.
31 | * [JSON module](https://docs.python.org/3/library/json.html) for message formatting.
32 | * [argparse](https://docs.python.org/3/library/argparse.html) for implementing a simple CLI wrapper.
33 | * Reference the MCP Server protocol spec or internal documentation (e.g. *MCP Protocol Overview* if proprietary).
34 | * [context-engineering-template](https://github.com/qte/context-engineering-template) for usage conventions.
35 | 
36 | ## OTHER CONSIDERATIONS
37 | 
38 | * Client must validate outgoing messages before sending to avoid malformed requests.
39 | * Handle connection errors, timeouts, and retries in a user-friendly manner.
40 | * The response handler should check for required fields (`result`, `error`, etc.) to avoid crashes on malformed server responses.
41 | * Consider pluggability of tools so future expansions can be supported with minimal refactoring.
42 | * AI assistants often:
43 | 
44 |   * Miss error handling around partial or no server responses.
45 |   * Forget to properly close socket connections or handle timeouts.
46 |   * Write overly rigid request builders, making CLI usage frustrating.
47 | 


--------------------------------------------------------------------------------
/examples/mcp-server-client/context/features/feature_3_streamlit_gui.md:
--------------------------------------------------------------------------------
 1 | # Feature description for: Streamlit GUI for MCP Server-Client Interaction Showcase
 2 | 
 3 | ## FEATURE
 4 | 
 5 | Develop a **Streamlit-based graphical user interface (GUI)** to demonstrate and interactively showcase the communication and integration between the MCP Server and MCP Client. The GUI should allow users to:
 6 | 
 7 | * Select and invoke any of the three available tools (`roll_dice`, `get_weather`, `get_date`) via intuitive form inputs.
 8 | * Enter tool-specific parameters such as dice notation, location, or timezone.
 9 | * Display real-time request payloads sent by the client and the corresponding responses received from the server.
10 | * Handle and display error messages gracefully.
11 | * Log interaction history for the current session, allowing users to review previous commands and results.
12 | * Provide clear visual feedback about the status of the connection and request execution.
13 | 
14 | This GUI acts as both a testing ground and demonstration interface, useful for users unfamiliar with command-line tools or raw protocol messages.
15 | 
16 | ## EXAMPLES
17 | 
18 | Located in `/context/examples`:
19 | 
20 | * `streamlit_roll_dice_interaction.json`: Example input/output pairs demonstrating a dice roll session in the GUI.
21 | * `streamlit_get_weather_interaction.json`: Demonstrates user inputs for location and the displayed weather response.
22 | * `streamlit_get_date_interaction.json`: Shows date/time requests with optional timezone selection.
23 | * `streamlit_error_handling.json`: Examples of how the GUI displays server-side validation errors or connection issues.
24 | 
25 | These examples serve as test cases for GUI input validation and response rendering.
26 | 
27 | ## DOCUMENTATION
28 | 
29 | * [Streamlit Documentation](https://docs.streamlit.io/) for building interactive Python apps.
30 | * \[MCP Server and Client Protocol Specs] (internal/proprietary or from context-engineering-intro).
31 | * Python libraries for HTTP or socket communication used by the client.
32 | * UI/UX design best practices for interactive demos.
33 | * [context-engineering-intro](https://github.com/coleam00/context-engineering-intro) for project conventions.
34 | 
35 | ## OTHER CONSIDERATIONS
36 | 
37 | * Ensure asynchronous or non-blocking communication so the UI remains responsive during server interactions.
38 | * Validate inputs in the GUI before sending to the client to minimize server errors.
39 | * Provide helpful tooltips or inline help to explain tool parameters to users unfamiliar with dice notation or timezone formats.
40 | * Consider session state management in Streamlit to maintain history and status.
41 | * AI coding assistants often overlook proper error propagation to the UI and user-friendly messaging.
42 | * Security considerations: if exposing any sensitive endpoints or API keys, avoid hardcoding secrets in the GUI code.
43 | * Design with extensibility in mind to add new tools or more complex workflows easily.
44 | 


--------------------------------------------------------------------------------
/examples/mcp-server-client/context/outputs/client_get_date_input.json:
--------------------------------------------------------------------------------
 1 | {
 2 |   "description": "Simple client input format for get_date tool",
 3 |   "cli_command": "python -m src.main client --server src/mcp_server/server.py get_date --timezone UTC",
 4 |   "expected_input": {
 5 |     "tool": "get_date",
 6 |     "arguments": {
 7 |       "timezone": "UTC"
 8 |     }
 9 |   },
10 |   "expected_output_format": {
11 |     "success": true,
12 |     "tool_name": "get_date",
13 |     "result": {
14 |       "content": [
15 |         {
16 |           "type": "text",
17 |           "text": "🕐 **Current Date & Time**\n📅 Date: **2025-07-07** (Monday)\n⏰ Time: **14:30:25**\n🌍 Timezone: **UTC**\n📋 ISO 8601: `2025-07-07T14:30:25+00:00`\n🔢 Unix Timestamp: `1720360225`"
18 |         }
19 |       ]
20 |     }
21 |   },
22 |   "examples": [
23 |     {
24 |       "timezone": "America/New_York",
25 |       "description": "Get Eastern Time"
26 |     },
27 |     {
28 |       "timezone": "Europe/London",
29 |       "description": "Get London time"
30 |     },
31 |     {
32 |       "timezone": "Asia/Tokyo",
33 |       "description": "Get Tokyo time"
34 |     },
35 |     {
36 |       "timezone": "pst",
37 |       "description": "Get Pacific Time using alias"
38 |     }
39 |   ]
40 | }
41 | 


--------------------------------------------------------------------------------
/examples/mcp-server-client/context/outputs/client_get_weather_input.json:
--------------------------------------------------------------------------------
 1 | {
 2 |   "description": "Simple client input format for get_weather tool",
 3 |   "cli_command": "python -m src.main client --server src/mcp_server/server.py get_weather --location 'San Francisco'",
 4 |   "expected_input": {
 5 |     "tool": "get_weather",
 6 |     "arguments": {
 7 |       "location": "San Francisco"
 8 |     }
 9 |   },
10 |   "expected_output_format": {
11 |     "success": true,
12 |     "tool_name": "get_weather",
13 |     "result": {
14 |       "content": [
15 |         {
16 |           "type": "text",
17 |           "text": "🌤️ **Weather for San Francisco**\n🌡️ Temperature: **18.5°C**\n☁️ Condition: **Partly cloudy**\n💨 Wind Speed: **12.3 km/h**\n💧 Humidity: **65%**\n🕐 Updated: 2025-07-07 14:30 UTC"
18 |         }
19 |       ]
20 |     }
21 |   },
22 |   "examples": [
23 |     {
24 |       "location": "London",
25 |       "description": "Get weather for London"
26 |     },
27 |     {
28 |       "location": "New York",
29 |       "description": "Get weather for New York"
30 |     },
31 |     {
32 |       "location": "37.7749,-122.4194",
33 |       "description": "Get weather using coordinates"
34 |     }
35 |   ]
36 | }
37 | 


--------------------------------------------------------------------------------
/examples/mcp-server-client/context/outputs/client_invalid_tool.json:
--------------------------------------------------------------------------------
 1 | {
 2 |   "description": "Error handling example for invalid tool",
 3 |   "cli_command": "python -m src.main client --server src/mcp_server/server.py invalid_tool --arg value",
 4 |   "expected_input": {
 5 |     "tool": "invalid_tool",
 6 |     "arguments": {
 7 |       "arg": "value"
 8 |     }
 9 |   },
10 |   "expected_output_format": {
11 |     "success": false,
12 |     "tool_name": "invalid_tool",
13 |     "error": "Tool 'invalid_tool' not available. Available tools: ['roll_dice', 'get_weather', 'get_date']",
14 |     "arguments": {
15 |       "arg": "value"
16 |     }
17 |   },
18 |   "error_scenarios": [
19 |     {
20 |       "scenario": "Tool not available",
21 |       "tool": "nonexistent_tool",
22 |       "expected_error": "Tool 'nonexistent_tool' not available"
23 |     },
24 |     {
25 |       "scenario": "Server not running",
26 |       "server_path": "./nonexistent_server.py",
27 |       "expected_error": "Server script not found"
28 |     },
29 |     {
30 |       "scenario": "Invalid server path",
31 |       "server_path": "/dev/null",
32 |       "expected_error": "Failed to connect to server"
33 |     },
34 |     {
35 |       "scenario": "Connection timeout",
36 |       "timeout": 1,
37 |       "expected_error": "Connection timeout"
38 |     }
39 |   ]
40 | }
41 | 


--------------------------------------------------------------------------------
/examples/mcp-server-client/context/outputs/client_roll_dice_input.json:
--------------------------------------------------------------------------------
 1 | {
 2 |   "description": "Simple client input format for roll_dice tool",
 3 |   "cli_command": "python -m src.main client --server src/mcp_server/server.py roll_dice --notation 2d6",
 4 |   "expected_input": {
 5 |     "tool": "roll_dice",
 6 |     "arguments": {
 7 |       "notation": "2d6"
 8 |     }
 9 |   },
10 |   "expected_output_format": {
11 |     "success": true,
12 |     "tool_name": "roll_dice",
13 |     "result": {
14 |       "content": [
15 |         {
16 |           "type": "text",
17 |           "text": "🎲 Rolled 2d6: [3, 5] = **8**"
18 |         }
19 |       ]
20 |     }
21 |   },
22 |   "examples": [
23 |     {
24 |       "notation": "1d20",
25 |       "description": "Roll a 20-sided die"
26 |     },
27 |     {
28 |       "notation": "3d6",
29 |       "description": "Roll three 6-sided dice"
30 |     },
31 |     {
32 |       "notation": "2d10",
33 |       "description": "Roll two 10-sided dice"
34 |     }
35 |   ]
36 | }
37 | 


--------------------------------------------------------------------------------
/examples/mcp-server-client/context/outputs/get_date_example.json:
--------------------------------------------------------------------------------
  1 | {
  2 |   "description": "Example request and response for the get_date tool",
  3 |   "request": {
  4 |     "jsonrpc": "2.0",
  5 |     "method": "tools/call",
  6 |     "params": {
  7 |       "name": "get_date",
  8 |       "arguments": {
  9 |         "timezone": "UTC"
 10 |       }
 11 |     },
 12 |     "id": 3
 13 |   },
 14 |   "response": {
 15 |     "jsonrpc": "2.0",
 16 |     "id": 3,
 17 |     "result": {
 18 |       "content": [
 19 |         {
 20 |           "type": "text",
 21 |           "text": "🕐 **Current Date & Time**\n📅 Date: **2025-07-07** (Monday)\n⏰ Time: **14:30:25**\n🌍 Timezone: **UTC**\n📋 ISO 8601: `2025-07-07T14:30:25+00:00`\n🔢 Unix Timestamp: `1720360225`"
 22 |         }
 23 |       ],
 24 |       "isError": false
 25 |     }
 26 |   },
 27 |   "examples": {
 28 |     "valid_requests": [
 29 |       {
 30 |         "timezone": "UTC",
 31 |         "description": "Coordinated Universal Time"
 32 |       },
 33 |       {
 34 |         "timezone": "America/New_York",
 35 |         "description": "Eastern Time"
 36 |       },
 37 |       {
 38 |         "timezone": "America/Los_Angeles",
 39 |         "description": "Pacific Time"
 40 |       },
 41 |       {
 42 |         "timezone": "Europe/London",
 43 |         "description": "British Time"
 44 |       },
 45 |       {
 46 |         "timezone": "Asia/Tokyo",
 47 |         "description": "Japan Standard Time"
 48 |       },
 49 |       {
 50 |         "timezone": "est",
 51 |         "description": "Eastern Time alias"
 52 |       },
 53 |       {
 54 |         "timezone": "pst",
 55 |         "description": "Pacific Time alias"
 56 |       }
 57 |     ],
 58 |     "invalid_requests": [
 59 |       {
 60 |         "timezone": "Invalid/Timezone",
 61 |         "error": "Invalid timezone: 'Invalid/Timezone'. Common timezones: UTC, America/New_York, America/Los_Angeles, America/Chicago, Europe/London, Europe/Paris, Asia/Tokyo, Australia/Sydney. Aliases: utc, gmt, est, pst, cst, mst, edt, pdt, cdt, mdt, bst, cet, jst, aest. Use IANA timezone names (e.g., 'America/New_York') or aliases."
 62 |       },
 63 |       {
 64 |         "timezone": "",
 65 |         "error": "Timezone cannot be empty"
 66 |       }
 67 |     ]
 68 |   },
 69 |   "supported_timezones": {
 70 |     "aliases": {
 71 |       "utc": "UTC",
 72 |       "gmt": "UTC", 
 73 |       "est": "America/New_York",
 74 |       "pst": "America/Los_Angeles",
 75 |       "cst": "America/Chicago",
 76 |       "mst": "America/Denver",
 77 |       "edt": "America/New_York",
 78 |       "pdt": "America/Los_Angeles",
 79 |       "cdt": "America/Chicago",
 80 |       "mdt": "America/Denver",
 81 |       "bst": "Europe/London",
 82 |       "cet": "Europe/Paris",
 83 |       "jst": "Asia/Tokyo",
 84 |       "aest": "Australia/Sydney"
 85 |     },
 86 |     "common_iana_zones": [
 87 |       "UTC",
 88 |       "America/New_York",
 89 |       "America/Los_Angeles", 
 90 |       "America/Chicago",
 91 |       "America/Denver",
 92 |       "Europe/London",
 93 |       "Europe/Paris",
 94 |       "Europe/Berlin",
 95 |       "Asia/Tokyo",
 96 |       "Asia/Shanghai",
 97 |       "Australia/Sydney"
 98 |     ]
 99 |   }
100 | }


--------------------------------------------------------------------------------
/examples/mcp-server-client/context/outputs/get_weather_example.json:
--------------------------------------------------------------------------------
 1 | {
 2 |   "description": "Example request and response for the get_weather tool",
 3 |   "request": {
 4 |     "jsonrpc": "2.0",
 5 |     "method": "tools/call",
 6 |     "params": {
 7 |       "name": "get_weather",
 8 |       "arguments": {
 9 |         "location": "San Francisco"
10 |       }
11 |     },
12 |     "id": 2
13 |   },
14 |   "response": {
15 |     "jsonrpc": "2.0",
16 |     "id": 2,
17 |     "result": {
18 |       "content": [
19 |         {
20 |           "type": "text",
21 |           "text": "🌤️ **Weather for San Francisco**\n🌡️ Temperature: **18.5°C**\n☁️ Condition: **Partly cloudy**\n💨 Wind Speed: **12.3 km/h**\n💧 Humidity: **65%**\n🕐 Updated: 2025-07-07 14:30 UTC"
22 |         }
23 |       ],
24 |       "isError": false
25 |     }
26 |   },
27 |   "examples": {
28 |     "valid_requests": [
29 |       {
30 |         "location": "London",
31 |         "description": "Weather for London city"
32 |       },
33 |       {
34 |         "location": "New York",
35 |         "description": "Weather for New York city"
36 |       },
37 |       {
38 |         "location": "37.7749,-122.4194",
39 |         "description": "Weather using coordinates (San Francisco)"
40 |       },
41 |       {
42 |         "location": "Tokyo",
43 |         "description": "Weather for Tokyo city"
44 |       }
45 |     ],
46 |     "invalid_requests": [
47 |       {
48 |         "location": "Unknown City",
49 |         "error": "Unknown location: 'Unknown City'. Please use coordinates (lat,lon) or one of: berlin, beijing, cairo, chicago, lagos, london, los angeles, madrid, miami, moscow, mumbai, new york, paris, rome, san francisco, seattle, sydney, tokyo, toronto, vancouver"
50 |       },
51 |       {
52 |         "location": "",
53 |         "error": "Location cannot be empty"
54 |       },
55 |       {
56 |         "location": "999,999",
57 |         "error": "Unknown location: '999,999'. Please use coordinates (lat,lon) or one of: [city list]"
58 |       }
59 |     ]
60 |   },
61 |   "supported_cities": [
62 |     "San Francisco",
63 |     "New York", 
64 |     "London",
65 |     "Paris",
66 |     "Tokyo",
67 |     "Sydney",
68 |     "Los Angeles",
69 |     "Chicago",
70 |     "Miami",
71 |     "Seattle",
72 |     "Vancouver",
73 |     "Toronto",
74 |     "Berlin",
75 |     "Rome",
76 |     "Madrid",
77 |     "Moscow",
78 |     "Beijing",
79 |     "Mumbai",
80 |     "Cairo",
81 |     "Lagos"
82 |   ]
83 | }


--------------------------------------------------------------------------------
/examples/mcp-server-client/context/outputs/roll_dice_example.json:
--------------------------------------------------------------------------------
 1 | {
 2 |   "description": "Example request and response for the roll_dice tool",
 3 |   "request": {
 4 |     "jsonrpc": "2.0",
 5 |     "method": "tools/call",
 6 |     "params": {
 7 |       "name": "roll_dice",
 8 |       "arguments": {
 9 |         "notation": "3d6"
10 |       }
11 |     },
12 |     "id": 1
13 |   },
14 |   "response": {
15 |     "jsonrpc": "2.0",
16 |     "id": 1,
17 |     "result": {
18 |       "content": [
19 |         {
20 |           "type": "text",
21 |           "text": "🎲 Rolled 3d6: [4, 2, 6] = **12**"
22 |         }
23 |       ],
24 |       "isError": false
25 |     }
26 |   },
27 |   "examples": {
28 |     "valid_requests": [
29 |       {
30 |         "notation": "1d20",
31 |         "description": "Single twenty-sided die"
32 |       },
33 |       {
34 |         "notation": "2d6",
35 |         "description": "Two six-sided dice"
36 |       },
37 |       {
38 |         "notation": "4d10",
39 |         "description": "Four ten-sided dice"
40 |       }
41 |     ],
42 |     "invalid_requests": [
43 |       {
44 |         "notation": "d6",
45 |         "error": "Invalid dice notation: 'd6'. Expected format: 'XdY' (e.g., '2d6', '1d20')"
46 |       },
47 |       {
48 |         "notation": "0d6",
49 |         "error": "Dice count must be greater than 0"
50 |       },
51 |       {
52 |         "notation": "101d6",
53 |         "error": "Dice count must not exceed 100"
54 |       },
55 |       {
56 |         "notation": "1d0",
57 |         "error": "Number of sides must be greater than 0"
58 |       },
59 |       {
60 |         "notation": "abc",
61 |         "error": "Invalid dice notation: 'abc'. Expected format: 'XdY' (e.g., '2d6', '1d20')"
62 |       }
63 |     ]
64 |   }
65 | }


--------------------------------------------------------------------------------
/examples/mcp-server-client/context/outputs/streamlit_error_handling.json:
--------------------------------------------------------------------------------
 1 | {
 2 |   "interaction_type": "streamlit_gui",
 3 |   "tool_name": "roll_dice",
 4 |   "timestamp": "2024-01-15T10:36:00Z",
 5 |   "request": {
 6 |     "method": "tool_invocation",
 7 |     "parameters": {
 8 |       "tool": "roll_dice",
 9 |       "arguments": {
10 |         "notation": "invalid_dice"
11 |       }
12 |     }
13 |   },
14 |   "response": {
15 |     "success": false,
16 |     "result": null,
17 |     "error": "Invalid dice notation format: invalid_dice",
18 |     "tool_name": "roll_dice",
19 |     "arguments": {
20 |       "notation": "invalid_dice"
21 |     }
22 |   },
23 |   "execution_time": 0.05,
24 |   "gui_state": {
25 |     "connected": true,
26 |     "server_path": "src/mcp_server/server.py",
27 |     "available_tools": ["roll_dice", "get_weather", "get_date"]
28 |   },
29 |   "error_details": {
30 |     "validation_error": "Dice notation must follow pattern: NdN (e.g., 2d6, 1d20)",
31 |     "user_input": "invalid_dice",
32 |     "suggested_corrections": ["2d6", "1d20", "3d10"]
33 |   }
34 | }


--------------------------------------------------------------------------------
/examples/mcp-server-client/context/outputs/streamlit_get_date_interaction.json:
--------------------------------------------------------------------------------
 1 | {
 2 |   "interaction_type": "streamlit_gui",
 3 |   "tool_name": "get_date",
 4 |   "timestamp": "2024-01-15T10:34:00Z",
 5 |   "request": {
 6 |     "method": "tool_invocation",
 7 |     "parameters": {
 8 |       "tool": "get_date",
 9 |       "arguments": {
10 |         "timezone": "America/New_York"
11 |       }
12 |     }
13 |   },
14 |   "response": {
15 |     "success": true,
16 |     "result": {
17 |       "datetime": "2024-01-15T05:34:15-05:00",
18 |       "timezone": "America/New_York",
19 |       "formatted": "Monday, January 15, 2024 at 5:34:15 AM EST",
20 |       "unix_timestamp": 1705313655
21 |     },
22 |     "tool_name": "get_date",
23 |     "arguments": {
24 |       "timezone": "America/New_York"
25 |     }
26 |   },
27 |   "execution_time": 0.12,
28 |   "gui_state": {
29 |     "connected": true,
30 |     "server_path": "src/mcp_server/server.py",
31 |     "available_tools": ["roll_dice", "get_weather", "get_date"]
32 |   }
33 | }


--------------------------------------------------------------------------------
/examples/mcp-server-client/context/outputs/streamlit_get_weather_interaction.json:
--------------------------------------------------------------------------------
 1 | {
 2 |   "interaction_type": "streamlit_gui",
 3 |   "tool_name": "get_weather",
 4 |   "timestamp": "2024-01-15T10:32:00Z",
 5 |   "request": {
 6 |     "method": "tool_invocation",
 7 |     "parameters": {
 8 |       "tool": "get_weather",
 9 |       "arguments": {
10 |         "location": "San Francisco"
11 |       }
12 |     }
13 |   },
14 |   "response": {
15 |     "success": true,
16 |     "result": {
17 |       "location": "San Francisco, CA",
18 |       "temperature": "18°C",
19 |       "condition": "Partly cloudy",
20 |       "humidity": "65%",
21 |       "wind": "12 mph NW"
22 |     },
23 |     "tool_name": "get_weather",
24 |     "arguments": {
25 |       "location": "San Francisco"
26 |     }
27 |   },
28 |   "execution_time": 0.45,
29 |   "gui_state": {
30 |     "connected": true,
31 |     "server_path": "src/mcp_server/server.py",
32 |     "available_tools": ["roll_dice", "get_weather", "get_date"]
33 |   }
34 | }


--------------------------------------------------------------------------------
/examples/mcp-server-client/context/outputs/streamlit_roll_dice_interaction.json:
--------------------------------------------------------------------------------
 1 | {
 2 |   "interaction_type": "streamlit_gui",
 3 |   "tool_name": "roll_dice",
 4 |   "timestamp": "2024-01-15T10:30:00Z",
 5 |   "request": {
 6 |     "method": "tool_invocation",
 7 |     "parameters": {
 8 |       "tool": "roll_dice",
 9 |       "arguments": {
10 |         "notation": "2d6"
11 |       }
12 |     }
13 |   },
14 |   "response": {
15 |     "success": true,
16 |     "result": {
17 |       "values": [3, 5],
18 |       "total": 8,
19 |       "notation": "2d6"
20 |     },
21 |     "tool_name": "roll_dice",
22 |     "arguments": {
23 |       "notation": "2d6"
24 |     }
25 |   },
26 |   "execution_time": 0.15,
27 |   "gui_state": {
28 |     "connected": true,
29 |     "server_path": "src/mcp_server/server.py",
30 |     "available_tools": ["roll_dice", "get_weather", "get_date"]
31 |   }
32 | }


--------------------------------------------------------------------------------
/examples/mcp-server-client/context/templates/feature_base.md:
--------------------------------------------------------------------------------
 1 | # Feature description for: [ Initial template for new features ]
 2 | 
 3 | ## FEATURE
 4 | 
 5 | [Insert your feature here]
 6 | 
 7 | ## EXAMPLES
 8 | 
 9 | [Provide and explain examples that you have in the `/context/examples` folder]
10 | 
11 | ## DOCUMENTATION
12 | 
13 | [List out any documentation (web pages, sources for an MCP server like Crawl4AI RAG, etc.) that will need to be referenced during development]
14 | 
15 | ## OTHER CONSIDERATIONS
16 | 
17 | [Any other considerations or specific requirements - great place to include gotchas that you see AI coding assistants miss with your projects a lot]
18 | 


--------------------------------------------------------------------------------
/examples/mcp-server-client/docker-compose.yml:
--------------------------------------------------------------------------------
 1 | version: '3.8'
 2 | 
 3 | services:
 4 |   server:
 5 |     build: 
 6 |       context: .
 7 |       dockerfile: Dockerfile
 8 |     command: ["python", "-m", "src.main", "server"]
 9 |     ports:
10 |       - "8000:8000"
11 | 
12 |   client:
13 |     build: 
14 |       context: .
15 |       dockerfile: Dockerfile
16 |     command: ["python", "-m", "src.main", "client"]
17 |     depends_on:
18 |       - server
19 | 
20 |   gui:
21 |     build: 
22 |       context: .
23 |       dockerfile: Dockerfile
24 |     command: ["python", "-m", "src.main", "gui"]
25 |     ports:
26 |       - "8501:8501"
27 |     depends_on:
28 |       - server


--------------------------------------------------------------------------------
/examples/mcp-server-client/py.typed:
--------------------------------------------------------------------------------
1 | # PEP 561 – Distributing and Packaging Type Information
2 | # https://peps.python.org/pep-0561/


--------------------------------------------------------------------------------
/examples/mcp-server-client/pyproject.toml:
--------------------------------------------------------------------------------
  1 | [build-system]
  2 | requires = ["hatchling"]
  3 | build-backend = "hatchling.build"
  4 | 
  5 | [project]
  6 | version = "0.0.1"
  7 | name = "mcp-server-client-demo"
  8 | description = "Demonstrates a MCP server-client infrastructure developed with Claude Code CLI using context and custom commands."
  9 | authors = [
 10 |     {name = "qte77", email = "qte@77.gh"}
 11 | ]
 12 | readme = "README.md"
 13 | requires-python = ">=3.13"
 14 | license = "bsd-3-clause"
 15 | dependencies = [
 16 |     "mcp[cli]>=1.10.0",
 17 |     "httpx>=0.25.0",
 18 |     "pydantic>=2.0.0",
 19 |     "streamlit>=1.28.0",
 20 | ]
 21 | 
 22 | # [project.urls]
 23 | # Documentation = ""
 24 | 
 25 | [dependency-groups]
 26 | dev = [
 27 |     "mypy>=1.16.0",
 28 |     "ruff>=0.11.12",
 29 | ]
 30 | test = [
 31 |     "pytest>=7.0.0",
 32 |     "pytest-asyncio>=0.21.0",
 33 |     "pytest-httpx>=0.28.0",
 34 | ]
 35 | docs = [
 36 |     "griffe>=1.5.1",
 37 |     "mkdocs>=1.6.1",
 38 |     "mkdocs-awesome-pages-plugin>=2.9.3",
 39 |     "mkdocs-gen-files>=0.5.0",
 40 |     "mkdocs-literate-nav>=0.6.1",
 41 |     "mkdocs-material>=9.5.44",
 42 |     "mkdocs-section-index>=0.3.8",
 43 |     "mkdocstrings[python]>=0.27.0",
 44 | ]
 45 | 
 46 | [tool.hatch.build.targets.wheel]
 47 | packages = ["src"]
 48 | 
 49 | [tool.uv]
 50 | package = true
 51 | exclude-newer = "2025-07-06T00:00:00Z"
 52 | 
 53 | [tool.ruff]
 54 | target-version = "py313"
 55 | src = ["src", "tests"]
 56 | 
 57 | [tool.ruff.format]
 58 | docstring-code-format = true
 59 | 
 60 | [tool.ruff.lint]
 61 | # ignore = ["E203"]  # Whitespace before ':'
 62 | unfixable = ["B"]
 63 | select = [
 64 |     # pycodestyle
 65 |     "E",
 66 |     # Pyflakes
 67 |     "F",
 68 |     # pyupgrade
 69 |     "UP",
 70 |     # isort
 71 |     "I",
 72 | ]
 73 | 
 74 | [tool.ruff.lint.isort]
 75 | known-first-party = ["src", "tests"]
 76 | 
 77 | [tool.ruff.lint.pydocstyle]
 78 | convention = "google"
 79 | 
 80 | [tool.mypy]
 81 | python_version = "3.13"
 82 | strict = true
 83 | disallow_untyped_defs = true
 84 | disallow_any_generics = true
 85 | warn_redundant_casts = true
 86 | warn_unused_ignores = true
 87 | warn_return_any = true
 88 | warn_unreachable = true
 89 | show_error_codes = true
 90 | namespace_packages = true
 91 | explicit_package_bases = true
 92 | mypy_path = "src"
 93 | 
 94 | [tool.pytest.ini_options]
 95 | addopts = "--strict-markers"
 96 | # "function", "class", "module", "package", "session"
 97 | asyncio_default_fixture_loop_scope = "function"
 98 | pythonpath = ["src"]
 99 | testpaths = ["tests/"]
100 | 
101 | [tool.coverage]
102 | [tool.coverage.run]
103 | include = [
104 |     "tests/**/*.py",
105 | ]
106 | # omit = []
107 | # branch = true
108 | 
109 | [tool.coverage.report]
110 | show_missing = true
111 | exclude_lines = [
112 |     # 'pragma: no cover',
113 |     'raise AssertionError',
114 |     'raise NotImplementedError',
115 | ]
116 | omit = [
117 |     'env/*',
118 |     'venv/*',
119 |     '.venv/*',
120 |     '*/virtualenv/*',
121 |     '*/virtualenvs/*',
122 |     '*/tests/*',
123 | ]
124 | 
125 | [tool.bumpversion]
126 | current_version = "0.0.1"
127 | parse = "(?P<major>\\d+)\\.(?P<minor>\\d+)\\.(?P<patch>\\d+)"
128 | serialize = ["{major}.{minor}.{patch}"]
129 | commit = true
130 | tag = true
131 | allow_dirty = false
132 | ignore_missing_version = false
133 | sign_tags = false
134 | tag_name = "v{new_version}"
135 | tag_message = "Bump version: {current_version} → {new_version}"
136 | message = "Bump version: {current_version} → {new_version}"
137 | commit_args = ""
138 | 
139 | [[tool.bumpversion.files]]
140 | filename = "pyproject.toml"
141 | search = 'version = "{current_version}"'
142 | replace = 'version = "{new_version}"'
143 | 
144 | [[tool.bumpversion.files]]
145 | filename = "src/__init__.py"
146 | search = '__version__ = "{current_version}"'
147 | replace = '__version__ = "{new_version}"'
148 | 
149 | [[tool.bumpversion.files]]
150 | filename = "README.md"
151 | search = "version-{current_version}-58f4c2"
152 | replace = "version-{new_version}-58f4c2"
153 | 
154 | [[tool.bumpversion.files]]
155 | filename = "CHANGELOG.md"
156 | search = """
157 | ## [Unreleased]
158 | """
159 | replace = """
160 | ## [Unreleased]
161 | 
162 | ## [{new_version}] - {now:%Y-%m-%d}
163 | """


--------------------------------------------------------------------------------
/examples/mcp-server-client/src/__init__.py:
--------------------------------------------------------------------------------
1 | """Defines the application version."""
2 | 
3 | __version__ = "0.0.1"
4 | 


--------------------------------------------------------------------------------
/examples/mcp-server-client/src/gui/__init__.py:
--------------------------------------------------------------------------------
1 | """GUI module for MCP client interface."""
2 | 


--------------------------------------------------------------------------------
/examples/mcp-server-client/src/gui/app.py:
--------------------------------------------------------------------------------
 1 | """Main Streamlit application for MCP Tool Showcase."""
 2 | 
 3 | import sys
 4 | from pathlib import Path
 5 | 
 6 | import streamlit as st
 7 | 
 8 | from src.gui.components.connection import ConnectionManager
 9 | from src.gui.components.history import HistoryManager
10 | from src.gui.components.tool_forms import ToolForms
11 | from src.gui.models.gui_models import GUISession
12 | 
13 | # Add project root to Python path
14 | project_root = Path(__file__).parent.parent.parent
15 | sys.path.insert(0, str(project_root))
16 | 
17 | 
18 | def main() -> None:
19 |     """Main Streamlit application entry point."""
20 |     st.set_page_config(
21 |         page_title="MCP Tool Showcase",
22 |         page_icon="🛠️",
23 |         layout="wide",
24 |         initial_sidebar_state="expanded",
25 |     )
26 | 
27 |     # Initialize session state
28 |     if "gui_session" not in st.session_state:
29 |         st.session_state.gui_session = GUISession()
30 | 
31 |     if "mcp_client" not in st.session_state:
32 |         st.session_state.mcp_client = None
33 | 
34 |     # Main layout with sidebar
35 |     with st.sidebar:
36 |         st.title("🛠️ MCP Tool Showcase")
37 |         st.markdown("---")
38 | 
39 |         # Connection management
40 |         connection_manager = ConnectionManager()
41 |         connection_manager.render()
42 | 
43 |     # Main content area
44 |     col1, col2 = st.columns([1, 1])
45 | 
46 |     with col1:
47 |         st.header("Tool Invocation")
48 |         if st.session_state.gui_session.connected:
49 |             tool_forms = ToolForms()
50 |             tool_forms.render()
51 |         else:
52 |             st.info("Please connect to the MCP server first")
53 | 
54 |     with col2:
55 |         st.header("Request/Response")
56 |         if st.session_state.gui_session.interaction_history:
57 |             latest_interaction = st.session_state.gui_session.interaction_history[-1]
58 |             st.subheader("Latest Request")
59 |             st.json(latest_interaction.request_payload)
60 |             st.subheader("Latest Response")
61 |             st.json(latest_interaction.response_payload)
62 |         else:
63 |             st.info("No interactions yet")
64 | 
65 |     # History section
66 |     st.header("Interaction History")
67 |     history_manager = HistoryManager()
68 |     history_manager.render()
69 | 
70 | 
71 | if __name__ == "__main__":
72 |     main()
73 | 


--------------------------------------------------------------------------------
/examples/mcp-server-client/src/gui/components/__init__.py:
--------------------------------------------------------------------------------
1 | """GUI components for reusable interface elements."""
2 | 


--------------------------------------------------------------------------------
/examples/mcp-server-client/src/gui/components/connection.py:
--------------------------------------------------------------------------------
  1 | """Connection management component for MCP server."""
  2 | 
  3 | import logging
  4 | 
  5 | import streamlit as st
  6 | 
  7 | from src.gui.utils.mcp_wrapper import MCPConnectionManager
  8 | 
  9 | logger = logging.getLogger(__name__)
 10 | 
 11 | 
 12 | class ConnectionManager:
 13 |     """Manages MCP server connection in GUI."""
 14 | 
 15 |     def render(self) -> None:
 16 |         """Render connection management interface."""
 17 |         st.subheader("Connection Status")
 18 | 
 19 |         # Display current status
 20 |         if st.session_state.gui_session.connected:
 21 |             st.success("✅ Connected to MCP Server")
 22 |             st.write(f"Server: {st.session_state.gui_session.server_path}")
 23 |             tools = ", ".join(st.session_state.gui_session.available_tools)
 24 |             st.write(f"Available Tools: {tools}")
 25 | 
 26 |             # Health check button
 27 |             if st.button("Health Check"):
 28 |                 self._perform_health_check()
 29 | 
 30 |             # Disconnect button
 31 |             if st.button("Disconnect"):
 32 |                 self._disconnect()
 33 |         else:
 34 |             st.error("❌ Not Connected")
 35 | 
 36 |             # Connection form
 37 |             server_path = st.text_input(
 38 |                 "Server Path",
 39 |                 value=st.session_state.gui_session.server_path,
 40 |                 help="Path to MCP server script",
 41 |             )
 42 | 
 43 |             if st.button("Connect"):
 44 |                 self._connect(server_path)
 45 | 
 46 |     def _connect(self, server_path: str) -> None:
 47 |         """Connect to MCP server."""
 48 |         try:
 49 |             with st.spinner("Connecting to server..."):
 50 |                 # Create connection manager if it doesn't exist
 51 |                 if "mcp_connection_manager" not in st.session_state:
 52 |                     st.session_state.mcp_connection_manager = MCPConnectionManager()
 53 | 
 54 |                 manager = st.session_state.mcp_connection_manager
 55 | 
 56 |                 # Connect to server
 57 |                 success = manager.connect(server_path)
 58 | 
 59 |                 if success:
 60 |                     st.session_state.gui_session.connected = True
 61 |                     st.session_state.gui_session.server_path = server_path
 62 |                     st.session_state.gui_session.available_tools = (
 63 |                         manager.available_tools
 64 |                     )
 65 | 
 66 |                     st.success("Connected successfully!")
 67 |                     st.rerun()
 68 |                 else:
 69 |                     st.error("Failed to connect to server")
 70 | 
 71 |         except Exception as e:
 72 |             logger.error(f"Connection failed: {e}")
 73 |             st.error(f"Connection failed: {str(e)}")
 74 | 
 75 |     def _disconnect(self) -> None:
 76 |         """Disconnect from MCP server."""
 77 |         if "mcp_connection_manager" in st.session_state:
 78 |             try:
 79 |                 manager = st.session_state.mcp_connection_manager
 80 |                 manager.disconnect()
 81 | 
 82 |                 st.session_state.gui_session.connected = False
 83 |                 st.session_state.gui_session.available_tools = []
 84 |                 st.success("Disconnected successfully!")
 85 |                 st.rerun()
 86 |             except Exception as e:
 87 |                 logger.error(f"Disconnect failed: {e}")
 88 |                 st.error(f"Disconnect failed: {str(e)}")
 89 | 
 90 |     def _perform_health_check(self) -> None:
 91 |         """Perform health check on connection."""
 92 |         if "mcp_connection_manager" in st.session_state:
 93 |             try:
 94 |                 manager = st.session_state.mcp_connection_manager
 95 |                 health = manager.health_check()
 96 | 
 97 |                 if health:
 98 |                     st.success("Health check passed!")
 99 |                 else:
100 |                     st.warning("Health check failed - connection may be unhealthy")
101 |             except Exception as e:
102 |                 logger.error(f"Health check error: {e}")
103 |                 st.error(f"Health check error: {str(e)}")
104 | 


--------------------------------------------------------------------------------
/examples/mcp-server-client/src/gui/components/history.py:
--------------------------------------------------------------------------------
 1 | """History management component for interaction tracking."""
 2 | 
 3 | import streamlit as st
 4 | 
 5 | from src.gui.models.gui_models import GUIInteraction
 6 | 
 7 | 
 8 | class HistoryManager:
 9 |     """Manages session history display and interaction."""
10 | 
11 |     def render(self) -> None:
12 |         """Render interaction history interface."""
13 |         history = st.session_state.gui_session.interaction_history
14 | 
15 |         if not history:
16 |             st.info(
17 |                 "No interactions yet. Connect to a server and use tools to see history."
18 |             )
19 |             return
20 | 
21 |         # History controls
22 |         col1, col2 = st.columns([1, 1])
23 | 
24 |         with col1:
25 |             st.write(f"**Total Interactions:** {len(history)}")
26 | 
27 |         with col2:
28 |             if st.button("Clear History"):
29 |                 st.session_state.gui_session.interaction_history = []
30 |                 st.rerun()
31 | 
32 |         # Display history
33 |         for i, interaction in enumerate(reversed(history)):
34 |             self._render_interaction(i, interaction)
35 | 
36 |     def _render_interaction(self, index: int, interaction: GUIInteraction) -> None:
37 |         """Render a single interaction."""
38 |         # Create expander with status indicator
39 |         status_icon = "✅" if interaction.success else "❌"
40 |         timestamp = interaction.timestamp.strftime("%H:%M:%S")
41 | 
42 |         with st.expander(
43 |             f"{status_icon} {interaction.tool_name} - {timestamp}",
44 |             expanded=index == 0,  # Expand latest interaction
45 |         ):
46 |             # Basic info
47 |             col1, col2 = st.columns([1, 1])
48 | 
49 |             with col1:
50 |                 st.write(f"**Tool:** {interaction.tool_name}")
51 |                 st.write(
52 |                     f"**Status:** {'Success' if interaction.success else 'Failed'}"
53 |                 )
54 |                 if interaction.execution_time:
55 |                     st.write(f"**Execution Time:** {interaction.execution_time:.2f}s")
56 | 
57 |             with col2:
58 |                 timestamp_str = interaction.timestamp.strftime("%Y-%m-%d %H:%M:%S")
59 |                 st.write(f"**Timestamp:** {timestamp_str}")
60 |                 if interaction.error_message:
61 |                     st.write(f"**Error:** {interaction.error_message}")
62 | 
63 |             # Request/Response payloads
64 |             req_col, resp_col = st.columns([1, 1])
65 | 
66 |             with req_col:
67 |                 st.subheader("Request")
68 |                 st.json(interaction.request_payload)
69 | 
70 |             with resp_col:
71 |                 st.subheader("Response")
72 |                 st.json(interaction.response_payload)
73 | 


--------------------------------------------------------------------------------
/examples/mcp-server-client/src/gui/components/tool_forms.py:
--------------------------------------------------------------------------------
  1 | """Tool-specific form components for MCP tools."""
  2 | 
  3 | import logging
  4 | import re
  5 | import time
  6 | 
  7 | import streamlit as st
  8 | 
  9 | from src.gui.models.gui_models import GUIInteraction
 10 | 
 11 | logger = logging.getLogger(__name__)
 12 | 
 13 | 
 14 | class ToolForms:
 15 |     """Manages tool-specific form interfaces."""
 16 | 
 17 |     def render(self) -> None:
 18 |         """Render tool selection and forms."""
 19 |         available_tools = st.session_state.gui_session.available_tools
 20 | 
 21 |         if not available_tools:
 22 |             st.warning("No tools available")
 23 |             return
 24 | 
 25 |         # Tool selection
 26 |         selected_tool = st.selectbox(
 27 |             "Select Tool", options=available_tools, help="Choose a tool to invoke"
 28 |         )
 29 | 
 30 |         # Tool-specific forms
 31 |         if selected_tool == "roll_dice":
 32 |             self._render_dice_form()
 33 |         elif selected_tool == "get_weather":
 34 |             self._render_weather_form()
 35 |         elif selected_tool == "get_date":
 36 |             self._render_date_form()
 37 | 
 38 |     def _render_dice_form(self) -> None:
 39 |         """Render dice rolling form."""
 40 |         with st.form("dice_form"):
 41 |             st.subheader("🎲 Roll Dice")
 42 | 
 43 |             notation = st.text_input(
 44 |                 "Dice Notation",
 45 |                 value="2d6",
 46 |                 help="Enter dice notation (e.g., 2d6, 1d20, 3d10)",
 47 |             )
 48 | 
 49 |             # Help text with examples
 50 |             st.caption("Examples: 1d20 (single 20-sided die), 3d6 (three 6-sided dice)")
 51 | 
 52 |             submitted = st.form_submit_button("Roll Dice")
 53 | 
 54 |             if submitted:
 55 |                 if self._validate_dice_notation(notation):
 56 |                     self._execute_tool("roll_dice", {"notation": notation})
 57 |                 else:
 58 |                     st.error("Invalid dice notation. Use format like '2d6' or '1d20'")
 59 | 
 60 |     def _render_weather_form(self) -> None:
 61 |         """Render weather lookup form."""
 62 |         with st.form("weather_form"):
 63 |             st.subheader("🌤️ Get Weather")
 64 | 
 65 |             location = st.text_input(
 66 |                 "Location",
 67 |                 value="San Francisco",
 68 |                 help="Enter city name or coordinates (lat,lon)",
 69 |             )
 70 | 
 71 |             # Common location examples
 72 |             st.caption("Examples: London, New York, 37.7749,-122.4194")
 73 | 
 74 |             submitted = st.form_submit_button("Get Weather")
 75 | 
 76 |             if submitted:
 77 |                 if location.strip():
 78 |                     self._execute_tool("get_weather", {"location": location})
 79 |                 else:
 80 |                     st.error("Please enter a location")
 81 | 
 82 |     def _render_date_form(self) -> None:
 83 |         """Render date/time lookup form."""
 84 |         with st.form("date_form"):
 85 |             st.subheader("🕐 Get Date & Time")
 86 | 
 87 |             timezone = st.selectbox(
 88 |                 "Timezone",
 89 |                 options=[
 90 |                     "UTC",
 91 |                     "America/New_York",
 92 |                     "America/Los_Angeles",
 93 |                     "Europe/London",
 94 |                     "Asia/Tokyo",
 95 |                     "Australia/Sydney",
 96 |                 ],
 97 |                 help="Select timezone or enter custom IANA timezone",
 98 |             )
 99 | 
100 |             custom_timezone = st.text_input(
101 |                 "Custom Timezone (optional)",
102 |                 placeholder="e.g., America/Chicago",
103 |                 help="Enter custom IANA timezone identifier",
104 |             )
105 | 
106 |             submitted = st.form_submit_button("Get Date & Time")
107 | 
108 |             if submitted:
109 |                 tz = custom_timezone.strip() if custom_timezone.strip() else timezone
110 |                 self._execute_tool("get_date", {"timezone": tz})
111 | 
112 |     def _execute_tool(self, tool_name: str, arguments: dict[str, str]) -> None:
113 |         """Execute tool and update GUI state."""
114 |         if "mcp_connection_manager" not in st.session_state:
115 |             st.error("Not connected to server")
116 |             return
117 | 
118 |         try:
119 |             with st.spinner(f"Executing {tool_name}..."):
120 |                 # Time execution for performance metrics
121 |                 start_time = time.time()
122 | 
123 |                 # Use connection manager
124 |                 manager = st.session_state.mcp_connection_manager
125 |                 result = manager.invoke_tool(tool_name, arguments)
126 | 
127 |                 execution_time = time.time() - start_time
128 | 
129 |                 # Create interaction record
130 |                 interaction = GUIInteraction(
131 |                     tool_name=tool_name,
132 |                     arguments=arguments,
133 |                     request_payload={"tool": tool_name, "arguments": arguments},
134 |                     response_payload=result,
135 |                     success=result.get("success", False),
136 |                     error_message=result.get("error")
137 |                     if not result.get("success", False)
138 |                     else None,
139 |                     execution_time=execution_time,
140 |                 )
141 | 
142 |                 # Update session state
143 |                 st.session_state.gui_session.interaction_history.append(interaction)
144 | 
145 |                 # Display result
146 |                 if result.get("success", False):
147 |                     st.success(f"✅ {tool_name} executed successfully!")
148 |                     st.json(result)
149 |                 else:
150 |                     st.error(
151 |                         f"❌ {tool_name} failed: {result.get('error', 'Unknown error')}"
152 |                     )
153 | 
154 |                 st.rerun()
155 | 
156 |         except Exception as e:
157 |             logger.error(f"Tool execution error: {e}")
158 |             st.error(f"Execution error: {str(e)}")
159 | 
160 |     def _validate_dice_notation(self, notation: str) -> bool:
161 |         """Validate dice notation format."""
162 |         pattern = r"^(\d+)d(\d+)$"
163 |         return bool(re.match(pattern, notation.strip().lower()))
164 | 


--------------------------------------------------------------------------------
/examples/mcp-server-client/src/gui/models/__init__.py:
--------------------------------------------------------------------------------
1 | """GUI models for state management and data validation."""
2 | 


--------------------------------------------------------------------------------
/examples/mcp-server-client/src/gui/models/gui_models.py:
--------------------------------------------------------------------------------
 1 | """GUI-specific models for state management and type safety."""
 2 | 
 3 | from datetime import datetime
 4 | from typing import Any
 5 | 
 6 | from pydantic import BaseModel, Field
 7 | 
 8 | 
 9 | class GUIInteraction(BaseModel):
10 |     """Single tool interaction record for GUI history."""
11 | 
12 |     timestamp: datetime = Field(default_factory=datetime.now)
13 |     tool_name: str
14 |     arguments: dict[str, Any]
15 |     request_payload: dict[str, Any]
16 |     response_payload: dict[str, Any]
17 |     success: bool
18 |     error_message: str | None = None
19 |     execution_time: float | None = None
20 | 
21 | 
22 | class GUISession(BaseModel):
23 |     """GUI session state management."""
24 | 
25 |     connected: bool = False
26 |     server_path: str = "src/mcp_server/server.py"
27 |     available_tools: list[str] = Field(default_factory=list)
28 |     interaction_history: list[GUIInteraction] = Field(default_factory=list)
29 |     current_tool: str | None = None
30 | 
31 | 
32 | class ConnectionStatus(BaseModel):
33 |     """Connection status information."""
34 | 
35 |     connected: bool = False
36 |     server_path: str
37 |     last_health_check: datetime | None = None
38 |     available_tools: list[str] = Field(default_factory=list)
39 |     error_message: str | None = None
40 | 


--------------------------------------------------------------------------------
/examples/mcp-server-client/src/gui/utils/__init__.py:
--------------------------------------------------------------------------------
1 | """GUI utilities for formatting and validation."""
2 | 


--------------------------------------------------------------------------------
/examples/mcp-server-client/src/gui/utils/async_helper.py:
--------------------------------------------------------------------------------
 1 | """Async helper utilities for Streamlit GUI."""
 2 | 
 3 | import asyncio
 4 | import threading
 5 | from collections.abc import Awaitable
 6 | from typing import TypeVar
 7 | 
 8 | T = TypeVar("T")
 9 | 
10 | 
11 | def run_async(coro: Awaitable[T]) -> T:
12 |     """Run an async function in Streamlit context.
13 | 
14 |     This handles the case where Streamlit might already have an event loop running.
15 | 
16 |     Args:
17 |         coro: The coroutine to run
18 | 
19 |     Returns:
20 |         The result of the coroutine
21 |     """
22 |     try:
23 |         # Try to get the current event loop
24 |         # loop = asyncio.get_running_loop()
25 | 
26 |         # If we're already in an event loop, we need to run in a new thread
27 |         # with its own event loop
28 |         result = None
29 |         exception = None
30 | 
31 |         def run_in_new_loop():
32 |             nonlocal result, exception
33 |             try:
34 |                 new_loop = asyncio.new_event_loop()
35 |                 asyncio.set_event_loop(new_loop)
36 |                 try:
37 |                     result = new_loop.run_until_complete(coro)
38 |                 finally:
39 |                     new_loop.close()
40 |             except Exception as e:
41 |                 exception = e
42 | 
43 |         thread = threading.Thread(target=run_in_new_loop)
44 |         thread.start()
45 |         thread.join()
46 | 
47 |         if exception:
48 |             raise exception
49 |         return result
50 | 
51 |     except RuntimeError:
52 |         # No event loop running, can use asyncio.run directly
53 |         return asyncio.run(coro)
54 | 
55 | 
56 | class AsyncContextManager:
57 |     """Helper to manage async context across multiple calls."""
58 | 
59 |     def __init__(self):
60 |         self._client = None
61 |         self._loop = None
62 |         self._thread = None
63 | 
64 |     def run_async(self, coro: Awaitable[T]) -> T:
65 |         """Run async function maintaining context."""
66 |         return run_async(coro)
67 | 


--------------------------------------------------------------------------------
/examples/mcp-server-client/src/gui/utils/formatting.py:
--------------------------------------------------------------------------------
 1 | """Formatting utilities for GUI display."""
 2 | 
 3 | import json
 4 | from typing import Any
 5 | 
 6 | 
 7 | def format_json_for_display(data: Any, indent: int = 2) -> str:
 8 |     """Format JSON data for display with proper indentation.
 9 | 
10 |     Args:
11 |         data: Data to format as JSON
12 |         indent: Number of spaces for indentation
13 | 
14 |     Returns:
15 |         Formatted JSON string
16 |     """
17 |     try:
18 |         return json.dumps(data, indent=indent, ensure_ascii=False)
19 |     except (TypeError, ValueError) as e:
20 |         return f"Error formatting JSON: {str(e)}"
21 | 
22 | 
23 | def format_error_message(error: str) -> str:
24 |     """Format error messages for user-friendly display.
25 | 
26 |     Args:
27 |         error: Raw error message
28 | 
29 |     Returns:
30 |         Formatted error message
31 |     """
32 |     # Remove common Python error prefixes
33 |     error = error.replace("Exception: ", "")
34 |     error = error.replace("Error: ", "")
35 | 
36 |     # Capitalize first letter
37 |     if error:
38 |         error = error[0].upper() + error[1:]
39 | 
40 |     return error
41 | 
42 | 
43 | def format_execution_time(seconds: float) -> str:
44 |     """Format execution time for display.
45 | 
46 |     Args:
47 |         seconds: Execution time in seconds
48 | 
49 |     Returns:
50 |         Formatted time string
51 |     """
52 |     if seconds < 1:
53 |         return f"{seconds * 1000:.0f}ms"
54 |     elif seconds < 60:
55 |         return f"{seconds:.2f}s"
56 |     else:
57 |         minutes = int(seconds // 60)
58 |         remaining_seconds = seconds % 60
59 |         return f"{minutes}m {remaining_seconds:.1f}s"
60 | 
61 | 
62 | def truncate_text(text: str, max_length: int = 100) -> str:
63 |     """Truncate text with ellipsis if too long.
64 | 
65 |     Args:
66 |         text: Text to truncate
67 |         max_length: Maximum length before truncation
68 | 
69 |     Returns:
70 |         Truncated text with ellipsis if needed
71 |     """
72 |     if len(text) <= max_length:
73 |         return text
74 |     return text[: max_length - 3] + "..."
75 | 


--------------------------------------------------------------------------------
/examples/mcp-server-client/src/gui/utils/validation.py:
--------------------------------------------------------------------------------
  1 | """Validation utilities for GUI input."""
  2 | 
  3 | import re
  4 | 
  5 | 
  6 | def validate_dice_notation(notation: str) -> bool:
  7 |     """Validate dice notation format.
  8 | 
  9 |     Args:
 10 |         notation: Dice notation string (e.g., "2d6", "1d20")
 11 | 
 12 |     Returns:
 13 |         True if valid, False otherwise
 14 |     """
 15 |     if not notation or not isinstance(notation, str):
 16 |         return False
 17 | 
 18 |     # Pattern: number + 'd' + number
 19 |     pattern = r"^(\d+)d(\d+)$"
 20 |     match = re.match(pattern, notation.strip().lower())
 21 | 
 22 |     if not match:
 23 |         return False
 24 | 
 25 |     # Check reasonable limits
 26 |     num_dice = int(match.group(1))
 27 |     num_sides = int(match.group(2))
 28 | 
 29 |     # Validate ranges
 30 |     if num_dice < 1 or num_dice > 100:
 31 |         return False
 32 |     if num_sides < 2 or num_sides > 1000:
 33 |         return False
 34 | 
 35 |     return True
 36 | 
 37 | 
 38 | def validate_location(location: str) -> bool:
 39 |     """Validate location input for weather lookup.
 40 | 
 41 |     Args:
 42 |         location: Location string (city name or coordinates)
 43 | 
 44 |     Returns:
 45 |         True if valid, False otherwise
 46 |     """
 47 |     if not location or not isinstance(location, str):
 48 |         return False
 49 | 
 50 |     location = location.strip()
 51 | 
 52 |     # Check for coordinates format (lat,lon)
 53 |     coord_pattern = r"^-?\d+\.?\d*,-?\d+\.?\d*$"
 54 |     if re.match(coord_pattern, location):
 55 |         return True
 56 | 
 57 |     # Check for city name (at least 2 characters, letters and spaces)
 58 |     city_pattern = r"^[a-zA-Z\s]{2,}$"
 59 |     if re.match(city_pattern, location):
 60 |         return True
 61 | 
 62 |     return False
 63 | 
 64 | 
 65 | def validate_timezone(timezone: str) -> bool:
 66 |     """Validate timezone identifier.
 67 | 
 68 |     Args:
 69 |         timezone: Timezone string (IANA format)
 70 | 
 71 |     Returns:
 72 |         True if valid, False otherwise
 73 |     """
 74 |     if not timezone or not isinstance(timezone, str):
 75 |         return False
 76 | 
 77 |     timezone = timezone.strip()
 78 | 
 79 |     # Common timezone patterns
 80 |     common_timezones = [
 81 |         "UTC",
 82 |         "GMT",
 83 |         "EST",
 84 |         "PST",
 85 |         "CST",
 86 |         "MST",
 87 |         "America/New_York",
 88 |         "America/Los_Angeles",
 89 |         "America/Chicago",
 90 |         "Europe/London",
 91 |         "Europe/Paris",
 92 |         "Asia/Tokyo",
 93 |         "Australia/Sydney",
 94 |     ]
 95 | 
 96 |     if timezone in common_timezones:
 97 |         return True
 98 | 
 99 |     # IANA timezone format: Area/City or Area/Region/City
100 |     iana_pattern = r"^[A-Za-z_]+/[A-Za-z_]+(?:/[A-Za-z_]+)?$"
101 |     return bool(re.match(iana_pattern, timezone))
102 | 
103 | 
104 | def validate_server_path(path: str) -> str | None:
105 |     """Validate server path and return error message if invalid.
106 | 
107 |     Args:
108 |         path: Server path string
109 | 
110 |     Returns:
111 |         Error message if invalid, None if valid
112 |     """
113 |     if not path or not isinstance(path, str):
114 |         return "Server path is required"
115 | 
116 |     path = path.strip()
117 | 
118 |     if not path:
119 |         return "Server path cannot be empty"
120 | 
121 |     if not path.endswith(".py"):
122 |         return "Server path must be a Python file (.py)"
123 | 
124 |     # Basic path validation
125 |     if ".." in path or path.startswith("/"):
126 |         return "Server path should be relative to project root"
127 | 
128 |     return None
129 | 


--------------------------------------------------------------------------------
/examples/mcp-server-client/src/mcp_client/__init__.py:
--------------------------------------------------------------------------------
1 | """MCP Client implementation for tool invocation."""
2 | 
3 | from .cli import MCPClientCLI
4 | from .client import MCPClient
5 | 
6 | __all__ = ["MCPClient", "MCPClientCLI"]
7 | 


--------------------------------------------------------------------------------
/examples/mcp-server-client/src/mcp_client/client.py:
--------------------------------------------------------------------------------
  1 | """Main MCP client class for tool invocation."""
  2 | 
  3 | import logging
  4 | from typing import Any
  5 | 
  6 | from .models.responses import ClientToolResult
  7 | from .transport import MCPTransport
  8 | 
  9 | # Configure logging
 10 | logger = logging.getLogger(__name__)
 11 | 
 12 | 
 13 | class MCPClient:
 14 |     """MCP client for connecting to servers and invoking tools."""
 15 | 
 16 |     def __init__(self, server_path: str):
 17 |         """Initialize MCP client.
 18 | 
 19 |         Args:
 20 |             server_path: Path to the MCP server script
 21 |         """
 22 |         self.server_path = server_path
 23 |         self.transport = MCPTransport(server_path)
 24 |         self._connected = False
 25 | 
 26 |     @property
 27 |     def connected(self) -> bool:
 28 |         """Check if client is connected to server."""
 29 |         return self._connected and self.transport.connected
 30 | 
 31 |     @property
 32 |     def available_tools(self) -> list[str]:
 33 |         """Get list of available tools."""
 34 |         return self.transport.available_tools
 35 | 
 36 |     async def connect(self) -> None:
 37 |         """Connect to MCP server.
 38 | 
 39 |         Raises:
 40 |             FileNotFoundError: If server script doesn't exist
 41 |             ConnectionError: If connection fails
 42 |             ValueError: If server script type is not supported
 43 |         """
 44 |         logger.info(f"Connecting to MCP server: {self.server_path}")
 45 | 
 46 |         try:
 47 |             await self.transport.connect()
 48 |             self._connected = True
 49 |             logger.info(
 50 |                 f"Connected successfully. Available tools: {self.available_tools}"
 51 |             )
 52 |         except Exception as e:
 53 |             logger.error(f"Failed to connect: {e}")
 54 |             raise
 55 | 
 56 |     async def disconnect(self) -> None:
 57 |         """Disconnect from MCP server."""
 58 |         logger.info("Disconnecting from MCP server")
 59 |         await self.transport.disconnect()
 60 |         self._connected = False
 61 | 
 62 |     async def invoke_tool(
 63 |         self, tool_name: str, arguments: dict[str, Any]
 64 |     ) -> ClientToolResult:
 65 |         """Invoke a tool on the connected server.
 66 | 
 67 |         Args:
 68 |             tool_name: Name of the tool to invoke
 69 |             arguments: Arguments to pass to the tool
 70 | 
 71 |         Returns:
 72 |             ClientToolResult with success status and result or error
 73 |         """
 74 |         logger.info(f"Invoking tool: {tool_name} with arguments: {arguments}")
 75 | 
 76 |         # Check if connected
 77 |         if not self.connected:
 78 |             error_msg = "Not connected to server"
 79 |             logger.error(error_msg)
 80 |             return ClientToolResult(
 81 |                 success=False,
 82 |                 result=None,
 83 |                 error=error_msg,
 84 |                 tool_name=tool_name,
 85 |                 arguments=arguments,
 86 |             )
 87 | 
 88 |         # Check if tool is available
 89 |         if tool_name not in self.available_tools:
 90 |             error_msg = (
 91 |                 f"Tool '{tool_name}' not available. "
 92 |                 f"Available tools: {self.available_tools}"
 93 |             )
 94 |             logger.error(error_msg)
 95 |             return ClientToolResult(
 96 |                 success=False,
 97 |                 result=None,
 98 |                 error=error_msg,
 99 |                 tool_name=tool_name,
100 |                 arguments=arguments,
101 |             )
102 | 
103 |         try:
104 |             # Call the tool through transport
105 |             result = await self.transport.call_tool(tool_name, arguments)
106 | 
107 |             # Process the result
108 |             logger.info(f"Tool '{tool_name}' executed successfully")
109 |             return ClientToolResult(
110 |                 success=True,
111 |                 result=result,
112 |                 error=None,
113 |                 tool_name=tool_name,
114 |                 arguments=arguments,
115 |             )
116 | 
117 |         except Exception as e:
118 |             error_msg = f"Tool execution failed: {str(e)}"
119 |             logger.error(error_msg)
120 |             return ClientToolResult(
121 |                 success=False,
122 |                 result=None,
123 |                 error=error_msg,
124 |                 tool_name=tool_name,
125 |                 arguments=arguments,
126 |             )
127 | 
128 |     async def health_check(self) -> bool:
129 |         """Check if connection is healthy.
130 | 
131 |         Returns:
132 |             True if connection is healthy, False otherwise
133 |         """
134 |         if not self.connected:
135 |             return False
136 | 
137 |         return await self.transport.health_check()
138 | 
139 |     async def __aenter__(self) -> "MCPClient":
140 |         """Async context manager entry."""
141 |         await self.connect()
142 |         return self
143 | 
144 |     async def __aexit__(self, exc_type: Any, exc_val: Any, exc_tb: Any) -> None:
145 |         """Async context manager exit."""
146 |         await self.disconnect()
147 | 
148 | 
149 | class MCPClientError(Exception):
150 |     """Base exception for MCP client errors."""
151 | 
152 |     pass
153 | 
154 | 
155 | class MCPConnectionError(MCPClientError):
156 |     """Raised when connection to MCP server fails."""
157 | 
158 |     pass
159 | 
160 | 
161 | class MCPToolError(MCPClientError):
162 |     """Raised when tool execution fails."""
163 | 
164 |     pass
165 | 


--------------------------------------------------------------------------------
/examples/mcp-server-client/src/mcp_client/models/__init__.py:
--------------------------------------------------------------------------------
1 | """MCP Client models for type safety and validation."""
2 | 
3 | from .responses import ClientToolResult, MCPToolResponse
4 | 
5 | __all__ = ["ClientToolResult", "MCPToolResponse"]
6 | 


--------------------------------------------------------------------------------
/examples/mcp-server-client/src/mcp_client/models/responses.py:
--------------------------------------------------------------------------------
 1 | """Client-specific response models for MCP tool invocation."""
 2 | 
 3 | from typing import Any
 4 | 
 5 | from pydantic import BaseModel, Field
 6 | 
 7 | 
 8 | class MCPToolResponse(BaseModel):
 9 |     """Response from MCP tool execution."""
10 | 
11 |     content: list[dict[str, Any]] = Field(..., description="Response content")
12 |     isError: bool = Field(False, description="Whether response indicates error")
13 | 
14 | 
15 | class ClientToolResult(BaseModel):
16 |     """Processed tool result for client consumption."""
17 | 
18 |     success: bool = Field(..., description="Whether tool execution was successful")
19 |     result: Any | None = Field(None, description="Tool execution result")
20 |     error: str | None = Field(None, description="Error message if execution failed")
21 |     tool_name: str = Field(..., description="Name of the tool that was executed")
22 |     arguments: dict[str, Any] = Field(..., description="Arguments passed to the tool")
23 | 
24 | 
25 | class ClientSession(BaseModel):
26 |     """Client session information."""
27 | 
28 |     server_path: str = Field(..., description="Path to the MCP server script")
29 |     connected: bool = Field(False, description="Whether client is connected to server")
30 |     available_tools: list[str] = Field(
31 |         default_factory=list, description="List of available tools"
32 |     )
33 | 


--------------------------------------------------------------------------------
/examples/mcp-server-client/src/mcp_client/transport.py:
--------------------------------------------------------------------------------
  1 | """Transport layer for MCP client connections."""
  2 | 
  3 | import os
  4 | from contextlib import AsyncExitStack
  5 | from typing import Any
  6 | 
  7 | from mcp import ClientSession, StdioServerParameters
  8 | from mcp.client.stdio import stdio_client
  9 | 
 10 | 
 11 | class MCPTransport:
 12 |     """Handles MCP server connections via stdio transport."""
 13 | 
 14 |     def __init__(self, server_path: str):
 15 |         """Initialize transport with server path.
 16 | 
 17 |         Args:
 18 |             server_path: Path to the MCP server script
 19 |         """
 20 |         self.server_path = server_path
 21 |         self.session: ClientSession | None = None
 22 |         self.exit_stack: AsyncExitStack | None = None
 23 |         self.connected = False
 24 |         self.available_tools: list[str] = []
 25 | 
 26 |     async def connect(self) -> None:
 27 |         """Connect to MCP server via stdio transport.
 28 | 
 29 |         Raises:
 30 |             FileNotFoundError: If server script doesn't exist
 31 |             ConnectionError: If connection fails
 32 |             ValueError: If server script type is not supported
 33 |         """
 34 |         # Validate server script exists
 35 |         if not os.path.exists(self.server_path):
 36 |             raise FileNotFoundError(f"Server script not found: {self.server_path}")
 37 | 
 38 |         # Determine server type and command
 39 |         if self.server_path.endswith(".py"):
 40 |             # Use uv run python for proper environment
 41 |             command = "uv"
 42 |             args = ["run", "python", self.server_path]
 43 |         elif self.server_path.endswith(".js"):
 44 |             command = "node"
 45 |             args = [self.server_path]
 46 |         else:
 47 |             raise ValueError(f"Unsupported server script type: {self.server_path}")
 48 | 
 49 |         # Create server parameters
 50 |         server_params = StdioServerParameters(command=command, args=args, env=None)
 51 | 
 52 |         try:
 53 |             # Setup resource management
 54 |             self.exit_stack = AsyncExitStack()
 55 | 
 56 |             # Connect to server
 57 |             read, write = await self.exit_stack.enter_async_context(
 58 |                 stdio_client(server_params)
 59 |             )
 60 | 
 61 |             # Create session
 62 |             self.session = await self.exit_stack.enter_async_context(
 63 |                 ClientSession(read, write)
 64 |             )
 65 | 
 66 |             # Initialize connection
 67 |             await self.session.initialize()
 68 | 
 69 |             # Discover available tools
 70 |             tools_response = await self.session.list_tools()
 71 |             self.available_tools = [tool.name for tool in tools_response.tools]
 72 | 
 73 |             self.connected = True
 74 | 
 75 |         except Exception as e:
 76 |             # Clean up on connection failure
 77 |             if self.exit_stack:
 78 |                 await self.exit_stack.aclose()
 79 |                 self.exit_stack = None
 80 |             raise ConnectionError(f"Failed to connect to server: {e}")
 81 | 
 82 |     async def disconnect(self) -> None:
 83 |         """Disconnect from MCP server."""
 84 |         if self.exit_stack:
 85 |             await self.exit_stack.aclose()
 86 |             self.exit_stack = None
 87 | 
 88 |         self.session = None
 89 |         self.connected = False
 90 |         self.available_tools = []
 91 | 
 92 |     async def call_tool(self, tool_name: str, arguments: dict[str, Any]) -> Any:
 93 |         """Call a tool on the connected server.
 94 | 
 95 |         Args:
 96 |             tool_name: Name of the tool to call
 97 |             arguments: Arguments to pass to the tool
 98 | 
 99 |         Returns:
100 |             Tool response content
101 | 
102 |         Raises:
103 |             RuntimeError: If not connected to server
104 |             ValueError: If tool is not available
105 |         """
106 |         if not self.connected or not self.session:
107 |             raise RuntimeError("Not connected to server")
108 | 
109 |         if tool_name not in self.available_tools:
110 |             raise ValueError(
111 |                 f"Tool '{tool_name}' not available. "
112 |                 f"Available tools: {self.available_tools}"
113 |             )
114 | 
115 |         # Call the tool
116 |         result = await self.session.call_tool(tool_name, arguments)
117 |         return result
118 | 
119 |     async def health_check(self) -> bool:
120 |         """Check if connection is healthy.
121 | 
122 |         Returns:
123 |             True if connection is healthy, False otherwise
124 |         """
125 |         if not self.connected or not self.session:
126 |             return False
127 | 
128 |         try:
129 |             # Try to list tools as a health check
130 |             await self.session.list_tools()
131 |             return True
132 |         except Exception:
133 |             return False
134 | 
135 |     async def __aenter__(self) -> "MCPTransport":
136 |         """Async context manager entry."""
137 |         await self.connect()
138 |         return self
139 | 
140 |     async def __aexit__(self, exc_type: Any, exc_val: Any, exc_tb: Any) -> None:
141 |         """Async context manager exit."""
142 |         await self.disconnect()
143 | 


--------------------------------------------------------------------------------
/examples/mcp-server-client/src/mcp_server/__init__.py:
--------------------------------------------------------------------------------
1 | """MCP server package."""
2 | 
3 | from .server import mcp, run_server
4 | 
5 | __all__ = ["mcp", "run_server"]
6 | 


--------------------------------------------------------------------------------
/examples/mcp-server-client/src/mcp_server/models/__init__.py:
--------------------------------------------------------------------------------
 1 | """MCP server data models."""
 2 | 
 3 | from .requests import (
 4 |     DateTimeRequest,
 5 |     DateTimeResponse,
 6 |     DiceRollRequest,
 7 |     DiceRollResponse,
 8 |     MCPError,
 9 |     MCPRequest,
10 |     MCPResponse,
11 |     ToolCallRequest,
12 |     ToolCallResponse,
13 |     WeatherRequest,
14 |     WeatherResponse,
15 | )
16 | 
17 | __all__ = [
18 |     "DateTimeRequest",
19 |     "DateTimeResponse",
20 |     "DiceRollRequest",
21 |     "DiceRollResponse",
22 |     "MCPError",
23 |     "MCPRequest",
24 |     "MCPResponse",
25 |     "ToolCallRequest",
26 |     "ToolCallResponse",
27 |     "WeatherRequest",
28 |     "WeatherResponse",
29 | ]
30 | 


--------------------------------------------------------------------------------
/examples/mcp-server-client/src/mcp_server/models/requests.py:
--------------------------------------------------------------------------------
  1 | """Pydantic models for MCP server request/response validation."""
  2 | 
  3 | import re
  4 | from typing import Any
  5 | 
  6 | from pydantic import BaseModel, Field, field_validator
  7 | 
  8 | 
  9 | class MCPRequest(BaseModel):
 10 |     """Base MCP request structure following JSON-RPC 2.0 format."""
 11 | 
 12 |     jsonrpc: str = "2.0"
 13 |     method: str
 14 |     params: dict | None = None
 15 |     id: str | int | None = None
 16 | 
 17 | 
 18 | class MCPResponse(BaseModel):
 19 |     """Base MCP response structure following JSON-RPC 2.0 format."""
 20 | 
 21 |     jsonrpc: str = "2.0"
 22 |     id: str | int | None = None
 23 |     result: Any | None = None
 24 |     error: dict | None = None
 25 | 
 26 | 
 27 | class MCPError(BaseModel):
 28 |     """MCP error structure."""
 29 | 
 30 |     code: int
 31 |     message: str
 32 |     data: dict | None = None
 33 | 
 34 | 
 35 | class DiceRollRequest(BaseModel):
 36 |     """Dice roll tool request with notation validation."""
 37 | 
 38 |     notation: str = Field(..., description="Dice notation like '2d6' or '1d20'")
 39 | 
 40 |     @field_validator("notation")
 41 |     @classmethod
 42 |     def validate_notation(cls, v: str) -> str:
 43 |         """Validate dice notation format."""
 44 |         if not isinstance(v, str):
 45 |             raise ValueError("Notation must be a string")
 46 | 
 47 |         # Remove spaces and convert to lowercase
 48 |         notation = v.strip().lower()
 49 | 
 50 |         # Validate format using regex
 51 |         pattern = re.compile(r"^(\d+)d(\d+)$")
 52 |         match = pattern.match(notation)
 53 | 
 54 |         if not match:
 55 |             raise ValueError(
 56 |                 f"Invalid dice notation: '{v}'. "
 57 |                 f"Expected format: 'XdY' (e.g., '2d6', '1d20')"
 58 |             )
 59 | 
 60 |         dice_count = int(match.group(1))
 61 |         sides = int(match.group(2))
 62 | 
 63 |         # Validate reasonable limits
 64 |         if dice_count <= 0:
 65 |             raise ValueError("Dice count must be greater than 0")
 66 |         if dice_count > 100:
 67 |             raise ValueError("Dice count must not exceed 100")
 68 | 
 69 |         if sides <= 0:
 70 |             raise ValueError("Number of sides must be greater than 0")
 71 |         if sides > 1000:
 72 |             raise ValueError("Number of sides must not exceed 1000")
 73 | 
 74 |         return notation
 75 | 
 76 | 
 77 | class DiceRollResponse(BaseModel):
 78 |     """Dice roll tool response."""
 79 | 
 80 |     values: list[int] = Field(..., description="Individual dice roll results")
 81 |     total: int = Field(..., description="Sum of all dice rolls")
 82 |     notation: str = Field(..., description="Original dice notation")
 83 | 
 84 | 
 85 | class WeatherRequest(BaseModel):
 86 |     """Weather tool request with location validation."""
 87 | 
 88 |     location: str = Field(..., description="City name or coordinates (lat,lon)")
 89 | 
 90 |     @field_validator("location")
 91 |     @classmethod
 92 |     def validate_location(cls, v: str) -> str:
 93 |         """Validate location format."""
 94 |         if not isinstance(v, str):
 95 |             raise ValueError("Location must be a string")
 96 | 
 97 |         location = v.strip()
 98 |         if not location:
 99 |             raise ValueError("Location cannot be empty")
100 | 
101 |         return location
102 | 
103 | 
104 | class WeatherResponse(BaseModel):
105 |     """Weather tool response."""
106 | 
107 |     location: str = Field(..., description="Requested location")
108 |     temperature: float = Field(..., description="Temperature in Celsius")
109 |     condition: str = Field(..., description="Weather condition description")
110 |     wind_speed: float = Field(..., description="Wind speed in km/h")
111 |     humidity: float | None = Field(None, description="Humidity percentage")
112 |     timestamp: str | None = Field(None, description="Data timestamp")
113 | 
114 | 
115 | class DateTimeRequest(BaseModel):
116 |     """Date/time tool request with timezone validation."""
117 | 
118 |     timezone: str = Field(
119 |         "UTC", description="Timezone identifier (e.g., 'UTC', 'America/New_York')"
120 |     )
121 | 
122 |     @field_validator("timezone")
123 |     @classmethod
124 |     def validate_timezone(cls, v: str) -> str:
125 |         """Validate timezone format."""
126 |         if not isinstance(v, str):
127 |             raise ValueError("Timezone must be a string")
128 | 
129 |         timezone = v.strip()
130 |         if not timezone:
131 |             raise ValueError("Timezone cannot be empty")
132 | 
133 |         return timezone
134 | 
135 | 
136 | class DateTimeResponse(BaseModel):
137 |     """Date/time tool response."""
138 | 
139 |     datetime: str = Field(..., description="ISO 8601 formatted date/time")
140 |     timezone: str = Field(..., description="Timezone identifier")
141 |     timestamp: float = Field(..., description="Unix timestamp")
142 | 
143 | 
144 | class ToolCallRequest(BaseModel):
145 |     """Generic tool call request."""
146 | 
147 |     name: str = Field(..., description="Tool name")
148 |     arguments: dict = Field(..., description="Tool arguments")
149 | 
150 | 
151 | class ToolCallResponse(BaseModel):
152 |     """Generic tool call response."""
153 | 
154 |     content: list[dict] = Field(..., description="Tool response content")
155 |     isError: bool = Field(False, description="Whether this is an error response")
156 | 


--------------------------------------------------------------------------------
/examples/mcp-server-client/src/mcp_server/server.py:
--------------------------------------------------------------------------------
  1 | """MCP server implementation with dice, weather, and date/time tools."""
  2 | 
  3 | import logging
  4 | import sys
  5 | from pathlib import Path
  6 | from typing import Any
  7 | 
  8 | from mcp.server.fastmcp import FastMCP
  9 | 
 10 | from src.mcp_server.tools.date_time import DateTimeTool
 11 | from src.mcp_server.tools.dice import DiceRollTool
 12 | from src.mcp_server.tools.weather import WeatherTool
 13 | 
 14 | # Add project root to Python path
 15 | project_root = Path(__file__).parent.parent.parent
 16 | sys.path.insert(0, str(project_root))
 17 | 
 18 | # Configure logging
 19 | logging.basicConfig(level=logging.INFO)
 20 | logger = logging.getLogger(__name__)
 21 | 
 22 | # Create MCP server instance
 23 | mcp = FastMCP("dice-weather-datetime-server")
 24 | 
 25 | # Initialize tool instances
 26 | dice_tool = DiceRollTool()
 27 | weather_tool = WeatherTool()
 28 | datetime_tool = DateTimeTool()
 29 | 
 30 | 
 31 | @mcp.tool()
 32 | async def roll_dice(notation: str) -> dict[str, Any]:
 33 |     """Roll dice using standard notation like '2d6' or '1d20'.
 34 | 
 35 |     Args:
 36 |         notation: Dice notation (e.g., "2d6", "1d20", "3d10")
 37 | 
 38 |     Returns:
 39 |         Dict containing dice roll results, total, and formatted display
 40 |     """
 41 |     logger.info(f"Tool call: roll_dice(notation='{notation}')")
 42 |     return await dice_tool.safe_execute(notation=notation)
 43 | 
 44 | 
 45 | @mcp.tool()
 46 | async def get_weather(location: str) -> dict[str, Any]:
 47 |     """Get current weather conditions for a location.
 48 | 
 49 |     Args:
 50 |         location: City name or coordinates (lat,lon)
 51 | 
 52 |     Returns:
 53 |         Dict containing weather data including temperature, condition, and wind speed
 54 |     """
 55 |     logger.info(f"Tool call: get_weather(location='{location}')")
 56 |     return await weather_tool.safe_execute(location=location)
 57 | 
 58 | 
 59 | @mcp.tool()
 60 | async def get_date(timezone: str = "UTC") -> dict[str, Any]:
 61 |     """Get current date and time for a specific timezone.
 62 | 
 63 |     Args:
 64 |         timezone: Timezone identifier (e.g., "UTC", "America/New_York") or alias
 65 | 
 66 |     Returns:
 67 |         Dict containing current date/time in ISO 8601 format with timezone info
 68 |     """
 69 |     logger.info(f"Tool call: get_date(timezone='{timezone}')")
 70 |     return await datetime_tool.safe_execute(timezone=timezone)
 71 | 
 72 | 
 73 | @mcp.resource("mcp://tools/help")
 74 | async def get_help() -> str:
 75 |     """Get help information about available tools."""
 76 |     help_text = """
 77 | 🎲 **MCP Server - Available Tools**
 78 | 
 79 | **roll_dice** - Roll dice using standard notation
 80 | - Usage: roll_dice(notation="2d6")
 81 | - Examples: "1d20", "3d6", "2d10"
 82 | - Returns individual values and total
 83 | 
 84 | **get_weather** - Get current weather conditions  
 85 | - Usage: get_weather(location="San Francisco")
 86 | - Supports city names or coordinates (lat,lon)
 87 | - Returns temperature, condition, wind speed
 88 | 
 89 | **get_date** - Get current date and time
 90 | - Usage: get_date(timezone="UTC")
 91 | - Supports IANA timezones and common aliases
 92 | - Returns ISO 8601 formatted datetime
 93 | 
 94 | **Examples:**
 95 | - roll_dice("2d6") → Roll two six-sided dice
 96 | - get_weather("London") → Weather for London
 97 | - get_date("America/New_York") → NYC current time
 98 | """
 99 |     return help_text
100 | 
101 | 
102 | async def cleanup_server():
103 |     """Cleanup server resources."""
104 |     logger.info("Cleaning up server resources...")
105 |     try:
106 |         await weather_tool.cleanup()
107 |         logger.info("Server cleanup completed")
108 |     except Exception as e:
109 |         logger.error(f"Error during cleanup: {e}")
110 | 
111 | 
112 | # Server lifecycle management
113 | async def startup():
114 |     """Server startup handler."""
115 |     logger.info("MCP Server starting up...")
116 |     logger.info("Tools available: roll_dice, get_weather, get_date")
117 | 
118 | 
119 | async def shutdown():
120 |     """Server shutdown handler."""
121 |     logger.info("MCP Server shutting down...")
122 |     await cleanup_server()
123 | 
124 | 
125 | def run_server():
126 |     """Run the MCP server."""
127 |     try:
128 |         logger.info("Starting MCP server...")
129 |         mcp.run()
130 |     except KeyboardInterrupt:
131 |         logger.info("Server interrupted by user")
132 |     except Exception as e:
133 |         logger.error(f"Server error: {e}")
134 |         raise
135 | 
136 | 
137 | if __name__ == "__main__":
138 |     run_server()
139 | 


--------------------------------------------------------------------------------
/examples/mcp-server-client/src/mcp_server/tools/__init__.py:
--------------------------------------------------------------------------------
 1 | """MCP server tools package."""
 2 | 
 3 | from .base import (
 4 |     AsyncHttpMixin,
 5 |     BaseTool,
 6 |     ExternalServiceError,
 7 |     ToolError,
 8 |     ValidationToolError,
 9 | )
10 | 
11 | __all__ = [
12 |     "AsyncHttpMixin",
13 |     "BaseTool",
14 |     "ExternalServiceError",
15 |     "ToolError",
16 |     "ValidationToolError",
17 | ]
18 | 


--------------------------------------------------------------------------------
/examples/mcp-server-client/src/mcp_server/tools/base.py:
--------------------------------------------------------------------------------
  1 | """Base tool interface and common patterns for MCP server tools."""
  2 | 
  3 | import logging
  4 | from abc import ABC, abstractmethod
  5 | from typing import Any
  6 | 
  7 | import httpx
  8 | from pydantic import BaseModel, ValidationError
  9 | 
 10 | logger = logging.getLogger(__name__)
 11 | 
 12 | 
 13 | class ToolError(Exception):
 14 |     """Base exception for tool-related errors."""
 15 | 
 16 |     def __init__(
 17 |         self, message: str, code: int = -1, data: dict[str, Any] | None = None
 18 |     ):
 19 |         super().__init__(message)
 20 |         self.message = message
 21 |         self.code = code
 22 |         self.data = data or {}
 23 | 
 24 | 
 25 | class ValidationToolError(ToolError):
 26 |     """Exception for input validation errors."""
 27 | 
 28 |     def __init__(self, message: str, validation_errors: list | None = None):
 29 |         super().__init__(message, code=-32602)  # Invalid params error code
 30 |         self.validation_errors = validation_errors or []
 31 | 
 32 | 
 33 | class ExternalServiceError(ToolError):
 34 |     """Exception for external service errors."""
 35 | 
 36 |     def __init__(self, message: str, service_name: str, status_code: int | None = None):
 37 |         super().__init__(message, code=-32603)  # Internal error code
 38 |         self.service_name = service_name
 39 |         self.status_code = status_code
 40 | 
 41 | 
 42 | class BaseTool(ABC):
 43 |     """Abstract base class for all MCP server tools."""
 44 | 
 45 |     def __init__(self, name: str, description: str):
 46 |         self.name = name
 47 |         self.description = description
 48 |         self.logger = logging.getLogger(f"{__name__}.{self.__class__.__name__}")
 49 | 
 50 |     @abstractmethod
 51 |     async def execute(self, **kwargs: Any) -> Any:
 52 |         """Execute the tool with the given arguments."""
 53 |         pass
 54 | 
 55 |     def validate_input(
 56 |         self, input_data: dict[str, Any], model_class: type[BaseModel]
 57 |     ) -> BaseModel:
 58 |         """Validate input data against a Pydantic model."""
 59 |         try:
 60 |             return model_class(**input_data)
 61 |         except ValidationError as e:
 62 |             error_messages = []
 63 |             for error in e.errors():
 64 |                 field = " -> ".join(str(x) for x in error["loc"])
 65 |                 message = error["msg"]
 66 |                 error_messages.append(f"{field}: {message}")
 67 | 
 68 |             raise ValidationToolError(
 69 |                 f"Invalid input for {self.name}: {'; '.join(error_messages)}",
 70 |                 validation_errors=e.errors(),
 71 |             )
 72 | 
 73 |     def create_success_response(self, data: Any) -> dict[str, Any]:
 74 |         """Create a successful tool response."""
 75 |         return {
 76 |             "content": [
 77 |                 {
 78 |                     "type": "text",
 79 |                     "text": str(data) if not isinstance(data, dict | list) else data,
 80 |                 }
 81 |             ],
 82 |             "isError": False,
 83 |         }
 84 | 
 85 |     def create_error_response(self, error: Exception) -> dict[str, Any]:
 86 |         """Create an error tool response."""
 87 |         if isinstance(error, ToolError):
 88 |             error_message = error.message
 89 |         else:
 90 |             error_message = f"An unexpected error occurred: {str(error)}"
 91 | 
 92 |         # Log the full error for debugging
 93 |         self.logger.error(f"Tool {self.name} error: {error}", exc_info=True)
 94 | 
 95 |         return {
 96 |             "content": [
 97 |                 {
 98 |                     "type": "text",
 99 |                     "text": error_message,
100 |                 }
101 |             ],
102 |             "isError": True,
103 |         }
104 | 
105 |     async def safe_execute(self, **kwargs) -> dict[str, Any]:
106 |         """Execute the tool with error handling."""
107 |         try:
108 |             result = await self.execute(**kwargs)
109 |             return self.create_success_response(result)
110 |         except Exception as e:
111 |             return self.create_error_response(e)
112 | 
113 | 
114 | class AsyncHttpMixin:
115 |     """Mixin for tools that need HTTP client capabilities."""
116 | 
117 |     def __init__(self, *args, **kwargs):
118 |         super().__init__(*args, **kwargs)
119 |         self._http_client = None
120 | 
121 |     @property
122 |     def http_client(self):
123 |         """Get or create HTTP client."""
124 |         if self._http_client is None:
125 |             import httpx
126 | 
127 |             self._http_client = httpx.AsyncClient(
128 |                 timeout=30.0,
129 |                 headers={"User-Agent": "MCP-Server/1.0"},
130 |             )
131 |         return self._http_client
132 | 
133 |     async def cleanup(self):
134 |         """Cleanup HTTP client resources."""
135 |         if self._http_client:
136 |             await self._http_client.aclose()
137 |             self._http_client = None
138 | 
139 |     async def make_request(
140 |         self, method: str, url: str, timeout: float = 10.0, **kwargs
141 |     ) -> dict[str, Any]:
142 |         """Make an HTTP request with error handling."""
143 |         try:
144 |             response = await self.http_client.request(
145 |                 method=method, url=url, timeout=timeout, **kwargs
146 |             )
147 |             response.raise_for_status()
148 |             return response.json()
149 |         except httpx.TimeoutException:
150 |             raise ExternalServiceError(
151 |                 f"Request to {url} timed out after {timeout} seconds",
152 |                 service_name="HTTP",
153 |             )
154 |         except httpx.HTTPStatusError as e:
155 |             raise ExternalServiceError(
156 |                 f"HTTP error {e.response.status_code}: {e.response.text}",
157 |                 service_name="HTTP",
158 |                 status_code=e.response.status_code,
159 |             )
160 |         except Exception as e:
161 |             raise ExternalServiceError(
162 |                 f"Failed to make request to {url}: {str(e)}",
163 |                 service_name="HTTP",
164 |             )
165 | 


--------------------------------------------------------------------------------
/examples/mcp-server-client/src/mcp_server/tools/dice.py:
--------------------------------------------------------------------------------
 1 | """Dice rolling tool for MCP server."""
 2 | 
 3 | import random
 4 | import re
 5 | from typing import Any
 6 | 
 7 | from ..models import DiceRollRequest, DiceRollResponse
 8 | from .base import BaseTool, ToolError
 9 | 
10 | 
11 | class DiceRollTool(BaseTool):
12 |     """Tool for rolling dice using standard notation."""
13 | 
14 |     def __init__(self):
15 |         super().__init__(
16 |             name="roll_dice",
17 |             description="Roll dice using standard notation like '2d6' or '1d20'",
18 |         )
19 |         self.notation_pattern = re.compile(r"^(\d+)d(\d+)$")
20 | 
21 |     async def execute(self, **kwargs: Any) -> DiceRollResponse:
22 |         """Execute dice roll with the given notation."""
23 |         notation = kwargs.get("notation")
24 |         if not notation:
25 |             raise ToolError("Missing required parameter: notation")
26 | 
27 |         # Validate input using Pydantic model
28 |         request = self.validate_input({"notation": notation}, DiceRollRequest)
29 | 
30 |         # Parse the notation
31 |         match = self.notation_pattern.match(request.notation)
32 |         if not match:
33 |             raise ToolError(f"Invalid dice notation: {notation}")
34 | 
35 |         dice_count = int(match.group(1))
36 |         sides = int(match.group(2))
37 | 
38 |         self.logger.info(f"Rolling {dice_count}d{sides}")
39 | 
40 |         # Generate random values for each die
41 |         values = []
42 |         for _ in range(dice_count):
43 |             roll = random.randint(1, sides)
44 |             values.append(roll)
45 | 
46 |         total = sum(values)
47 | 
48 |         self.logger.info(f"Dice roll result: {values} (total: {total})")
49 | 
50 |         # Return structured response
51 |         return DiceRollResponse(
52 |             values=values,
53 |             total=total,
54 |             notation=str(notation),  # Return original notation as provided
55 |         )
56 | 
57 |     def format_result(self, response: DiceRollResponse) -> str:
58 |         """Format dice roll result for display."""
59 |         if len(response.values) == 1:
60 |             return f"🎲 Rolled {response.notation}: **{response.values[0]}**"
61 |         else:
62 |             values_str = ", ".join(map(str, response.values))
63 |             return (
64 |                 f"🎲 Rolled {response.notation}: [{values_str}] = **{response.total}**"
65 |             )
66 | 
67 |     async def safe_execute(self, **kwargs) -> dict[str, Any]:
68 |         """Execute dice roll with formatted output."""
69 |         try:
70 |             result = await self.execute(**kwargs)
71 |             formatted_result = self.format_result(result)
72 | 
73 |             return {
74 |                 "content": [
75 |                     {
76 |                         "type": "text",
77 |                         "text": formatted_result,
78 |                     }
79 |                 ],
80 |                 "isError": False,
81 |             }
82 |         except Exception as e:
83 |             return self.create_error_response(e)
84 | 


--------------------------------------------------------------------------------
/examples/mcp-server-client/src/py.typed:
--------------------------------------------------------------------------------
1 | # PEP 561 – Distributing and Packaging Type Information
2 | # https://peps.python.org/pep-0561/


--------------------------------------------------------------------------------
/examples/mcp-server-client/tests/__init__.py:
--------------------------------------------------------------------------------
https://raw.githubusercontent.com/qte77/context-engineering-template/3a4083177213652723eb99487804e4ff6eaa97a0/examples/mcp-server-client/tests/__init__.py


--------------------------------------------------------------------------------
/examples/mcp-server-client/tests/fixtures/__init__.py:
--------------------------------------------------------------------------------
https://raw.githubusercontent.com/qte77/context-engineering-template/3a4083177213652723eb99487804e4ff6eaa97a0/examples/mcp-server-client/tests/fixtures/__init__.py


--------------------------------------------------------------------------------
/examples/mcp-server-client/tests/fixtures/mcp_messages.py:
--------------------------------------------------------------------------------
 1 | """Test fixtures for MCP messages and responses."""
 2 | 
 3 | from typing import Any
 4 | 
 5 | 
 6 | class MCPMessageFixtures:
 7 |     """Collection of MCP message fixtures for testing."""
 8 | 
 9 |     @staticmethod
10 |     def tool_call_request(
11 |         tool_name: str, arguments: dict[str, Any], request_id: int = 1
12 |     ) -> dict[str, Any]:
13 |         """Create a standard MCP tool call request."""
14 |         return {
15 |             "jsonrpc": "2.0",
16 |             "method": "tools/call",
17 |             "params": {
18 |                 "name": tool_name,
19 |                 "arguments": arguments,
20 |             },
21 |             "id": request_id,
22 |         }
23 | 
24 |     @staticmethod
25 |     def success_response(content: Any, request_id: int = 1) -> dict[str, Any]:
26 |         """Create a successful MCP response."""
27 |         return {
28 |             "jsonrpc": "2.0",
29 |             "id": request_id,
30 |             "result": {
31 |                 "content": [
32 |                     {
33 |                         "type": "text",
34 |                         "text": content,
35 |                     }
36 |                 ],
37 |                 "isError": False,
38 |             },
39 |         }
40 | 
41 |     @staticmethod
42 |     def error_response(error_message: str, request_id: int = 1) -> dict[str, Any]:
43 |         """Create an error MCP response."""
44 |         return {
45 |             "jsonrpc": "2.0",
46 |             "id": request_id,
47 |             "result": {
48 |                 "content": [
49 |                     {
50 |                         "type": "text",
51 |                         "text": error_message,
52 |                     }
53 |                 ],
54 |                 "isError": True,
55 |             },
56 |         }
57 | 
58 | 
59 | class WeatherAPIFixtures:
60 |     """Collection of weather API response fixtures."""
61 | 
62 |     @staticmethod
63 |     def current_weather_response(
64 |         temperature: float = 20.0,
65 |         weather_code: int = 0,
66 |         wind_speed: float = 10.0,
67 |         humidity: float = 65.0,
68 |     ) -> dict[str, Any]:
69 |         """Create a mock Open-Meteo API response."""
70 |         return {
71 |             "current": {
72 |                 "time": "2025-07-07T14:30:00Z",
73 |                 "temperature_2m": temperature,
74 |                 "relative_humidity_2m": humidity,
75 |                 "weather_code": weather_code,
76 |                 "wind_speed_10m": wind_speed,
77 |             },
78 |             "current_units": {
79 |                 "time": "iso8601",
80 |                 "temperature_2m": "°C",
81 |                 "relative_humidity_2m": "%",
82 |                 "weather_code": "wmo code",
83 |                 "wind_speed_10m": "km/h",
84 |             },
85 |         }
86 | 
87 |     @staticmethod
88 |     def api_error_response(status_code: int = 500) -> dict[str, Any]:
89 |         """Create a mock API error response."""
90 |         return {
91 |             "error": True,
92 |             "reason": "Internal server error" if status_code == 500 else "Bad request",
93 |         }
94 | 


--------------------------------------------------------------------------------
/examples/mcp-server-client/tests/test_tools/__init__.py:
--------------------------------------------------------------------------------
https://raw.githubusercontent.com/qte77/context-engineering-template/3a4083177213652723eb99487804e4ff6eaa97a0/examples/mcp-server-client/tests/test_tools/__init__.py


--------------------------------------------------------------------------------
/mkdocs.yaml:
--------------------------------------------------------------------------------
 1 | ---
 2 | # https://github.com/james-willett/mkdocs-material-youtube-tutorial
 3 | # https://mkdocstrings.github.io/recipes/
 4 | # site info set in workflow
 5 | site_name: '<gha_sed_site_name_here>'
 6 | site_description: '<gha_sed_site_description_here>'
 7 | repo_url: '<gha_sed_repo_url_here>'
 8 | edit_uri: edit/main
 9 | theme:
10 |   name: material
11 |   language: en
12 |   features:
13 |     - content.code.annotation
14 |     - content.code.copy
15 |     - content.tabs.link
16 |     - navigation.footer
17 |     - navigation.sections
18 |     - navigation.tabs
19 |     - navigation.top
20 |     - toc.integrate
21 |     - search.suggest
22 |     - search.highlight
23 |   palette:
24 |     - media: "(prefers-color-scheme: light)"
25 |       scheme: default
26 |       toggle:
27 |         # icon: material/brightness-7
28 |         icon: material/toggle-switch-off-outline 
29 |         name: "Toggle Dark Mode"
30 |     - media: "(prefers-color-scheme: dark)"
31 |       scheme: slate
32 |       toggle:
33 |         # icon: material/brightness-4
34 |         icon: material/toggle-switch
35 |         name: "Toggle Light Mode"
36 | nav:
37 |   - Home: index.md
38 |   - Code: docstrings.md
39 |   - Change Log: CHANGELOG.md
40 |   - License: LICENSE
41 |   - llms.txt: llms.txt
42 | plugins:
43 |   - search:
44 |       lang: en
45 |   - autorefs
46 |   - mkdocstrings:
47 |       handlers:
48 |         python:
49 |           paths: [src]
50 |           options:
51 |             show_root_heading: true
52 |             show_root_full_path: true
53 |             show_object_full_path: false
54 |             show_root_members_full_path: false
55 |             show_category_heading: true
56 |             show_submodules: true
57 | markdown_extensions:
58 |   - attr_list
59 |   - pymdownx.magiclink
60 |   - pymdownx.tabbed
61 |   - pymdownx.highlight:
62 |       anchor_linenums: true
63 |   - pymdownx.superfences
64 |   - pymdownx.snippets:
65 |       check_paths: true
66 |   - pymdownx.tasklist:
67 |       custom_checkbox: true
68 |   - sane_lists
69 |   - smarty
70 |   - toc:
71 |       permalink: true
72 | validation:
73 |   links:
74 |     not_found: warn
75 |     anchors: warn
76 | # builds only if validation succeeds while
77 | # threating warnings as errors
78 | # also checks for broken links
79 | # strict: true
80 | ...
81 | 


--------------------------------------------------------------------------------
/pyproject.toml:
--------------------------------------------------------------------------------
  1 | [build-system]
  2 | requires = ["hatchling"]
  3 | build-backend = "hatchling.build"
  4 | 
  5 | [project]
  6 | version = "0.0.1"
  7 | name = "context-engineering-template"
  8 | description = "Assess the effectiveness of coding agents with context, mcp, custom commands and sub agents."
  9 | authors = [
 10 |     {name = "qte77", email = "qte@77.gh"}
 11 | ]
 12 | readme = "README.md"
 13 | requires-python = ">=3.13"
 14 | license = "bsd-3-clause"
 15 | dependencies = []
 16 | 
 17 | [project.urls]
 18 | Documentation = "https://qte77.github.io/context-engineering-template/"
 19 | 
 20 | [dependency-groups]
 21 | dev = [
 22 |     "pyright>=1.1.403",
 23 |     "ruff>=0.11.12",
 24 | ]
 25 | test = [
 26 |     "hypothesis>=6.137.0",
 27 |     "coverage>=7.6.0",
 28 | ]
 29 | docs = [
 30 |     "griffe>=1.5.1",
 31 |     "mkdocs>=1.6.1",
 32 |     "mkdocs-awesome-pages-plugin>=2.9.3",
 33 |     "mkdocs-gen-files>=0.5.0",
 34 |     "mkdocs-literate-nav>=0.6.1",
 35 |     "mkdocs-material>=9.5.44",
 36 |     "mkdocs-section-index>=0.3.8",
 37 |     "mkdocstrings[python]>=0.27.0",
 38 | ]
 39 | 
 40 | [tool.hatch.build.targets.wheel]
 41 | packages = ["src"]
 42 | 
 43 | [tool.uv]
 44 | package = true
 45 | exclude-newer = "2025-08-10T00:00:00Z"
 46 | 
 47 | [tool.ruff]
 48 | target-version = "py313"
 49 | src = ["src", "tests"]
 50 | 
 51 | [tool.ruff.format]
 52 | docstring-code-format = true
 53 | 
 54 | [tool.ruff.lint]
 55 | # ignore = ["E203"]  # Whitespace before ':'
 56 | unfixable = ["B"]
 57 | select = [
 58 |     # pycodestyle
 59 |     "E",
 60 |     # Pyflakes
 61 |     "F",
 62 |     # pyupgrade
 63 |     "UP",
 64 |     # isort
 65 |     "I",
 66 | ]
 67 | 
 68 | [tool.ruff.lint.isort]
 69 | known-first-party = ["src", "tests"]
 70 | 
 71 | [tool.ruff.lint.pydocstyle]
 72 | convention = "google"
 73 | 
 74 | [tool.hypothesis]
 75 | max_examples = 100
 76 | deadline = 5000
 77 | suppress_health_check = ["too_slow"]
 78 | verbosity = "normal"
 79 | print_blob = true
 80 | report_multiple_bugs = false
 81 | 
 82 | [tool.hypothesis.profiles.dev]
 83 | max_examples = 10
 84 | verbosity = "normal"
 85 | deadline = 1000
 86 | 
 87 | [tool.hypothesis.profiles.debug]
 88 | max_examples = 10
 89 | verbosity = "verbose"
 90 | print_blob = true
 91 | deadline = 10000
 92 | 
 93 | [tool.hypothesis.profiles.ci]
 94 | max_examples = 1000
 95 | verbosity = "normal"
 96 | deadline = 10000
 97 | report_multiple_bugs = true
 98 | 
 99 | [tool.hypothesis.profiles.thorough]
100 | max_examples = 10000
101 | verbosity = "normal"
102 | deadline = 60000
103 | 
104 | [tool.coverage.run]
105 | source = ["src"]
106 | omit = [
107 |     "*/tests/*",
108 |     "*/test_*",
109 |     "*/__pycache__/*"
110 | ]
111 | 
112 | [tool.coverage.report]
113 | exclude_lines = [
114 |     "pragma: no cover",
115 |     "def __repr__",
116 |     "if self.debug:",
117 |     "if settings.DEBUG",
118 |     "raise AssertionError",
119 |     "raise NotImplementedError",
120 |     "if 0:",
121 |     "if __name__ == .__main__.:",
122 |     "class .*\\bProtocol\\):",
123 |     "@(abc\\.)?abstractmethod"
124 | ]
125 | show_missing = true
126 | skip_covered = false
127 | skip_empty = false
128 | 
129 | [tool.bumpversion]
130 | current_version = "0.0.1"
131 | parse = "(?P<major>\\d+)\\.(?P<minor>\\d+)\\.(?P<patch>\\d+)"
132 | serialize = ["{major}.{minor}.{patch}"]
133 | commit = true
134 | tag = true
135 | allow_dirty = false
136 | ignore_missing_version = false
137 | sign_tags = false
138 | tag_name = "v{new_version}"
139 | tag_message = "Bump version: {current_version} → {new_version}"
140 | message = "Bump version: {current_version} → {new_version}"
141 | commit_args = ""
142 | 
143 | [[tool.bumpversion.files]]
144 | filename = "pyproject.toml"
145 | search = 'version = "{current_version}"'
146 | replace = 'version = "{new_version}"'
147 | 
148 | [[tool.bumpversion.files]]
149 | filename = "src/__init__.py"
150 | search = '__version__ = "{current_version}"'
151 | replace = '__version__ = "{new_version}"'
152 | 
153 | [[tool.bumpversion.files]]
154 | filename = "README.md"
155 | search = "version-{current_version}-58f4c2"
156 | replace = "version-{new_version}-58f4c2"
157 | 
158 | [[tool.bumpversion.files]]
159 | filename = "CHANGELOG.md"
160 | search = """
161 | ## [Unreleased]
162 | """
163 | replace = """
164 | ## [Unreleased]
165 | 
166 | ## [{new_version}] - {now:%Y-%m-%d}
167 | """


--------------------------------------------------------------------------------
/scripts/generate-plantuml-png.sh:
--------------------------------------------------------------------------------
 1 | #!/bin/bash
 2 | # set -e
 3 | 
 4 | INPUT_FILE="$1"
 5 | 
 6 | CLI_PREFIX='shell: '
 7 | BOLD_RED='\e[1;31m'
 8 | NC='\e[0m'
 9 | 
10 | if [ ! -f "$INPUT_FILE" ]; then
11 |     printf "${CLI_PREFIX}${BOLD_RED}Input file '$INPUT_FILE' does not exist. Exiting ... ${NC}\n"
12 |     exit 1
13 | fi
14 | 
15 | STYLE="${2:-light}"
16 | OUTPUT_PATH="${3:-$(dirname "$INPUT_FILE")}"
17 | CHECK_ONLY="${4:-false}"
18 | PLANTUML_CONTAINER="${5:-plantuml/plantuml:latest}"
19 | 
20 | INPUT_NAME="$(basename "$INPUT_FILE")"
21 | INPUT_PATH=$(dirname "$INPUT_FILE")
22 | OUTPUT_NAME="${INPUT_NAME%.*}.png"
23 | OUTPUT_NAME_FULL="${INPUT_NAME%.*}-${STYLE}.png"
24 | 
25 | BASE_CMD="docker run --rm \
26 |     -v \"$(pwd)/${INPUT_PATH}\":/data \
27 |     -e PLANTUML_SECURITY_PROFILE=\"ALLOWLIST\" \
28 |     -e PLANTUML_INCLUDE_PATH=\"/data\" \
29 |     \"${PLANTUML_CONTAINER}\" \
30 |     -DSTYLE=\"${STYLE}\" \
31 |     -o \"/data\""
32 | 
33 | if [ "$CHECK_ONLY" = true ]; then
34 |     eval "$BASE_CMD -v -checkonly \"/data/${INPUT_NAME}\""
35 | else
36 |     eval "$BASE_CMD \"/data/${INPUT_NAME}\""
37 | fi
38 | 
39 | # If the desired output path is different from where the file was generated, move it.
40 | printf "${CLI_PREFIX}${BOLD_RED}Renaming and moving ${OUTPUT_NAME_FULL} to ${OUTPUT_PATH} ...${NC}\n"
41 | mv "${INPUT_PATH}/${OUTPUT_NAME}" "${OUTPUT_PATH}/${OUTPUT_NAME_FULL}"


--------------------------------------------------------------------------------
/src/__init__.py:
--------------------------------------------------------------------------------
1 | """Defines the application version."""
2 | 
3 | __version__ = "0.0.1"
4 | 


--------------------------------------------------------------------------------
/src/main.py:
--------------------------------------------------------------------------------
1 | """Contains the entrypoint to the app."""
2 | 
3 | pass
4 | 


--------------------------------------------------------------------------------
/src/py.typed:
--------------------------------------------------------------------------------
1 | # PEP 561 – Distributing and Packaging Type Information
2 | # https://peps.python.org/pep-0561/


--------------------------------------------------------------------------------
/tests/test_tests.py:
--------------------------------------------------------------------------------
 1 | # https://hypothesis.readthedocs.io/en/latest/quickstart.html
 2 | # contents of example.py
 3 | from hypothesis import given
 4 | from hypothesis import strategies as st
 5 | 
 6 | 
 7 | @given(st.integers())
 8 | def test_integers(n):
 9 |     print(f"called with {n}")
10 |     assert isinstance(n, int)
11 | 
12 | 
13 | test_integers()
14 | 
15 | 
16 | @st.composite
17 | def ordered_pairs(draw):
18 |     n1 = draw(st.integers())
19 |     n2 = draw(st.integers(min_value=n1))
20 |     return (n1, n2)
21 | 
22 | 
23 | @given(ordered_pairs())
24 | def test_pairs_are_ordered(pair):
25 |     n1, n2 = pair
26 |     assert n1 <= n2
27 | 
28 | 
29 | test_pairs_are_ordered()
30 | 


--------------------------------------------------------------------------------
